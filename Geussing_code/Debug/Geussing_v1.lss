
Geussing_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  000030e4  00003178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001ca  008001ca  000032e2  2**0
                  ALLOC
  3 .stab         00002c94  00000000  00000000  000032e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015f0  00000000  00000000  00005f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00007568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000258  00000000  00000000  00007768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000028f3  00000000  00000000  000079c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000168f  00000000  00000000  0000a2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014df  00000000  00000000  0000b942  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000ce24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000357  00000000  00000000  0000d044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cfc  00000000  00000000  0000d39b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e097  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__vector_10>
      2c:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 18 	call	0x3038	; 0x3038 <main>
      8a:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 9d 02 	call	0x53a	; 0x53a <__subsf3>
      be:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__floatundisf>:
      ea:	a2 e0       	ldi	r26, 0x02	; 2
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
      f6:	12 2f       	mov	r17, r18
      f8:	b3 2e       	mov	r11, r19
      fa:	a4 2e       	mov	r10, r20
      fc:	95 2e       	mov	r9, r21
      fe:	86 2e       	mov	r8, r22
     100:	37 2e       	mov	r3, r23
     102:	28 2e       	mov	r2, r24
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	c2 2e       	mov	r12, r18
     108:	d3 2e       	mov	r13, r19
     10a:	e4 2e       	mov	r14, r20
     10c:	f5 2e       	mov	r15, r21
     10e:	a7 01       	movw	r20, r14
     110:	96 01       	movw	r18, r12
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	21 17       	cp	r18, r17
     11c:	a1 f4       	brne	.+40     	; 0x146 <__floatundisf+0x5c>
     11e:	3b 15       	cp	r19, r11
     120:	91 f4       	brne	.+36     	; 0x146 <__floatundisf+0x5c>
     122:	4a 15       	cp	r20, r10
     124:	81 f4       	brne	.+32     	; 0x146 <__floatundisf+0x5c>
     126:	59 15       	cp	r21, r9
     128:	71 f4       	brne	.+28     	; 0x146 <__floatundisf+0x5c>
     12a:	68 15       	cp	r22, r8
     12c:	61 f4       	brne	.+24     	; 0x146 <__floatundisf+0x5c>
     12e:	73 15       	cp	r23, r3
     130:	51 f4       	brne	.+20     	; 0x146 <__floatundisf+0x5c>
     132:	82 15       	cp	r24, r2
     134:	41 f4       	brne	.+16     	; 0x146 <__floatundisf+0x5c>
     136:	aa 81       	ldd	r26, Y+2	; 0x02
     138:	9a 17       	cp	r25, r26
     13a:	29 f4       	brne	.+10     	; 0x146 <__floatundisf+0x5c>
     13c:	c7 01       	movw	r24, r14
     13e:	b6 01       	movw	r22, r12
     140:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
     144:	aa c0       	rjmp	.+340    	; 0x29a <__floatundisf+0x1b0>
     146:	21 2f       	mov	r18, r17
     148:	3b 2d       	mov	r19, r11
     14a:	4a 2d       	mov	r20, r10
     14c:	59 2d       	mov	r21, r9
     14e:	68 2d       	mov	r22, r8
     150:	73 2d       	mov	r23, r3
     152:	82 2d       	mov	r24, r2
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	00 e2       	ldi	r16, 0x20	; 32
     158:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__lshrdi3>
     15c:	c9 01       	movw	r24, r18
     15e:	da 01       	movw	r26, r20
     160:	80 30       	cpi	r24, 0x00	; 0
     162:	e0 e0       	ldi	r30, 0x00	; 0
     164:	9e 07       	cpc	r25, r30
     166:	e1 e0       	ldi	r30, 0x01	; 1
     168:	ae 07       	cpc	r26, r30
     16a:	e0 e0       	ldi	r30, 0x00	; 0
     16c:	be 07       	cpc	r27, r30
     16e:	80 f4       	brcc	.+32     	; 0x190 <__floatundisf+0xa6>
     170:	8f 3f       	cpi	r24, 0xFF	; 255
     172:	91 05       	cpc	r25, r1
     174:	a1 05       	cpc	r26, r1
     176:	b1 05       	cpc	r27, r1
     178:	31 f0       	breq	.+12     	; 0x186 <__floatundisf+0x9c>
     17a:	28 f0       	brcs	.+10     	; 0x186 <__floatundisf+0x9c>
     17c:	28 e0       	ldi	r18, 0x08	; 8
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	16 c0       	rjmp	.+44     	; 0x1b2 <__floatundisf+0xc8>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	11 c0       	rjmp	.+34     	; 0x1b2 <__floatundisf+0xc8>
     190:	80 30       	cpi	r24, 0x00	; 0
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	9f 07       	cpc	r25, r31
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	af 07       	cpc	r26, r31
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	bf 07       	cpc	r27, r31
     19e:	28 f0       	brcs	.+10     	; 0x1aa <__floatundisf+0xc0>
     1a0:	28 e1       	ldi	r18, 0x18	; 24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__floatundisf+0xc8>
     1aa:	20 e1       	ldi	r18, 0x10	; 16
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	02 2e       	mov	r0, r18
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <__floatundisf+0xd4>
     1b6:	b6 95       	lsr	r27
     1b8:	a7 95       	ror	r26
     1ba:	97 95       	ror	r25
     1bc:	87 95       	ror	r24
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <__floatundisf+0xcc>
     1c2:	fc 01       	movw	r30, r24
     1c4:	e8 53       	subi	r30, 0x38	; 56
     1c6:	ff 4f       	sbci	r31, 0xFF	; 255
     1c8:	80 81       	ld	r24, Z
     1ca:	29 01       	movw	r4, r18
     1cc:	3a 01       	movw	r6, r20
     1ce:	48 0e       	add	r4, r24
     1d0:	51 1c       	adc	r5, r1
     1d2:	61 1c       	adc	r6, r1
     1d4:	71 1c       	adc	r7, r1
     1d6:	49 82       	std	Y+1, r4	; 0x01
     1d8:	21 2f       	mov	r18, r17
     1da:	3b 2d       	mov	r19, r11
     1dc:	4a 2d       	mov	r20, r10
     1de:	59 2d       	mov	r21, r9
     1e0:	68 2d       	mov	r22, r8
     1e2:	73 2d       	mov	r23, r3
     1e4:	82 2d       	mov	r24, r2
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	04 2d       	mov	r16, r4
     1ea:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__lshrdi3>
     1ee:	c9 01       	movw	r24, r18
     1f0:	da 01       	movw	r26, r20
     1f2:	4c 01       	movw	r8, r24
     1f4:	5d 01       	movw	r10, r26
     1f6:	80 e2       	ldi	r24, 0x20	; 32
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	84 19       	sub	r24, r4
     1fc:	95 09       	sbc	r25, r5
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <__floatundisf+0x11e>
     200:	cc 0c       	add	r12, r12
     202:	dd 1c       	adc	r13, r13
     204:	ee 1c       	adc	r14, r14
     206:	ff 1c       	adc	r15, r15
     208:	8a 95       	dec	r24
     20a:	d2 f7       	brpl	.-12     	; 0x200 <__floatundisf+0x116>
     20c:	c1 14       	cp	r12, r1
     20e:	d1 04       	cpc	r13, r1
     210:	e1 04       	cpc	r14, r1
     212:	f1 04       	cpc	r15, r1
     214:	41 f0       	breq	.+16     	; 0x226 <__floatundisf+0x13c>
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	88 2a       	or	r8, r24
     220:	99 2a       	or	r9, r25
     222:	aa 2a       	or	r10, r26
     224:	bb 2a       	or	r11, r27
     226:	90 e2       	ldi	r25, 0x20	; 32
     228:	49 16       	cp	r4, r25
     22a:	51 04       	cpc	r5, r1
     22c:	61 04       	cpc	r6, r1
     22e:	71 04       	cpc	r7, r1
     230:	59 f4       	brne	.+22     	; 0x248 <__floatundisf+0x15e>
     232:	0f 2e       	mov	r0, r31
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	ef 2e       	mov	r14, r31
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ff 2e       	mov	r15, r31
     23c:	f0 e8       	ldi	r31, 0x80	; 128
     23e:	0f 2f       	mov	r16, r31
     240:	ff e4       	ldi	r31, 0x4F	; 79
     242:	1f 2f       	mov	r17, r31
     244:	f0 2d       	mov	r31, r0
     246:	21 c0       	rjmp	.+66     	; 0x28a <__floatundisf+0x1a0>
     248:	af e1       	ldi	r26, 0x1F	; 31
     24a:	4a 16       	cp	r4, r26
     24c:	51 04       	cpc	r5, r1
     24e:	61 04       	cpc	r6, r1
     250:	71 04       	cpc	r7, r1
     252:	59 f4       	brne	.+22     	; 0x26a <__floatundisf+0x180>
     254:	0f 2e       	mov	r0, r31
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ef 2e       	mov	r14, r31
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	ff 2e       	mov	r15, r31
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	0f 2f       	mov	r16, r31
     262:	ff e4       	ldi	r31, 0x4F	; 79
     264:	1f 2f       	mov	r17, r31
     266:	f0 2d       	mov	r31, r0
     268:	10 c0       	rjmp	.+32     	; 0x28a <__floatundisf+0x1a0>
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	09 80       	ldd	r0, Y+1	; 0x01
     274:	04 c0       	rjmp	.+8      	; 0x27e <__floatundisf+0x194>
     276:	66 0f       	add	r22, r22
     278:	77 1f       	adc	r23, r23
     27a:	88 1f       	adc	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	0a 94       	dec	r0
     280:	d2 f7       	brpl	.-12     	; 0x276 <__floatundisf+0x18c>
     282:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
     286:	7b 01       	movw	r14, r22
     288:	8c 01       	movw	r16, r24
     28a:	c5 01       	movw	r24, r10
     28c:	b4 01       	movw	r22, r8
     28e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
     292:	a8 01       	movw	r20, r16
     294:	97 01       	movw	r18, r14
     296:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
     29a:	22 96       	adiw	r28, 0x02	; 2
     29c:	e2 e1       	ldi	r30, 0x12	; 18
     29e:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

000002a2 <_fpadd_parts>:
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e7 e5       	ldi	r30, 0x57	; 87
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
     2ae:	dc 01       	movw	r26, r24
     2b0:	2b 01       	movw	r4, r22
     2b2:	fa 01       	movw	r30, r20
     2b4:	9c 91       	ld	r25, X
     2b6:	92 30       	cpi	r25, 0x02	; 2
     2b8:	08 f4       	brcc	.+2      	; 0x2bc <_fpadd_parts+0x1a>
     2ba:	39 c1       	rjmp	.+626    	; 0x52e <_fpadd_parts+0x28c>
     2bc:	eb 01       	movw	r28, r22
     2be:	88 81       	ld	r24, Y
     2c0:	82 30       	cpi	r24, 0x02	; 2
     2c2:	08 f4       	brcc	.+2      	; 0x2c6 <_fpadd_parts+0x24>
     2c4:	33 c1       	rjmp	.+614    	; 0x52c <_fpadd_parts+0x28a>
     2c6:	94 30       	cpi	r25, 0x04	; 4
     2c8:	69 f4       	brne	.+26     	; 0x2e4 <_fpadd_parts+0x42>
     2ca:	84 30       	cpi	r24, 0x04	; 4
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <_fpadd_parts+0x2e>
     2ce:	2f c1       	rjmp	.+606    	; 0x52e <_fpadd_parts+0x28c>
     2d0:	11 96       	adiw	r26, 0x01	; 1
     2d2:	9c 91       	ld	r25, X
     2d4:	11 97       	sbiw	r26, 0x01	; 1
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	98 17       	cp	r25, r24
     2da:	09 f4       	brne	.+2      	; 0x2de <_fpadd_parts+0x3c>
     2dc:	28 c1       	rjmp	.+592    	; 0x52e <_fpadd_parts+0x28c>
     2de:	a0 ec       	ldi	r26, 0xC0	; 192
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	25 c1       	rjmp	.+586    	; 0x52e <_fpadd_parts+0x28c>
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	09 f4       	brne	.+2      	; 0x2ea <_fpadd_parts+0x48>
     2e8:	21 c1       	rjmp	.+578    	; 0x52c <_fpadd_parts+0x28a>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	a9 f4       	brne	.+42     	; 0x318 <_fpadd_parts+0x76>
     2ee:	92 30       	cpi	r25, 0x02	; 2
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <_fpadd_parts+0x52>
     2f2:	1d c1       	rjmp	.+570    	; 0x52e <_fpadd_parts+0x28c>
     2f4:	9a 01       	movw	r18, r20
     2f6:	ad 01       	movw	r20, r26
     2f8:	88 e0       	ldi	r24, 0x08	; 8
     2fa:	ea 01       	movw	r28, r20
     2fc:	09 90       	ld	r0, Y+
     2fe:	ae 01       	movw	r20, r28
     300:	e9 01       	movw	r28, r18
     302:	09 92       	st	Y+, r0
     304:	9e 01       	movw	r18, r28
     306:	81 50       	subi	r24, 0x01	; 1
     308:	c1 f7       	brne	.-16     	; 0x2fa <_fpadd_parts+0x58>
     30a:	e2 01       	movw	r28, r4
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	11 96       	adiw	r26, 0x01	; 1
     310:	9c 91       	ld	r25, X
     312:	89 23       	and	r24, r25
     314:	81 83       	std	Z+1, r24	; 0x01
     316:	08 c1       	rjmp	.+528    	; 0x528 <_fpadd_parts+0x286>
     318:	92 30       	cpi	r25, 0x02	; 2
     31a:	09 f4       	brne	.+2      	; 0x31e <_fpadd_parts+0x7c>
     31c:	07 c1       	rjmp	.+526    	; 0x52c <_fpadd_parts+0x28a>
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	2d 90       	ld	r2, X+
     322:	3c 90       	ld	r3, X
     324:	13 97       	sbiw	r26, 0x03	; 3
     326:	eb 01       	movw	r28, r22
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	9b 81       	ldd	r25, Y+3	; 0x03
     32c:	14 96       	adiw	r26, 0x04	; 4
     32e:	ad 90       	ld	r10, X+
     330:	bd 90       	ld	r11, X+
     332:	cd 90       	ld	r12, X+
     334:	dc 90       	ld	r13, X
     336:	17 97       	sbiw	r26, 0x07	; 7
     338:	ec 80       	ldd	r14, Y+4	; 0x04
     33a:	fd 80       	ldd	r15, Y+5	; 0x05
     33c:	0e 81       	ldd	r16, Y+6	; 0x06
     33e:	1f 81       	ldd	r17, Y+7	; 0x07
     340:	91 01       	movw	r18, r2
     342:	28 1b       	sub	r18, r24
     344:	39 0b       	sbc	r19, r25
     346:	b9 01       	movw	r22, r18
     348:	37 ff       	sbrs	r19, 7
     34a:	04 c0       	rjmp	.+8      	; 0x354 <_fpadd_parts+0xb2>
     34c:	66 27       	eor	r22, r22
     34e:	77 27       	eor	r23, r23
     350:	62 1b       	sub	r22, r18
     352:	73 0b       	sbc	r23, r19
     354:	60 32       	cpi	r22, 0x20	; 32
     356:	71 05       	cpc	r23, r1
     358:	0c f0       	brlt	.+2      	; 0x35c <_fpadd_parts+0xba>
     35a:	61 c0       	rjmp	.+194    	; 0x41e <_fpadd_parts+0x17c>
     35c:	12 16       	cp	r1, r18
     35e:	13 06       	cpc	r1, r19
     360:	6c f5       	brge	.+90     	; 0x3bc <_fpadd_parts+0x11a>
     362:	37 01       	movw	r6, r14
     364:	48 01       	movw	r8, r16
     366:	06 2e       	mov	r0, r22
     368:	04 c0       	rjmp	.+8      	; 0x372 <_fpadd_parts+0xd0>
     36a:	96 94       	lsr	r9
     36c:	87 94       	ror	r8
     36e:	77 94       	ror	r7
     370:	67 94       	ror	r6
     372:	0a 94       	dec	r0
     374:	d2 f7       	brpl	.-12     	; 0x36a <_fpadd_parts+0xc8>
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	04 c0       	rjmp	.+8      	; 0x388 <_fpadd_parts+0xe6>
     380:	22 0f       	add	r18, r18
     382:	33 1f       	adc	r19, r19
     384:	44 1f       	adc	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	6a 95       	dec	r22
     38a:	d2 f7       	brpl	.-12     	; 0x380 <_fpadd_parts+0xde>
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	30 40       	sbci	r19, 0x00	; 0
     390:	40 40       	sbci	r20, 0x00	; 0
     392:	50 40       	sbci	r21, 0x00	; 0
     394:	2e 21       	and	r18, r14
     396:	3f 21       	and	r19, r15
     398:	40 23       	and	r20, r16
     39a:	51 23       	and	r21, r17
     39c:	21 15       	cp	r18, r1
     39e:	31 05       	cpc	r19, r1
     3a0:	41 05       	cpc	r20, r1
     3a2:	51 05       	cpc	r21, r1
     3a4:	21 f0       	breq	.+8      	; 0x3ae <_fpadd_parts+0x10c>
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	79 01       	movw	r14, r18
     3b0:	8a 01       	movw	r16, r20
     3b2:	e6 28       	or	r14, r6
     3b4:	f7 28       	or	r15, r7
     3b6:	08 29       	or	r16, r8
     3b8:	19 29       	or	r17, r9
     3ba:	3c c0       	rjmp	.+120    	; 0x434 <_fpadd_parts+0x192>
     3bc:	23 2b       	or	r18, r19
     3be:	d1 f1       	breq	.+116    	; 0x434 <_fpadd_parts+0x192>
     3c0:	26 0e       	add	r2, r22
     3c2:	37 1e       	adc	r3, r23
     3c4:	35 01       	movw	r6, r10
     3c6:	46 01       	movw	r8, r12
     3c8:	06 2e       	mov	r0, r22
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0x132>
     3cc:	96 94       	lsr	r9
     3ce:	87 94       	ror	r8
     3d0:	77 94       	ror	r7
     3d2:	67 94       	ror	r6
     3d4:	0a 94       	dec	r0
     3d6:	d2 f7       	brpl	.-12     	; 0x3cc <_fpadd_parts+0x12a>
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <_fpadd_parts+0x148>
     3e2:	22 0f       	add	r18, r18
     3e4:	33 1f       	adc	r19, r19
     3e6:	44 1f       	adc	r20, r20
     3e8:	55 1f       	adc	r21, r21
     3ea:	6a 95       	dec	r22
     3ec:	d2 f7       	brpl	.-12     	; 0x3e2 <_fpadd_parts+0x140>
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	30 40       	sbci	r19, 0x00	; 0
     3f2:	40 40       	sbci	r20, 0x00	; 0
     3f4:	50 40       	sbci	r21, 0x00	; 0
     3f6:	2a 21       	and	r18, r10
     3f8:	3b 21       	and	r19, r11
     3fa:	4c 21       	and	r20, r12
     3fc:	5d 21       	and	r21, r13
     3fe:	21 15       	cp	r18, r1
     400:	31 05       	cpc	r19, r1
     402:	41 05       	cpc	r20, r1
     404:	51 05       	cpc	r21, r1
     406:	21 f0       	breq	.+8      	; 0x410 <_fpadd_parts+0x16e>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	59 01       	movw	r10, r18
     412:	6a 01       	movw	r12, r20
     414:	a6 28       	or	r10, r6
     416:	b7 28       	or	r11, r7
     418:	c8 28       	or	r12, r8
     41a:	d9 28       	or	r13, r9
     41c:	0b c0       	rjmp	.+22     	; 0x434 <_fpadd_parts+0x192>
     41e:	82 15       	cp	r24, r2
     420:	93 05       	cpc	r25, r3
     422:	2c f0       	brlt	.+10     	; 0x42e <_fpadd_parts+0x18c>
     424:	1c 01       	movw	r2, r24
     426:	aa 24       	eor	r10, r10
     428:	bb 24       	eor	r11, r11
     42a:	65 01       	movw	r12, r10
     42c:	03 c0       	rjmp	.+6      	; 0x434 <_fpadd_parts+0x192>
     42e:	ee 24       	eor	r14, r14
     430:	ff 24       	eor	r15, r15
     432:	87 01       	movw	r16, r14
     434:	11 96       	adiw	r26, 0x01	; 1
     436:	9c 91       	ld	r25, X
     438:	d2 01       	movw	r26, r4
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	8c 91       	ld	r24, X
     43e:	98 17       	cp	r25, r24
     440:	09 f4       	brne	.+2      	; 0x444 <_fpadd_parts+0x1a2>
     442:	45 c0       	rjmp	.+138    	; 0x4ce <_fpadd_parts+0x22c>
     444:	99 23       	and	r25, r25
     446:	39 f0       	breq	.+14     	; 0x456 <_fpadd_parts+0x1b4>
     448:	a8 01       	movw	r20, r16
     44a:	97 01       	movw	r18, r14
     44c:	2a 19       	sub	r18, r10
     44e:	3b 09       	sbc	r19, r11
     450:	4c 09       	sbc	r20, r12
     452:	5d 09       	sbc	r21, r13
     454:	06 c0       	rjmp	.+12     	; 0x462 <_fpadd_parts+0x1c0>
     456:	a6 01       	movw	r20, r12
     458:	95 01       	movw	r18, r10
     45a:	2e 19       	sub	r18, r14
     45c:	3f 09       	sbc	r19, r15
     45e:	40 0b       	sbc	r20, r16
     460:	51 0b       	sbc	r21, r17
     462:	57 fd       	sbrc	r21, 7
     464:	08 c0       	rjmp	.+16     	; 0x476 <_fpadd_parts+0x1d4>
     466:	11 82       	std	Z+1, r1	; 0x01
     468:	33 82       	std	Z+3, r3	; 0x03
     46a:	22 82       	std	Z+2, r2	; 0x02
     46c:	24 83       	std	Z+4, r18	; 0x04
     46e:	35 83       	std	Z+5, r19	; 0x05
     470:	46 83       	std	Z+6, r20	; 0x06
     472:	57 83       	std	Z+7, r21	; 0x07
     474:	1d c0       	rjmp	.+58     	; 0x4b0 <_fpadd_parts+0x20e>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	81 83       	std	Z+1, r24	; 0x01
     47a:	33 82       	std	Z+3, r3	; 0x03
     47c:	22 82       	std	Z+2, r2	; 0x02
     47e:	88 27       	eor	r24, r24
     480:	99 27       	eor	r25, r25
     482:	dc 01       	movw	r26, r24
     484:	82 1b       	sub	r24, r18
     486:	93 0b       	sbc	r25, r19
     488:	a4 0b       	sbc	r26, r20
     48a:	b5 0b       	sbc	r27, r21
     48c:	84 83       	std	Z+4, r24	; 0x04
     48e:	95 83       	std	Z+5, r25	; 0x05
     490:	a6 83       	std	Z+6, r26	; 0x06
     492:	b7 83       	std	Z+7, r27	; 0x07
     494:	0d c0       	rjmp	.+26     	; 0x4b0 <_fpadd_parts+0x20e>
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	44 1f       	adc	r20, r20
     49c:	55 1f       	adc	r21, r21
     49e:	24 83       	std	Z+4, r18	; 0x04
     4a0:	35 83       	std	Z+5, r19	; 0x05
     4a2:	46 83       	std	Z+6, r20	; 0x06
     4a4:	57 83       	std	Z+7, r21	; 0x07
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	93 81       	ldd	r25, Z+3	; 0x03
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	93 83       	std	Z+3, r25	; 0x03
     4ae:	82 83       	std	Z+2, r24	; 0x02
     4b0:	24 81       	ldd	r18, Z+4	; 0x04
     4b2:	35 81       	ldd	r19, Z+5	; 0x05
     4b4:	46 81       	ldd	r20, Z+6	; 0x06
     4b6:	57 81       	ldd	r21, Z+7	; 0x07
     4b8:	da 01       	movw	r26, r20
     4ba:	c9 01       	movw	r24, r18
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	a1 09       	sbc	r26, r1
     4c0:	b1 09       	sbc	r27, r1
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	9f 4f       	sbci	r25, 0xFF	; 255
     4c6:	af 4f       	sbci	r26, 0xFF	; 255
     4c8:	bf 43       	sbci	r27, 0x3F	; 63
     4ca:	28 f3       	brcs	.-54     	; 0x496 <_fpadd_parts+0x1f4>
     4cc:	0b c0       	rjmp	.+22     	; 0x4e4 <_fpadd_parts+0x242>
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	33 82       	std	Z+3, r3	; 0x03
     4d2:	22 82       	std	Z+2, r2	; 0x02
     4d4:	ea 0c       	add	r14, r10
     4d6:	fb 1c       	adc	r15, r11
     4d8:	0c 1d       	adc	r16, r12
     4da:	1d 1d       	adc	r17, r13
     4dc:	e4 82       	std	Z+4, r14	; 0x04
     4de:	f5 82       	std	Z+5, r15	; 0x05
     4e0:	06 83       	std	Z+6, r16	; 0x06
     4e2:	17 83       	std	Z+7, r17	; 0x07
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	80 83       	st	Z, r24
     4e8:	24 81       	ldd	r18, Z+4	; 0x04
     4ea:	35 81       	ldd	r19, Z+5	; 0x05
     4ec:	46 81       	ldd	r20, Z+6	; 0x06
     4ee:	57 81       	ldd	r21, Z+7	; 0x07
     4f0:	57 ff       	sbrs	r21, 7
     4f2:	1a c0       	rjmp	.+52     	; 0x528 <_fpadd_parts+0x286>
     4f4:	c9 01       	movw	r24, r18
     4f6:	aa 27       	eor	r26, r26
     4f8:	97 fd       	sbrc	r25, 7
     4fa:	a0 95       	com	r26
     4fc:	ba 2f       	mov	r27, r26
     4fe:	81 70       	andi	r24, 0x01	; 1
     500:	90 70       	andi	r25, 0x00	; 0
     502:	a0 70       	andi	r26, 0x00	; 0
     504:	b0 70       	andi	r27, 0x00	; 0
     506:	56 95       	lsr	r21
     508:	47 95       	ror	r20
     50a:	37 95       	ror	r19
     50c:	27 95       	ror	r18
     50e:	82 2b       	or	r24, r18
     510:	93 2b       	or	r25, r19
     512:	a4 2b       	or	r26, r20
     514:	b5 2b       	or	r27, r21
     516:	84 83       	std	Z+4, r24	; 0x04
     518:	95 83       	std	Z+5, r25	; 0x05
     51a:	a6 83       	std	Z+6, r26	; 0x06
     51c:	b7 83       	std	Z+7, r27	; 0x07
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	93 83       	std	Z+3, r25	; 0x03
     526:	82 83       	std	Z+2, r24	; 0x02
     528:	df 01       	movw	r26, r30
     52a:	01 c0       	rjmp	.+2      	; 0x52e <_fpadd_parts+0x28c>
     52c:	d2 01       	movw	r26, r4
     52e:	cd 01       	movw	r24, r26
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	e2 e1       	ldi	r30, 0x12	; 18
     536:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

0000053a <__subsf3>:
     53a:	a0 e2       	ldi	r26, 0x20	; 32
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	e3 ea       	ldi	r30, 0xA3	; 163
     540:	f2 e0       	ldi	r31, 0x02	; 2
     542:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     546:	69 83       	std	Y+1, r22	; 0x01
     548:	7a 83       	std	Y+2, r23	; 0x02
     54a:	8b 83       	std	Y+3, r24	; 0x03
     54c:	9c 83       	std	Y+4, r25	; 0x04
     54e:	2d 83       	std	Y+5, r18	; 0x05
     550:	3e 83       	std	Y+6, r19	; 0x06
     552:	4f 83       	std	Y+7, r20	; 0x07
     554:	58 87       	std	Y+8, r21	; 0x08
     556:	e9 e0       	ldi	r30, 0x09	; 9
     558:	ee 2e       	mov	r14, r30
     55a:	f1 2c       	mov	r15, r1
     55c:	ec 0e       	add	r14, r28
     55e:	fd 1e       	adc	r15, r29
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	b7 01       	movw	r22, r14
     566:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     56a:	8e 01       	movw	r16, r28
     56c:	0f 5e       	subi	r16, 0xEF	; 239
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	ce 01       	movw	r24, r28
     572:	05 96       	adiw	r24, 0x05	; 5
     574:	b8 01       	movw	r22, r16
     576:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     57a:	8a 89       	ldd	r24, Y+18	; 0x12
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	89 27       	eor	r24, r25
     580:	8a 8b       	std	Y+18, r24	; 0x12
     582:	c7 01       	movw	r24, r14
     584:	b8 01       	movw	r22, r16
     586:	ae 01       	movw	r20, r28
     588:	47 5e       	subi	r20, 0xE7	; 231
     58a:	5f 4f       	sbci	r21, 0xFF	; 255
     58c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_fpadd_parts>
     590:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     594:	a0 96       	adiw	r28, 0x20	; 32
     596:	e6 e0       	ldi	r30, 0x06	; 6
     598:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

0000059c <__addsf3>:
     59c:	a0 e2       	ldi	r26, 0x20	; 32
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	e4 ed       	ldi	r30, 0xD4	; 212
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     5a8:	69 83       	std	Y+1, r22	; 0x01
     5aa:	7a 83       	std	Y+2, r23	; 0x02
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	9c 83       	std	Y+4, r25	; 0x04
     5b0:	2d 83       	std	Y+5, r18	; 0x05
     5b2:	3e 83       	std	Y+6, r19	; 0x06
     5b4:	4f 83       	std	Y+7, r20	; 0x07
     5b6:	58 87       	std	Y+8, r21	; 0x08
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	ef 2e       	mov	r14, r31
     5bc:	f1 2c       	mov	r15, r1
     5be:	ec 0e       	add	r14, r28
     5c0:	fd 1e       	adc	r15, r29
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	b7 01       	movw	r22, r14
     5c8:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     5cc:	8e 01       	movw	r16, r28
     5ce:	0f 5e       	subi	r16, 0xEF	; 239
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	ce 01       	movw	r24, r28
     5d4:	05 96       	adiw	r24, 0x05	; 5
     5d6:	b8 01       	movw	r22, r16
     5d8:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     5dc:	c7 01       	movw	r24, r14
     5de:	b8 01       	movw	r22, r16
     5e0:	ae 01       	movw	r20, r28
     5e2:	47 5e       	subi	r20, 0xE7	; 231
     5e4:	5f 4f       	sbci	r21, 0xFF	; 255
     5e6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_fpadd_parts>
     5ea:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     5ee:	a0 96       	adiw	r28, 0x20	; 32
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000005f6 <__mulsf3>:
     5f6:	a0 e2       	ldi	r26, 0x20	; 32
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	2d 83       	std	Y+5, r18	; 0x05
     60c:	3e 83       	std	Y+6, r19	; 0x06
     60e:	4f 83       	std	Y+7, r20	; 0x07
     610:	58 87       	std	Y+8, r21	; 0x08
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	be 01       	movw	r22, r28
     618:	67 5f       	subi	r22, 0xF7	; 247
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     620:	ce 01       	movw	r24, r28
     622:	05 96       	adiw	r24, 0x05	; 5
     624:	be 01       	movw	r22, r28
     626:	6f 5e       	subi	r22, 0xEF	; 239
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     62e:	99 85       	ldd	r25, Y+9	; 0x09
     630:	92 30       	cpi	r25, 0x02	; 2
     632:	88 f0       	brcs	.+34     	; 0x656 <__mulsf3+0x60>
     634:	89 89       	ldd	r24, Y+17	; 0x11
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	c8 f0       	brcs	.+50     	; 0x66c <__mulsf3+0x76>
     63a:	94 30       	cpi	r25, 0x04	; 4
     63c:	19 f4       	brne	.+6      	; 0x644 <__mulsf3+0x4e>
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	51 f4       	brne	.+20     	; 0x656 <__mulsf3+0x60>
     642:	04 c0       	rjmp	.+8      	; 0x64c <__mulsf3+0x56>
     644:	84 30       	cpi	r24, 0x04	; 4
     646:	29 f4       	brne	.+10     	; 0x652 <__mulsf3+0x5c>
     648:	92 30       	cpi	r25, 0x02	; 2
     64a:	81 f4       	brne	.+32     	; 0x66c <__mulsf3+0x76>
     64c:	80 ec       	ldi	r24, 0xC0	; 192
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	c6 c0       	rjmp	.+396    	; 0x7de <__mulsf3+0x1e8>
     652:	92 30       	cpi	r25, 0x02	; 2
     654:	49 f4       	brne	.+18     	; 0x668 <__mulsf3+0x72>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	9a 85       	ldd	r25, Y+10	; 0x0a
     65a:	8a 89       	ldd	r24, Y+18	; 0x12
     65c:	98 13       	cpse	r25, r24
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	2a 87       	std	Y+10, r18	; 0x0a
     662:	ce 01       	movw	r24, r28
     664:	09 96       	adiw	r24, 0x09	; 9
     666:	bb c0       	rjmp	.+374    	; 0x7de <__mulsf3+0x1e8>
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	49 f4       	brne	.+18     	; 0x67e <__mulsf3+0x88>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	9a 85       	ldd	r25, Y+10	; 0x0a
     670:	8a 89       	ldd	r24, Y+18	; 0x12
     672:	98 13       	cpse	r25, r24
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	2a 8b       	std	Y+18, r18	; 0x12
     678:	ce 01       	movw	r24, r28
     67a:	41 96       	adiw	r24, 0x11	; 17
     67c:	b0 c0       	rjmp	.+352    	; 0x7de <__mulsf3+0x1e8>
     67e:	2d 84       	ldd	r2, Y+13	; 0x0d
     680:	3e 84       	ldd	r3, Y+14	; 0x0e
     682:	4f 84       	ldd	r4, Y+15	; 0x0f
     684:	58 88       	ldd	r5, Y+16	; 0x10
     686:	6d 88       	ldd	r6, Y+21	; 0x15
     688:	7e 88       	ldd	r7, Y+22	; 0x16
     68a:	8f 88       	ldd	r8, Y+23	; 0x17
     68c:	98 8c       	ldd	r9, Y+24	; 0x18
     68e:	ee 24       	eor	r14, r14
     690:	ff 24       	eor	r15, r15
     692:	87 01       	movw	r16, r14
     694:	aa 24       	eor	r10, r10
     696:	bb 24       	eor	r11, r11
     698:	65 01       	movw	r12, r10
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	e0 e0       	ldi	r30, 0x00	; 0
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	c1 01       	movw	r24, r2
     6a8:	81 70       	andi	r24, 0x01	; 1
     6aa:	90 70       	andi	r25, 0x00	; 0
     6ac:	89 2b       	or	r24, r25
     6ae:	e9 f0       	breq	.+58     	; 0x6ea <__mulsf3+0xf4>
     6b0:	e6 0c       	add	r14, r6
     6b2:	f7 1c       	adc	r15, r7
     6b4:	08 1d       	adc	r16, r8
     6b6:	19 1d       	adc	r17, r9
     6b8:	9a 01       	movw	r18, r20
     6ba:	ab 01       	movw	r20, r22
     6bc:	2a 0d       	add	r18, r10
     6be:	3b 1d       	adc	r19, r11
     6c0:	4c 1d       	adc	r20, r12
     6c2:	5d 1d       	adc	r21, r13
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	a0 e0       	ldi	r26, 0x00	; 0
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	e6 14       	cp	r14, r6
     6ce:	f7 04       	cpc	r15, r7
     6d0:	08 05       	cpc	r16, r8
     6d2:	19 05       	cpc	r17, r9
     6d4:	20 f4       	brcc	.+8      	; 0x6de <__mulsf3+0xe8>
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	ba 01       	movw	r22, r20
     6e0:	a9 01       	movw	r20, r18
     6e2:	48 0f       	add	r20, r24
     6e4:	59 1f       	adc	r21, r25
     6e6:	6a 1f       	adc	r22, r26
     6e8:	7b 1f       	adc	r23, r27
     6ea:	aa 0c       	add	r10, r10
     6ec:	bb 1c       	adc	r11, r11
     6ee:	cc 1c       	adc	r12, r12
     6f0:	dd 1c       	adc	r13, r13
     6f2:	97 fe       	sbrs	r9, 7
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <__mulsf3+0x110>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	a0 e0       	ldi	r26, 0x00	; 0
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	a8 2a       	or	r10, r24
     700:	b9 2a       	or	r11, r25
     702:	ca 2a       	or	r12, r26
     704:	db 2a       	or	r13, r27
     706:	31 96       	adiw	r30, 0x01	; 1
     708:	e0 32       	cpi	r30, 0x20	; 32
     70a:	f1 05       	cpc	r31, r1
     70c:	49 f0       	breq	.+18     	; 0x720 <__mulsf3+0x12a>
     70e:	66 0c       	add	r6, r6
     710:	77 1c       	adc	r7, r7
     712:	88 1c       	adc	r8, r8
     714:	99 1c       	adc	r9, r9
     716:	56 94       	lsr	r5
     718:	47 94       	ror	r4
     71a:	37 94       	ror	r3
     71c:	27 94       	ror	r2
     71e:	c3 cf       	rjmp	.-122    	; 0x6a6 <__mulsf3+0xb0>
     720:	fa 85       	ldd	r31, Y+10	; 0x0a
     722:	ea 89       	ldd	r30, Y+18	; 0x12
     724:	2b 89       	ldd	r18, Y+19	; 0x13
     726:	3c 89       	ldd	r19, Y+20	; 0x14
     728:	8b 85       	ldd	r24, Y+11	; 0x0b
     72a:	9c 85       	ldd	r25, Y+12	; 0x0c
     72c:	28 0f       	add	r18, r24
     72e:	39 1f       	adc	r19, r25
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	17 c0       	rjmp	.+46     	; 0x764 <__mulsf3+0x16e>
     736:	ca 01       	movw	r24, r20
     738:	81 70       	andi	r24, 0x01	; 1
     73a:	90 70       	andi	r25, 0x00	; 0
     73c:	89 2b       	or	r24, r25
     73e:	61 f0       	breq	.+24     	; 0x758 <__mulsf3+0x162>
     740:	16 95       	lsr	r17
     742:	07 95       	ror	r16
     744:	f7 94       	ror	r15
     746:	e7 94       	ror	r14
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e8       	ldi	r27, 0x80	; 128
     750:	e8 2a       	or	r14, r24
     752:	f9 2a       	or	r15, r25
     754:	0a 2b       	or	r16, r26
     756:	1b 2b       	or	r17, r27
     758:	76 95       	lsr	r23
     75a:	67 95       	ror	r22
     75c:	57 95       	ror	r21
     75e:	47 95       	ror	r20
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	77 fd       	sbrc	r23, 7
     766:	e7 cf       	rjmp	.-50     	; 0x736 <__mulsf3+0x140>
     768:	0c c0       	rjmp	.+24     	; 0x782 <__mulsf3+0x18c>
     76a:	44 0f       	add	r20, r20
     76c:	55 1f       	adc	r21, r21
     76e:	66 1f       	adc	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	17 fd       	sbrc	r17, 7
     774:	41 60       	ori	r20, 0x01	; 1
     776:	ee 0c       	add	r14, r14
     778:	ff 1c       	adc	r15, r15
     77a:	00 1f       	adc	r16, r16
     77c:	11 1f       	adc	r17, r17
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	30 40       	sbci	r19, 0x00	; 0
     782:	40 30       	cpi	r20, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	59 07       	cpc	r21, r25
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	69 07       	cpc	r22, r25
     78c:	90 e4       	ldi	r25, 0x40	; 64
     78e:	79 07       	cpc	r23, r25
     790:	60 f3       	brcs	.-40     	; 0x76a <__mulsf3+0x174>
     792:	2b 8f       	std	Y+27, r18	; 0x1b
     794:	3c 8f       	std	Y+28, r19	; 0x1c
     796:	db 01       	movw	r26, r22
     798:	ca 01       	movw	r24, r20
     79a:	8f 77       	andi	r24, 0x7F	; 127
     79c:	90 70       	andi	r25, 0x00	; 0
     79e:	a0 70       	andi	r26, 0x00	; 0
     7a0:	b0 70       	andi	r27, 0x00	; 0
     7a2:	80 34       	cpi	r24, 0x40	; 64
     7a4:	91 05       	cpc	r25, r1
     7a6:	a1 05       	cpc	r26, r1
     7a8:	b1 05       	cpc	r27, r1
     7aa:	61 f4       	brne	.+24     	; 0x7c4 <__mulsf3+0x1ce>
     7ac:	47 fd       	sbrc	r20, 7
     7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <__mulsf3+0x1ce>
     7b0:	e1 14       	cp	r14, r1
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	29 f0       	breq	.+10     	; 0x7c4 <__mulsf3+0x1ce>
     7ba:	40 5c       	subi	r20, 0xC0	; 192
     7bc:	5f 4f       	sbci	r21, 0xFF	; 255
     7be:	6f 4f       	sbci	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	40 78       	andi	r20, 0x80	; 128
     7c4:	1a 8e       	std	Y+26, r1	; 0x1a
     7c6:	fe 17       	cp	r31, r30
     7c8:	11 f0       	breq	.+4      	; 0x7ce <__mulsf3+0x1d8>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	8a 8f       	std	Y+26, r24	; 0x1a
     7ce:	4d 8f       	std	Y+29, r20	; 0x1d
     7d0:	5e 8f       	std	Y+30, r21	; 0x1e
     7d2:	6f 8f       	std	Y+31, r22	; 0x1f
     7d4:	78 a3       	std	Y+32, r23	; 0x20
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	89 8f       	std	Y+25, r24	; 0x19
     7da:	ce 01       	movw	r24, r28
     7dc:	49 96       	adiw	r24, 0x19	; 25
     7de:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     7e2:	a0 96       	adiw	r28, 0x20	; 32
     7e4:	e2 e1       	ldi	r30, 0x12	; 18
     7e6:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

000007ea <__divsf3>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x10>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	b9 e0       	ldi	r27, 0x09	; 9
     808:	eb 2e       	mov	r14, r27
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     82a:	29 85       	ldd	r18, Y+9	; 0x09
     82c:	22 30       	cpi	r18, 0x02	; 2
     82e:	08 f4       	brcc	.+2      	; 0x832 <__divsf3+0x48>
     830:	7e c0       	rjmp	.+252    	; 0x92e <__stack+0xcf>
     832:	39 89       	ldd	r19, Y+17	; 0x11
     834:	32 30       	cpi	r19, 0x02	; 2
     836:	10 f4       	brcc	.+4      	; 0x83c <__divsf3+0x52>
     838:	b8 01       	movw	r22, r16
     83a:	7c c0       	rjmp	.+248    	; 0x934 <__stack+0xd5>
     83c:	8a 85       	ldd	r24, Y+10	; 0x0a
     83e:	9a 89       	ldd	r25, Y+18	; 0x12
     840:	89 27       	eor	r24, r25
     842:	8a 87       	std	Y+10, r24	; 0x0a
     844:	24 30       	cpi	r18, 0x04	; 4
     846:	11 f0       	breq	.+4      	; 0x84c <__divsf3+0x62>
     848:	22 30       	cpi	r18, 0x02	; 2
     84a:	31 f4       	brne	.+12     	; 0x858 <__divsf3+0x6e>
     84c:	23 17       	cp	r18, r19
     84e:	09 f0       	breq	.+2      	; 0x852 <__divsf3+0x68>
     850:	6e c0       	rjmp	.+220    	; 0x92e <__stack+0xcf>
     852:	60 ec       	ldi	r22, 0xC0	; 192
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	6e c0       	rjmp	.+220    	; 0x934 <__stack+0xd5>
     858:	34 30       	cpi	r19, 0x04	; 4
     85a:	39 f4       	brne	.+14     	; 0x86a <__stack+0xb>
     85c:	1d 86       	std	Y+13, r1	; 0x0d
     85e:	1e 86       	std	Y+14, r1	; 0x0e
     860:	1f 86       	std	Y+15, r1	; 0x0f
     862:	18 8a       	std	Y+16, r1	; 0x10
     864:	1c 86       	std	Y+12, r1	; 0x0c
     866:	1b 86       	std	Y+11, r1	; 0x0b
     868:	04 c0       	rjmp	.+8      	; 0x872 <__stack+0x13>
     86a:	32 30       	cpi	r19, 0x02	; 2
     86c:	21 f4       	brne	.+8      	; 0x876 <__stack+0x17>
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	89 87       	std	Y+9, r24	; 0x09
     872:	b7 01       	movw	r22, r14
     874:	5f c0       	rjmp	.+190    	; 0x934 <__stack+0xd5>
     876:	2b 85       	ldd	r18, Y+11	; 0x0b
     878:	3c 85       	ldd	r19, Y+12	; 0x0c
     87a:	8b 89       	ldd	r24, Y+19	; 0x13
     87c:	9c 89       	ldd	r25, Y+20	; 0x14
     87e:	28 1b       	sub	r18, r24
     880:	39 0b       	sbc	r19, r25
     882:	3c 87       	std	Y+12, r19	; 0x0c
     884:	2b 87       	std	Y+11, r18	; 0x0b
     886:	ed 84       	ldd	r14, Y+13	; 0x0d
     888:	fe 84       	ldd	r15, Y+14	; 0x0e
     88a:	0f 85       	ldd	r16, Y+15	; 0x0f
     88c:	18 89       	ldd	r17, Y+16	; 0x10
     88e:	ad 88       	ldd	r10, Y+21	; 0x15
     890:	be 88       	ldd	r11, Y+22	; 0x16
     892:	cf 88       	ldd	r12, Y+23	; 0x17
     894:	d8 8c       	ldd	r13, Y+24	; 0x18
     896:	ea 14       	cp	r14, r10
     898:	fb 04       	cpc	r15, r11
     89a:	0c 05       	cpc	r16, r12
     89c:	1d 05       	cpc	r17, r13
     89e:	40 f4       	brcc	.+16     	; 0x8b0 <__stack+0x51>
     8a0:	ee 0c       	add	r14, r14
     8a2:	ff 1c       	adc	r15, r15
     8a4:	00 1f       	adc	r16, r16
     8a6:	11 1f       	adc	r17, r17
     8a8:	21 50       	subi	r18, 0x01	; 1
     8aa:	30 40       	sbci	r19, 0x00	; 0
     8ac:	3c 87       	std	Y+12, r19	; 0x0c
     8ae:	2b 87       	std	Y+11, r18	; 0x0b
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e4       	ldi	r27, 0x40	; 64
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	ea 14       	cp	r14, r10
     8c6:	fb 04       	cpc	r15, r11
     8c8:	0c 05       	cpc	r16, r12
     8ca:	1d 05       	cpc	r17, r13
     8cc:	40 f0       	brcs	.+16     	; 0x8de <__stack+0x7f>
     8ce:	28 2b       	or	r18, r24
     8d0:	39 2b       	or	r19, r25
     8d2:	4a 2b       	or	r20, r26
     8d4:	5b 2b       	or	r21, r27
     8d6:	ea 18       	sub	r14, r10
     8d8:	fb 08       	sbc	r15, r11
     8da:	0c 09       	sbc	r16, r12
     8dc:	1d 09       	sbc	r17, r13
     8de:	b6 95       	lsr	r27
     8e0:	a7 95       	ror	r26
     8e2:	97 95       	ror	r25
     8e4:	87 95       	ror	r24
     8e6:	ee 0c       	add	r14, r14
     8e8:	ff 1c       	adc	r15, r15
     8ea:	00 1f       	adc	r16, r16
     8ec:	11 1f       	adc	r17, r17
     8ee:	6f 5f       	subi	r22, 0xFF	; 255
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	6f 31       	cpi	r22, 0x1F	; 31
     8f4:	71 05       	cpc	r23, r1
     8f6:	31 f7       	brne	.-52     	; 0x8c4 <__stack+0x65>
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	61 f4       	brne	.+24     	; 0x926 <__stack+0xc7>
     90e:	27 fd       	sbrc	r18, 7
     910:	0a c0       	rjmp	.+20     	; 0x926 <__stack+0xc7>
     912:	e1 14       	cp	r14, r1
     914:	f1 04       	cpc	r15, r1
     916:	01 05       	cpc	r16, r1
     918:	11 05       	cpc	r17, r1
     91a:	29 f0       	breq	.+10     	; 0x926 <__stack+0xc7>
     91c:	20 5c       	subi	r18, 0xC0	; 192
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	20 78       	andi	r18, 0x80	; 128
     926:	2d 87       	std	Y+13, r18	; 0x0d
     928:	3e 87       	std	Y+14, r19	; 0x0e
     92a:	4f 87       	std	Y+15, r20	; 0x0f
     92c:	58 8b       	std	Y+16, r21	; 0x10
     92e:	be 01       	movw	r22, r28
     930:	67 5f       	subi	r22, 0xF7	; 247
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	cb 01       	movw	r24, r22
     936:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     93a:	68 96       	adiw	r28, 0x18	; 24
     93c:	ea e0       	ldi	r30, 0x0A	; 10
     93e:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x10>

00000942 <__gtsf2>:
     942:	a8 e1       	ldi	r26, 0x18	; 24
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     94e:	69 83       	std	Y+1, r22	; 0x01
     950:	7a 83       	std	Y+2, r23	; 0x02
     952:	8b 83       	std	Y+3, r24	; 0x03
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	2d 83       	std	Y+5, r18	; 0x05
     958:	3e 83       	std	Y+6, r19	; 0x06
     95a:	4f 83       	std	Y+7, r20	; 0x07
     95c:	58 87       	std	Y+8, r21	; 0x08
     95e:	89 e0       	ldi	r24, 0x09	; 9
     960:	e8 2e       	mov	r14, r24
     962:	f1 2c       	mov	r15, r1
     964:	ec 0e       	add	r14, r28
     966:	fd 1e       	adc	r15, r29
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	b7 01       	movw	r22, r14
     96e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     972:	8e 01       	movw	r16, r28
     974:	0f 5e       	subi	r16, 0xEF	; 239
     976:	1f 4f       	sbci	r17, 0xFF	; 255
     978:	ce 01       	movw	r24, r28
     97a:	05 96       	adiw	r24, 0x05	; 5
     97c:	b8 01       	movw	r22, r16
     97e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	40 f0       	brcs	.+16     	; 0x998 <__gtsf2+0x56>
     988:	89 89       	ldd	r24, Y+17	; 0x11
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	28 f0       	brcs	.+10     	; 0x998 <__gtsf2+0x56>
     98e:	c7 01       	movw	r24, r14
     990:	b8 01       	movw	r22, r16
     992:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     996:	01 c0       	rjmp	.+2      	; 0x99a <__gtsf2+0x58>
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	68 96       	adiw	r28, 0x18	; 24
     99c:	e6 e0       	ldi	r30, 0x06	; 6
     99e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000009a2 <__gesf2>:
     9a2:	a8 e1       	ldi	r26, 0x18	; 24
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     9ae:	69 83       	std	Y+1, r22	; 0x01
     9b0:	7a 83       	std	Y+2, r23	; 0x02
     9b2:	8b 83       	std	Y+3, r24	; 0x03
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	2d 83       	std	Y+5, r18	; 0x05
     9b8:	3e 83       	std	Y+6, r19	; 0x06
     9ba:	4f 83       	std	Y+7, r20	; 0x07
     9bc:	58 87       	std	Y+8, r21	; 0x08
     9be:	89 e0       	ldi	r24, 0x09	; 9
     9c0:	e8 2e       	mov	r14, r24
     9c2:	f1 2c       	mov	r15, r1
     9c4:	ec 0e       	add	r14, r28
     9c6:	fd 1e       	adc	r15, r29
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	b7 01       	movw	r22, r14
     9ce:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     9d2:	8e 01       	movw	r16, r28
     9d4:	0f 5e       	subi	r16, 0xEF	; 239
     9d6:	1f 4f       	sbci	r17, 0xFF	; 255
     9d8:	ce 01       	movw	r24, r28
     9da:	05 96       	adiw	r24, 0x05	; 5
     9dc:	b8 01       	movw	r22, r16
     9de:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     9e2:	89 85       	ldd	r24, Y+9	; 0x09
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	40 f0       	brcs	.+16     	; 0x9f8 <__gesf2+0x56>
     9e8:	89 89       	ldd	r24, Y+17	; 0x11
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	28 f0       	brcs	.+10     	; 0x9f8 <__gesf2+0x56>
     9ee:	c7 01       	movw	r24, r14
     9f0:	b8 01       	movw	r22, r16
     9f2:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__gesf2+0x58>
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	68 96       	adiw	r28, 0x18	; 24
     9fc:	e6 e0       	ldi	r30, 0x06	; 6
     9fe:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

00000a02 <__ltsf2>:
     a02:	a8 e1       	ldi	r26, 0x18	; 24
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e7 e0       	ldi	r30, 0x07	; 7
     a08:	f5 e0       	ldi	r31, 0x05	; 5
     a0a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     a0e:	69 83       	std	Y+1, r22	; 0x01
     a10:	7a 83       	std	Y+2, r23	; 0x02
     a12:	8b 83       	std	Y+3, r24	; 0x03
     a14:	9c 83       	std	Y+4, r25	; 0x04
     a16:	2d 83       	std	Y+5, r18	; 0x05
     a18:	3e 83       	std	Y+6, r19	; 0x06
     a1a:	4f 83       	std	Y+7, r20	; 0x07
     a1c:	58 87       	std	Y+8, r21	; 0x08
     a1e:	89 e0       	ldi	r24, 0x09	; 9
     a20:	e8 2e       	mov	r14, r24
     a22:	f1 2c       	mov	r15, r1
     a24:	ec 0e       	add	r14, r28
     a26:	fd 1e       	adc	r15, r29
     a28:	ce 01       	movw	r24, r28
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	b7 01       	movw	r22, r14
     a2e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     a32:	8e 01       	movw	r16, r28
     a34:	0f 5e       	subi	r16, 0xEF	; 239
     a36:	1f 4f       	sbci	r17, 0xFF	; 255
     a38:	ce 01       	movw	r24, r28
     a3a:	05 96       	adiw	r24, 0x05	; 5
     a3c:	b8 01       	movw	r22, r16
     a3e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     a42:	89 85       	ldd	r24, Y+9	; 0x09
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	40 f0       	brcs	.+16     	; 0xa58 <__ltsf2+0x56>
     a48:	89 89       	ldd	r24, Y+17	; 0x11
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	28 f0       	brcs	.+10     	; 0xa58 <__ltsf2+0x56>
     a4e:	c7 01       	movw	r24, r14
     a50:	b8 01       	movw	r22, r16
     a52:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <__ltsf2+0x58>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	68 96       	adiw	r28, 0x18	; 24
     a5c:	e6 e0       	ldi	r30, 0x06	; 6
     a5e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

00000a62 <__floatsisf>:
     a62:	a8 e0       	ldi	r26, 0x08	; 8
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e7 e3       	ldi	r30, 0x37	; 55
     a68:	f5 e0       	ldi	r31, 0x05	; 5
     a6a:	0c 94 42 18 	jmp	0x3084	; 0x3084 <__prologue_saves__+0x12>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	da 01       	movw	r26, r20
     a78:	c9 01       	movw	r24, r18
     a7a:	88 27       	eor	r24, r24
     a7c:	b7 fd       	sbrc	r27, 7
     a7e:	83 95       	inc	r24
     a80:	99 27       	eor	r25, r25
     a82:	aa 27       	eor	r26, r26
     a84:	bb 27       	eor	r27, r27
     a86:	b8 2e       	mov	r11, r24
     a88:	21 15       	cp	r18, r1
     a8a:	31 05       	cpc	r19, r1
     a8c:	41 05       	cpc	r20, r1
     a8e:	51 05       	cpc	r21, r1
     a90:	19 f4       	brne	.+6      	; 0xa98 <__floatsisf+0x36>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	3a c0       	rjmp	.+116    	; 0xb0c <__floatsisf+0xaa>
     a98:	88 23       	and	r24, r24
     a9a:	a9 f0       	breq	.+42     	; 0xac6 <__floatsisf+0x64>
     a9c:	20 30       	cpi	r18, 0x00	; 0
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	38 07       	cpc	r19, r24
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	48 07       	cpc	r20, r24
     aa6:	80 e8       	ldi	r24, 0x80	; 128
     aa8:	58 07       	cpc	r21, r24
     aaa:	29 f4       	brne	.+10     	; 0xab6 <__floatsisf+0x54>
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	9f ec       	ldi	r25, 0xCF	; 207
     ab4:	30 c0       	rjmp	.+96     	; 0xb16 <__floatsisf+0xb4>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	e2 1a       	sub	r14, r18
     abe:	f3 0a       	sbc	r15, r19
     ac0:	04 0b       	sbc	r16, r20
     ac2:	15 0b       	sbc	r17, r21
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <__floatsisf+0x68>
     ac6:	79 01       	movw	r14, r18
     ac8:	8a 01       	movw	r16, r20
     aca:	8e e1       	ldi	r24, 0x1E	; 30
     acc:	c8 2e       	mov	r12, r24
     ace:	d1 2c       	mov	r13, r1
     ad0:	dc 82       	std	Y+4, r13	; 0x04
     ad2:	cb 82       	std	Y+3, r12	; 0x03
     ad4:	ed 82       	std	Y+5, r14	; 0x05
     ad6:	fe 82       	std	Y+6, r15	; 0x06
     ad8:	0f 83       	std	Y+7, r16	; 0x07
     ada:	18 87       	std	Y+8, r17	; 0x08
     adc:	c8 01       	movw	r24, r16
     ade:	b7 01       	movw	r22, r14
     ae0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__clzsi2>
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	18 16       	cp	r1, r24
     ae8:	19 06       	cpc	r1, r25
     aea:	84 f4       	brge	.+32     	; 0xb0c <__floatsisf+0xaa>
     aec:	08 2e       	mov	r0, r24
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__floatsisf+0x96>
     af0:	ee 0c       	add	r14, r14
     af2:	ff 1c       	adc	r15, r15
     af4:	00 1f       	adc	r16, r16
     af6:	11 1f       	adc	r17, r17
     af8:	0a 94       	dec	r0
     afa:	d2 f7       	brpl	.-12     	; 0xaf0 <__floatsisf+0x8e>
     afc:	ed 82       	std	Y+5, r14	; 0x05
     afe:	fe 82       	std	Y+6, r15	; 0x06
     b00:	0f 83       	std	Y+7, r16	; 0x07
     b02:	18 87       	std	Y+8, r17	; 0x08
     b04:	c8 1a       	sub	r12, r24
     b06:	d9 0a       	sbc	r13, r25
     b08:	dc 82       	std	Y+4, r13	; 0x04
     b0a:	cb 82       	std	Y+3, r12	; 0x03
     b0c:	ba 82       	std	Y+2, r11	; 0x02
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     b16:	28 96       	adiw	r28, 0x08	; 8
     b18:	e9 e0       	ldi	r30, 0x09	; 9
     b1a:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__epilogue_restores__+0x12>

00000b1e <__fixsfsi>:
     b1e:	ac e0       	ldi	r26, 0x0C	; 12
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	e5 e9       	ldi	r30, 0x95	; 149
     b24:	f5 e0       	ldi	r31, 0x05	; 5
     b26:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__+0x20>
     b2a:	69 83       	std	Y+1, r22	; 0x01
     b2c:	7a 83       	std	Y+2, r23	; 0x02
     b2e:	8b 83       	std	Y+3, r24	; 0x03
     b30:	9c 83       	std	Y+4, r25	; 0x04
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	be 01       	movw	r22, r28
     b38:	6b 5f       	subi	r22, 0xFB	; 251
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     b40:	8d 81       	ldd	r24, Y+5	; 0x05
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	61 f1       	breq	.+88     	; 0xb9e <__fixsfsi+0x80>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	50 f1       	brcs	.+84     	; 0xb9e <__fixsfsi+0x80>
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	21 f4       	brne	.+8      	; 0xb56 <__fixsfsi+0x38>
     b4e:	8e 81       	ldd	r24, Y+6	; 0x06
     b50:	88 23       	and	r24, r24
     b52:	51 f1       	breq	.+84     	; 0xba8 <__fixsfsi+0x8a>
     b54:	2e c0       	rjmp	.+92     	; 0xbb2 <__fixsfsi+0x94>
     b56:	2f 81       	ldd	r18, Y+7	; 0x07
     b58:	38 85       	ldd	r19, Y+8	; 0x08
     b5a:	37 fd       	sbrc	r19, 7
     b5c:	20 c0       	rjmp	.+64     	; 0xb9e <__fixsfsi+0x80>
     b5e:	6e 81       	ldd	r22, Y+6	; 0x06
     b60:	2f 31       	cpi	r18, 0x1F	; 31
     b62:	31 05       	cpc	r19, r1
     b64:	1c f0       	brlt	.+6      	; 0xb6c <__fixsfsi+0x4e>
     b66:	66 23       	and	r22, r22
     b68:	f9 f0       	breq	.+62     	; 0xba8 <__fixsfsi+0x8a>
     b6a:	23 c0       	rjmp	.+70     	; 0xbb2 <__fixsfsi+0x94>
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	82 1b       	sub	r24, r18
     b72:	93 0b       	sbc	r25, r19
     b74:	29 85       	ldd	r18, Y+9	; 0x09
     b76:	3a 85       	ldd	r19, Y+10	; 0x0a
     b78:	4b 85       	ldd	r20, Y+11	; 0x0b
     b7a:	5c 85       	ldd	r21, Y+12	; 0x0c
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__fixsfsi+0x68>
     b7e:	56 95       	lsr	r21
     b80:	47 95       	ror	r20
     b82:	37 95       	ror	r19
     b84:	27 95       	ror	r18
     b86:	8a 95       	dec	r24
     b88:	d2 f7       	brpl	.-12     	; 0xb7e <__fixsfsi+0x60>
     b8a:	66 23       	and	r22, r22
     b8c:	b1 f0       	breq	.+44     	; 0xbba <__fixsfsi+0x9c>
     b8e:	50 95       	com	r21
     b90:	40 95       	com	r20
     b92:	30 95       	com	r19
     b94:	21 95       	neg	r18
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	4f 4f       	sbci	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	0e c0       	rjmp	.+28     	; 0xbba <__fixsfsi+0x9c>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	09 c0       	rjmp	.+18     	; 0xbba <__fixsfsi+0x9c>
     ba8:	2f ef       	ldi	r18, 0xFF	; 255
     baa:	3f ef       	ldi	r19, 0xFF	; 255
     bac:	4f ef       	ldi	r20, 0xFF	; 255
     bae:	5f e7       	ldi	r21, 0x7F	; 127
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <__fixsfsi+0x9c>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e8       	ldi	r21, 0x80	; 128
     bba:	b9 01       	movw	r22, r18
     bbc:	ca 01       	movw	r24, r20
     bbe:	2c 96       	adiw	r28, 0x0c	; 12
     bc0:	e2 e0       	ldi	r30, 0x02	; 2
     bc2:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__+0x20>

00000bc6 <__floatunsisf>:
     bc6:	a8 e0       	ldi	r26, 0x08	; 8
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e9 ee       	ldi	r30, 0xE9	; 233
     bcc:	f5 e0       	ldi	r31, 0x05	; 5
     bce:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x10>
     bd2:	7b 01       	movw	r14, r22
     bd4:	8c 01       	movw	r16, r24
     bd6:	61 15       	cp	r22, r1
     bd8:	71 05       	cpc	r23, r1
     bda:	81 05       	cpc	r24, r1
     bdc:	91 05       	cpc	r25, r1
     bde:	19 f4       	brne	.+6      	; 0xbe6 <__floatunsisf+0x20>
     be0:	82 e0       	ldi	r24, 0x02	; 2
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	60 c0       	rjmp	.+192    	; 0xca6 <__floatunsisf+0xe0>
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	8e e1       	ldi	r24, 0x1E	; 30
     bec:	c8 2e       	mov	r12, r24
     bee:	d1 2c       	mov	r13, r1
     bf0:	dc 82       	std	Y+4, r13	; 0x04
     bf2:	cb 82       	std	Y+3, r12	; 0x03
     bf4:	ed 82       	std	Y+5, r14	; 0x05
     bf6:	fe 82       	std	Y+6, r15	; 0x06
     bf8:	0f 83       	std	Y+7, r16	; 0x07
     bfa:	18 87       	std	Y+8, r17	; 0x08
     bfc:	c8 01       	movw	r24, r16
     bfe:	b7 01       	movw	r22, r14
     c00:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__clzsi2>
     c04:	fc 01       	movw	r30, r24
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	f7 ff       	sbrs	r31, 7
     c0a:	3b c0       	rjmp	.+118    	; 0xc82 <__floatunsisf+0xbc>
     c0c:	22 27       	eor	r18, r18
     c0e:	33 27       	eor	r19, r19
     c10:	2e 1b       	sub	r18, r30
     c12:	3f 0b       	sbc	r19, r31
     c14:	57 01       	movw	r10, r14
     c16:	68 01       	movw	r12, r16
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__floatunsisf+0x5e>
     c1c:	d6 94       	lsr	r13
     c1e:	c7 94       	ror	r12
     c20:	b7 94       	ror	r11
     c22:	a7 94       	ror	r10
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__floatunsisf+0x56>
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <__floatunsisf+0x7c>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	aa 1f       	adc	r26, r26
     c40:	bb 1f       	adc	r27, r27
     c42:	2a 95       	dec	r18
     c44:	d2 f7       	brpl	.-12     	; 0xc3a <__floatunsisf+0x74>
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	a1 09       	sbc	r26, r1
     c4a:	b1 09       	sbc	r27, r1
     c4c:	8e 21       	and	r24, r14
     c4e:	9f 21       	and	r25, r15
     c50:	a0 23       	and	r26, r16
     c52:	b1 23       	and	r27, r17
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	a1 05       	cpc	r26, r1
     c58:	b1 05       	cpc	r27, r1
     c5a:	21 f0       	breq	.+8      	; 0xc64 <__floatunsisf+0x9e>
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	4a 29       	or	r20, r10
     c66:	5b 29       	or	r21, r11
     c68:	6c 29       	or	r22, r12
     c6a:	7d 29       	or	r23, r13
     c6c:	4d 83       	std	Y+5, r20	; 0x05
     c6e:	5e 83       	std	Y+6, r21	; 0x06
     c70:	6f 83       	std	Y+7, r22	; 0x07
     c72:	78 87       	std	Y+8, r23	; 0x08
     c74:	8e e1       	ldi	r24, 0x1E	; 30
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	8e 1b       	sub	r24, r30
     c7a:	9f 0b       	sbc	r25, r31
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
     c80:	12 c0       	rjmp	.+36     	; 0xca6 <__floatunsisf+0xe0>
     c82:	30 97       	sbiw	r30, 0x00	; 0
     c84:	81 f0       	breq	.+32     	; 0xca6 <__floatunsisf+0xe0>
     c86:	0e 2e       	mov	r0, r30
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <__floatunsisf+0xcc>
     c8a:	ee 0c       	add	r14, r14
     c8c:	ff 1c       	adc	r15, r15
     c8e:	00 1f       	adc	r16, r16
     c90:	11 1f       	adc	r17, r17
     c92:	0a 94       	dec	r0
     c94:	d2 f7       	brpl	.-12     	; 0xc8a <__floatunsisf+0xc4>
     c96:	ed 82       	std	Y+5, r14	; 0x05
     c98:	fe 82       	std	Y+6, r15	; 0x06
     c9a:	0f 83       	std	Y+7, r16	; 0x07
     c9c:	18 87       	std	Y+8, r17	; 0x08
     c9e:	ce 1a       	sub	r12, r30
     ca0:	df 0a       	sbc	r13, r31
     ca2:	dc 82       	std	Y+4, r13	; 0x04
     ca4:	cb 82       	std	Y+3, r12	; 0x03
     ca6:	1a 82       	std	Y+2, r1	; 0x02
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     cb0:	28 96       	adiw	r28, 0x08	; 8
     cb2:	ea e0       	ldi	r30, 0x0A	; 10
     cb4:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x10>

00000cb8 <__lshrdi3>:
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	60 97       	sbiw	r28, 0x10	; 16
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	a8 2f       	mov	r26, r24
     cd4:	00 23       	and	r16, r16
     cd6:	09 f4       	brne	.+2      	; 0xcda <__lshrdi3+0x22>
     cd8:	61 c0       	rjmp	.+194    	; 0xd9c <__lshrdi3+0xe4>
     cda:	7e 01       	movw	r14, r28
     cdc:	08 94       	sec
     cde:	e1 1c       	adc	r14, r1
     ce0:	f1 1c       	adc	r15, r1
     ce2:	88 e0       	ldi	r24, 0x08	; 8
     ce4:	f7 01       	movw	r30, r14
     ce6:	11 92       	st	Z+, r1
     ce8:	8a 95       	dec	r24
     cea:	e9 f7       	brne	.-6      	; 0xce6 <__lshrdi3+0x2e>
     cec:	29 83       	std	Y+1, r18	; 0x01
     cee:	3a 83       	std	Y+2, r19	; 0x02
     cf0:	4b 83       	std	Y+3, r20	; 0x03
     cf2:	5c 83       	std	Y+4, r21	; 0x04
     cf4:	6d 83       	std	Y+5, r22	; 0x05
     cf6:	7e 83       	std	Y+6, r23	; 0x06
     cf8:	af 83       	std	Y+7, r26	; 0x07
     cfa:	98 87       	std	Y+8, r25	; 0x08
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	80 1b       	sub	r24, r16
     d00:	e8 2f       	mov	r30, r24
     d02:	ff 27       	eor	r31, r31
     d04:	e7 fd       	sbrc	r30, 7
     d06:	f0 95       	com	r31
     d08:	4d 81       	ldd	r20, Y+5	; 0x05
     d0a:	5e 81       	ldd	r21, Y+6	; 0x06
     d0c:	6f 81       	ldd	r22, Y+7	; 0x07
     d0e:	78 85       	ldd	r23, Y+8	; 0x08
     d10:	18 16       	cp	r1, r24
     d12:	84 f0       	brlt	.+32     	; 0xd34 <__lshrdi3+0x7c>
     d14:	1d 86       	std	Y+13, r1	; 0x0d
     d16:	1e 86       	std	Y+14, r1	; 0x0e
     d18:	1f 86       	std	Y+15, r1	; 0x0f
     d1a:	18 8a       	std	Y+16, r1	; 0x10
     d1c:	88 27       	eor	r24, r24
     d1e:	99 27       	eor	r25, r25
     d20:	8e 1b       	sub	r24, r30
     d22:	9f 0b       	sbc	r25, r31
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <__lshrdi3+0x76>
     d26:	76 95       	lsr	r23
     d28:	67 95       	ror	r22
     d2a:	57 95       	ror	r21
     d2c:	47 95       	ror	r20
     d2e:	8a 95       	dec	r24
     d30:	d2 f7       	brpl	.-12     	; 0xd26 <__lshrdi3+0x6e>
     d32:	28 c0       	rjmp	.+80     	; 0xd84 <__lshrdi3+0xcc>
     d34:	20 2f       	mov	r18, r16
     d36:	33 27       	eor	r19, r19
     d38:	27 fd       	sbrc	r18, 7
     d3a:	30 95       	com	r19
     d3c:	db 01       	movw	r26, r22
     d3e:	ca 01       	movw	r24, r20
     d40:	02 2e       	mov	r0, r18
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <__lshrdi3+0x94>
     d44:	b6 95       	lsr	r27
     d46:	a7 95       	ror	r26
     d48:	97 95       	ror	r25
     d4a:	87 95       	ror	r24
     d4c:	0a 94       	dec	r0
     d4e:	d2 f7       	brpl	.-12     	; 0xd44 <__lshrdi3+0x8c>
     d50:	8d 87       	std	Y+13, r24	; 0x0d
     d52:	9e 87       	std	Y+14, r25	; 0x0e
     d54:	af 87       	std	Y+15, r26	; 0x0f
     d56:	b8 8b       	std	Y+16, r27	; 0x10
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <__lshrdi3+0xaa>
     d5a:	44 0f       	add	r20, r20
     d5c:	55 1f       	adc	r21, r21
     d5e:	66 1f       	adc	r22, r22
     d60:	77 1f       	adc	r23, r23
     d62:	ea 95       	dec	r30
     d64:	d2 f7       	brpl	.-12     	; 0xd5a <__lshrdi3+0xa2>
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	ab 81       	ldd	r26, Y+3	; 0x03
     d6c:	bc 81       	ldd	r27, Y+4	; 0x04
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <__lshrdi3+0xc0>
     d70:	b6 95       	lsr	r27
     d72:	a7 95       	ror	r26
     d74:	97 95       	ror	r25
     d76:	87 95       	ror	r24
     d78:	2a 95       	dec	r18
     d7a:	d2 f7       	brpl	.-12     	; 0xd70 <__lshrdi3+0xb8>
     d7c:	48 2b       	or	r20, r24
     d7e:	59 2b       	or	r21, r25
     d80:	6a 2b       	or	r22, r26
     d82:	7b 2b       	or	r23, r27
     d84:	49 87       	std	Y+9, r20	; 0x09
     d86:	5a 87       	std	Y+10, r21	; 0x0a
     d88:	6b 87       	std	Y+11, r22	; 0x0b
     d8a:	7c 87       	std	Y+12, r23	; 0x0c
     d8c:	29 85       	ldd	r18, Y+9	; 0x09
     d8e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d90:	4b 85       	ldd	r20, Y+11	; 0x0b
     d92:	5c 85       	ldd	r21, Y+12	; 0x0c
     d94:	6d 85       	ldd	r22, Y+13	; 0x0d
     d96:	7e 85       	ldd	r23, Y+14	; 0x0e
     d98:	af 85       	ldd	r26, Y+15	; 0x0f
     d9a:	98 89       	ldd	r25, Y+16	; 0x10
     d9c:	8a 2f       	mov	r24, r26
     d9e:	60 96       	adiw	r28, 0x10	; 16
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	08 95       	ret

00000db6 <__clzsi2>:
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	7b 01       	movw	r14, r22
     dc0:	8c 01       	movw	r16, r24
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	e8 16       	cp	r14, r24
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	f8 06       	cpc	r15, r24
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	08 07       	cpc	r16, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	18 07       	cpc	r17, r24
     dd2:	88 f4       	brcc	.+34     	; 0xdf6 <__clzsi2+0x40>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	e8 16       	cp	r14, r24
     dd8:	f1 04       	cpc	r15, r1
     dda:	01 05       	cpc	r16, r1
     ddc:	11 05       	cpc	r17, r1
     dde:	31 f0       	breq	.+12     	; 0xdec <__clzsi2+0x36>
     de0:	28 f0       	brcs	.+10     	; 0xdec <__clzsi2+0x36>
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	17 c0       	rjmp	.+46     	; 0xe1a <__clzsi2+0x64>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__clzsi2+0x64>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	e8 16       	cp	r14, r24
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	f8 06       	cpc	r15, r24
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	08 07       	cpc	r16, r24
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	18 07       	cpc	r17, r24
     e06:	28 f0       	brcs	.+10     	; 0xe12 <__clzsi2+0x5c>
     e08:	88 e1       	ldi	r24, 0x18	; 24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <__clzsi2+0x64>
     e12:	80 e1       	ldi	r24, 0x10	; 16
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a0 e0       	ldi	r26, 0x00	; 0
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	20 e2       	ldi	r18, 0x20	; 32
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	28 1b       	sub	r18, r24
     e24:	39 0b       	sbc	r19, r25
     e26:	4a 0b       	sbc	r20, r26
     e28:	5b 0b       	sbc	r21, r27
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <__clzsi2+0x7e>
     e2c:	16 95       	lsr	r17
     e2e:	07 95       	ror	r16
     e30:	f7 94       	ror	r15
     e32:	e7 94       	ror	r14
     e34:	8a 95       	dec	r24
     e36:	d2 f7       	brpl	.-12     	; 0xe2c <__clzsi2+0x76>
     e38:	f7 01       	movw	r30, r14
     e3a:	e8 53       	subi	r30, 0x38	; 56
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	80 81       	ld	r24, Z
     e40:	28 1b       	sub	r18, r24
     e42:	31 09       	sbc	r19, r1
     e44:	41 09       	sbc	r20, r1
     e46:	51 09       	sbc	r21, r1
     e48:	c9 01       	movw	r24, r18
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	08 95       	ret

00000e54 <__pack_f>:
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	fc 01       	movw	r30, r24
     e60:	e4 80       	ldd	r14, Z+4	; 0x04
     e62:	f5 80       	ldd	r15, Z+5	; 0x05
     e64:	06 81       	ldd	r16, Z+6	; 0x06
     e66:	17 81       	ldd	r17, Z+7	; 0x07
     e68:	d1 80       	ldd	r13, Z+1	; 0x01
     e6a:	80 81       	ld	r24, Z
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	48 f4       	brcc	.+18     	; 0xe82 <__pack_f+0x2e>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 e1       	ldi	r26, 0x10	; 16
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 2a       	or	r14, r24
     e7a:	f9 2a       	or	r15, r25
     e7c:	0a 2b       	or	r16, r26
     e7e:	1b 2b       	or	r17, r27
     e80:	a5 c0       	rjmp	.+330    	; 0xfcc <__pack_f+0x178>
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	09 f4       	brne	.+2      	; 0xe88 <__pack_f+0x34>
     e86:	9f c0       	rjmp	.+318    	; 0xfc6 <__pack_f+0x172>
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	21 f4       	brne	.+8      	; 0xe94 <__pack_f+0x40>
     e8c:	ee 24       	eor	r14, r14
     e8e:	ff 24       	eor	r15, r15
     e90:	87 01       	movw	r16, r14
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <__pack_f+0x4a>
     e94:	e1 14       	cp	r14, r1
     e96:	f1 04       	cpc	r15, r1
     e98:	01 05       	cpc	r16, r1
     e9a:	11 05       	cpc	r17, r1
     e9c:	19 f4       	brne	.+6      	; 0xea4 <__pack_f+0x50>
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	96 c0       	rjmp	.+300    	; 0xfd0 <__pack_f+0x17c>
     ea4:	62 81       	ldd	r22, Z+2	; 0x02
     ea6:	73 81       	ldd	r23, Z+3	; 0x03
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	62 38       	cpi	r22, 0x82	; 130
     eac:	79 07       	cpc	r23, r25
     eae:	0c f0       	brlt	.+2      	; 0xeb2 <__pack_f+0x5e>
     eb0:	5b c0       	rjmp	.+182    	; 0xf68 <__pack_f+0x114>
     eb2:	22 e8       	ldi	r18, 0x82	; 130
     eb4:	3f ef       	ldi	r19, 0xFF	; 255
     eb6:	26 1b       	sub	r18, r22
     eb8:	37 0b       	sbc	r19, r23
     eba:	2a 31       	cpi	r18, 0x1A	; 26
     ebc:	31 05       	cpc	r19, r1
     ebe:	2c f0       	brlt	.+10     	; 0xeca <__pack_f+0x76>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	2a c0       	rjmp	.+84     	; 0xf1e <__pack_f+0xca>
     eca:	b8 01       	movw	r22, r16
     ecc:	a7 01       	movw	r20, r14
     ece:	02 2e       	mov	r0, r18
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <__pack_f+0x86>
     ed2:	76 95       	lsr	r23
     ed4:	67 95       	ror	r22
     ed6:	57 95       	ror	r21
     ed8:	47 95       	ror	r20
     eda:	0a 94       	dec	r0
     edc:	d2 f7       	brpl	.-12     	; 0xed2 <__pack_f+0x7e>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <__pack_f+0x9c>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	aa 1f       	adc	r26, r26
     eee:	bb 1f       	adc	r27, r27
     ef0:	2a 95       	dec	r18
     ef2:	d2 f7       	brpl	.-12     	; 0xee8 <__pack_f+0x94>
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	a1 09       	sbc	r26, r1
     ef8:	b1 09       	sbc	r27, r1
     efa:	8e 21       	and	r24, r14
     efc:	9f 21       	and	r25, r15
     efe:	a0 23       	and	r26, r16
     f00:	b1 23       	and	r27, r17
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	a1 05       	cpc	r26, r1
     f06:	b1 05       	cpc	r27, r1
     f08:	21 f0       	breq	.+8      	; 0xf12 <__pack_f+0xbe>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	a0 e0       	ldi	r26, 0x00	; 0
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	9a 01       	movw	r18, r20
     f14:	ab 01       	movw	r20, r22
     f16:	28 2b       	or	r18, r24
     f18:	39 2b       	or	r19, r25
     f1a:	4a 2b       	or	r20, r26
     f1c:	5b 2b       	or	r21, r27
     f1e:	da 01       	movw	r26, r20
     f20:	c9 01       	movw	r24, r18
     f22:	8f 77       	andi	r24, 0x7F	; 127
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	a0 70       	andi	r26, 0x00	; 0
     f28:	b0 70       	andi	r27, 0x00	; 0
     f2a:	80 34       	cpi	r24, 0x40	; 64
     f2c:	91 05       	cpc	r25, r1
     f2e:	a1 05       	cpc	r26, r1
     f30:	b1 05       	cpc	r27, r1
     f32:	39 f4       	brne	.+14     	; 0xf42 <__pack_f+0xee>
     f34:	27 ff       	sbrs	r18, 7
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <__pack_f+0xf6>
     f38:	20 5c       	subi	r18, 0xC0	; 192
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	4f 4f       	sbci	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <__pack_f+0xf6>
     f42:	21 5c       	subi	r18, 0xC1	; 193
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	4f 4f       	sbci	r20, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	e0 e0       	ldi	r30, 0x00	; 0
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	20 30       	cpi	r18, 0x00	; 0
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	3a 07       	cpc	r19, r26
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	4a 07       	cpc	r20, r26
     f58:	a0 e4       	ldi	r26, 0x40	; 64
     f5a:	5a 07       	cpc	r21, r26
     f5c:	10 f0       	brcs	.+4      	; 0xf62 <__pack_f+0x10e>
     f5e:	e1 e0       	ldi	r30, 0x01	; 1
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	79 01       	movw	r14, r18
     f64:	8a 01       	movw	r16, r20
     f66:	27 c0       	rjmp	.+78     	; 0xfb6 <__pack_f+0x162>
     f68:	60 38       	cpi	r22, 0x80	; 128
     f6a:	71 05       	cpc	r23, r1
     f6c:	64 f5       	brge	.+88     	; 0xfc6 <__pack_f+0x172>
     f6e:	fb 01       	movw	r30, r22
     f70:	e1 58       	subi	r30, 0x81	; 129
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	d8 01       	movw	r26, r16
     f76:	c7 01       	movw	r24, r14
     f78:	8f 77       	andi	r24, 0x7F	; 127
     f7a:	90 70       	andi	r25, 0x00	; 0
     f7c:	a0 70       	andi	r26, 0x00	; 0
     f7e:	b0 70       	andi	r27, 0x00	; 0
     f80:	80 34       	cpi	r24, 0x40	; 64
     f82:	91 05       	cpc	r25, r1
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	39 f4       	brne	.+14     	; 0xf98 <__pack_f+0x144>
     f8a:	e7 fe       	sbrs	r14, 7
     f8c:	0d c0       	rjmp	.+26     	; 0xfa8 <__pack_f+0x154>
     f8e:	80 e4       	ldi	r24, 0x40	; 64
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a0 e0       	ldi	r26, 0x00	; 0
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <__pack_f+0x14c>
     f98:	8f e3       	ldi	r24, 0x3F	; 63
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e8 0e       	add	r14, r24
     fa2:	f9 1e       	adc	r15, r25
     fa4:	0a 1f       	adc	r16, r26
     fa6:	1b 1f       	adc	r17, r27
     fa8:	17 ff       	sbrs	r17, 7
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <__pack_f+0x162>
     fac:	16 95       	lsr	r17
     fae:	07 95       	ror	r16
     fb0:	f7 94       	ror	r15
     fb2:	e7 94       	ror	r14
     fb4:	31 96       	adiw	r30, 0x01	; 1
     fb6:	87 e0       	ldi	r24, 0x07	; 7
     fb8:	16 95       	lsr	r17
     fba:	07 95       	ror	r16
     fbc:	f7 94       	ror	r15
     fbe:	e7 94       	ror	r14
     fc0:	8a 95       	dec	r24
     fc2:	d1 f7       	brne	.-12     	; 0xfb8 <__pack_f+0x164>
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <__pack_f+0x17c>
     fc6:	ee 24       	eor	r14, r14
     fc8:	ff 24       	eor	r15, r15
     fca:	87 01       	movw	r16, r14
     fcc:	ef ef       	ldi	r30, 0xFF	; 255
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	6e 2f       	mov	r22, r30
     fd2:	67 95       	ror	r22
     fd4:	66 27       	eor	r22, r22
     fd6:	67 95       	ror	r22
     fd8:	90 2f       	mov	r25, r16
     fda:	9f 77       	andi	r25, 0x7F	; 127
     fdc:	d7 94       	ror	r13
     fde:	dd 24       	eor	r13, r13
     fe0:	d7 94       	ror	r13
     fe2:	8e 2f       	mov	r24, r30
     fe4:	86 95       	lsr	r24
     fe6:	49 2f       	mov	r20, r25
     fe8:	46 2b       	or	r20, r22
     fea:	58 2f       	mov	r21, r24
     fec:	5d 29       	or	r21, r13
     fee:	b7 01       	movw	r22, r14
     ff0:	ca 01       	movw	r24, r20
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	08 95       	ret

00000ffe <__unpack_f>:
     ffe:	fc 01       	movw	r30, r24
    1000:	db 01       	movw	r26, r22
    1002:	40 81       	ld	r20, Z
    1004:	51 81       	ldd	r21, Z+1	; 0x01
    1006:	22 81       	ldd	r18, Z+2	; 0x02
    1008:	62 2f       	mov	r22, r18
    100a:	6f 77       	andi	r22, 0x7F	; 127
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	22 1f       	adc	r18, r18
    1010:	22 27       	eor	r18, r18
    1012:	22 1f       	adc	r18, r18
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	89 2f       	mov	r24, r25
    1018:	88 0f       	add	r24, r24
    101a:	82 2b       	or	r24, r18
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	99 1f       	adc	r25, r25
    1022:	99 27       	eor	r25, r25
    1024:	99 1f       	adc	r25, r25
    1026:	11 96       	adiw	r26, 0x01	; 1
    1028:	9c 93       	st	X, r25
    102a:	11 97       	sbiw	r26, 0x01	; 1
    102c:	21 15       	cp	r18, r1
    102e:	31 05       	cpc	r19, r1
    1030:	a9 f5       	brne	.+106    	; 0x109c <__unpack_f+0x9e>
    1032:	41 15       	cp	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	61 05       	cpc	r22, r1
    1038:	71 05       	cpc	r23, r1
    103a:	11 f4       	brne	.+4      	; 0x1040 <__unpack_f+0x42>
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	37 c0       	rjmp	.+110    	; 0x10ae <__unpack_f+0xb0>
    1040:	82 e8       	ldi	r24, 0x82	; 130
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	13 96       	adiw	r26, 0x03	; 3
    1046:	9c 93       	st	X, r25
    1048:	8e 93       	st	-X, r24
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	9a 01       	movw	r18, r20
    104e:	ab 01       	movw	r20, r22
    1050:	67 e0       	ldi	r22, 0x07	; 7
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	44 1f       	adc	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	6a 95       	dec	r22
    105c:	d1 f7       	brne	.-12     	; 0x1052 <__unpack_f+0x54>
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	8c 93       	st	X, r24
    1062:	0d c0       	rjmp	.+26     	; 0x107e <__unpack_f+0x80>
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	44 1f       	adc	r20, r20
    106a:	55 1f       	adc	r21, r21
    106c:	12 96       	adiw	r26, 0x02	; 2
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	13 97       	sbiw	r26, 0x03	; 3
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	13 96       	adiw	r26, 0x03	; 3
    1078:	9c 93       	st	X, r25
    107a:	8e 93       	st	-X, r24
    107c:	12 97       	sbiw	r26, 0x02	; 2
    107e:	20 30       	cpi	r18, 0x00	; 0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	38 07       	cpc	r19, r24
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	48 07       	cpc	r20, r24
    1088:	80 e4       	ldi	r24, 0x40	; 64
    108a:	58 07       	cpc	r21, r24
    108c:	58 f3       	brcs	.-42     	; 0x1064 <__unpack_f+0x66>
    108e:	14 96       	adiw	r26, 0x04	; 4
    1090:	2d 93       	st	X+, r18
    1092:	3d 93       	st	X+, r19
    1094:	4d 93       	st	X+, r20
    1096:	5c 93       	st	X, r21
    1098:	17 97       	sbiw	r26, 0x07	; 7
    109a:	08 95       	ret
    109c:	2f 3f       	cpi	r18, 0xFF	; 255
    109e:	31 05       	cpc	r19, r1
    10a0:	79 f4       	brne	.+30     	; 0x10c0 <__unpack_f+0xc2>
    10a2:	41 15       	cp	r20, r1
    10a4:	51 05       	cpc	r21, r1
    10a6:	61 05       	cpc	r22, r1
    10a8:	71 05       	cpc	r23, r1
    10aa:	19 f4       	brne	.+6      	; 0x10b2 <__unpack_f+0xb4>
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	8c 93       	st	X, r24
    10b0:	08 95       	ret
    10b2:	64 ff       	sbrs	r22, 4
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <__unpack_f+0xbe>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	8c 93       	st	X, r24
    10ba:	12 c0       	rjmp	.+36     	; 0x10e0 <__unpack_f+0xe2>
    10bc:	1c 92       	st	X, r1
    10be:	10 c0       	rjmp	.+32     	; 0x10e0 <__unpack_f+0xe2>
    10c0:	2f 57       	subi	r18, 0x7F	; 127
    10c2:	30 40       	sbci	r19, 0x00	; 0
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	3c 93       	st	X, r19
    10c8:	2e 93       	st	-X, r18
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	8c 93       	st	X, r24
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	44 0f       	add	r20, r20
    10d4:	55 1f       	adc	r21, r21
    10d6:	66 1f       	adc	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	8a 95       	dec	r24
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0xd4>
    10de:	70 64       	ori	r23, 0x40	; 64
    10e0:	14 96       	adiw	r26, 0x04	; 4
    10e2:	4d 93       	st	X+, r20
    10e4:	5d 93       	st	X+, r21
    10e6:	6d 93       	st	X+, r22
    10e8:	7c 93       	st	X, r23
    10ea:	17 97       	sbiw	r26, 0x07	; 7
    10ec:	08 95       	ret

000010ee <__fpcmp_parts_f>:
    10ee:	1f 93       	push	r17
    10f0:	dc 01       	movw	r26, r24
    10f2:	fb 01       	movw	r30, r22
    10f4:	9c 91       	ld	r25, X
    10f6:	92 30       	cpi	r25, 0x02	; 2
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <__fpcmp_parts_f+0xe>
    10fa:	47 c0       	rjmp	.+142    	; 0x118a <__fpcmp_parts_f+0x9c>
    10fc:	80 81       	ld	r24, Z
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	08 f4       	brcc	.+2      	; 0x1104 <__fpcmp_parts_f+0x16>
    1102:	43 c0       	rjmp	.+134    	; 0x118a <__fpcmp_parts_f+0x9c>
    1104:	94 30       	cpi	r25, 0x04	; 4
    1106:	51 f4       	brne	.+20     	; 0x111c <__fpcmp_parts_f+0x2e>
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	1c 91       	ld	r17, X
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	99 f5       	brne	.+102    	; 0x1176 <__fpcmp_parts_f+0x88>
    1110:	81 81       	ldd	r24, Z+1	; 0x01
    1112:	68 2f       	mov	r22, r24
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	61 1b       	sub	r22, r17
    1118:	71 09       	sbc	r23, r1
    111a:	3f c0       	rjmp	.+126    	; 0x119a <__fpcmp_parts_f+0xac>
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	21 f0       	breq	.+8      	; 0x1128 <__fpcmp_parts_f+0x3a>
    1120:	92 30       	cpi	r25, 0x02	; 2
    1122:	31 f4       	brne	.+12     	; 0x1130 <__fpcmp_parts_f+0x42>
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	b9 f1       	breq	.+110    	; 0x1196 <__fpcmp_parts_f+0xa8>
    1128:	81 81       	ldd	r24, Z+1	; 0x01
    112a:	88 23       	and	r24, r24
    112c:	89 f1       	breq	.+98     	; 0x1190 <__fpcmp_parts_f+0xa2>
    112e:	2d c0       	rjmp	.+90     	; 0x118a <__fpcmp_parts_f+0x9c>
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	1c 91       	ld	r17, X
    1134:	11 97       	sbiw	r26, 0x01	; 1
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	f1 f0       	breq	.+60     	; 0x1176 <__fpcmp_parts_f+0x88>
    113a:	81 81       	ldd	r24, Z+1	; 0x01
    113c:	18 17       	cp	r17, r24
    113e:	d9 f4       	brne	.+54     	; 0x1176 <__fpcmp_parts_f+0x88>
    1140:	12 96       	adiw	r26, 0x02	; 2
    1142:	2d 91       	ld	r18, X+
    1144:	3c 91       	ld	r19, X
    1146:	13 97       	sbiw	r26, 0x03	; 3
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	82 17       	cp	r24, r18
    114e:	93 07       	cpc	r25, r19
    1150:	94 f0       	brlt	.+36     	; 0x1176 <__fpcmp_parts_f+0x88>
    1152:	28 17       	cp	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	bc f0       	brlt	.+46     	; 0x1186 <__fpcmp_parts_f+0x98>
    1158:	14 96       	adiw	r26, 0x04	; 4
    115a:	8d 91       	ld	r24, X+
    115c:	9d 91       	ld	r25, X+
    115e:	0d 90       	ld	r0, X+
    1160:	bc 91       	ld	r27, X
    1162:	a0 2d       	mov	r26, r0
    1164:	24 81       	ldd	r18, Z+4	; 0x04
    1166:	35 81       	ldd	r19, Z+5	; 0x05
    1168:	46 81       	ldd	r20, Z+6	; 0x06
    116a:	57 81       	ldd	r21, Z+7	; 0x07
    116c:	28 17       	cp	r18, r24
    116e:	39 07       	cpc	r19, r25
    1170:	4a 07       	cpc	r20, r26
    1172:	5b 07       	cpc	r21, r27
    1174:	18 f4       	brcc	.+6      	; 0x117c <__fpcmp_parts_f+0x8e>
    1176:	11 23       	and	r17, r17
    1178:	41 f0       	breq	.+16     	; 0x118a <__fpcmp_parts_f+0x9c>
    117a:	0a c0       	rjmp	.+20     	; 0x1190 <__fpcmp_parts_f+0xa2>
    117c:	82 17       	cp	r24, r18
    117e:	93 07       	cpc	r25, r19
    1180:	a4 07       	cpc	r26, r20
    1182:	b5 07       	cpc	r27, r21
    1184:	40 f4       	brcc	.+16     	; 0x1196 <__fpcmp_parts_f+0xa8>
    1186:	11 23       	and	r17, r17
    1188:	19 f0       	breq	.+6      	; 0x1190 <__fpcmp_parts_f+0xa2>
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	05 c0       	rjmp	.+10     	; 0x119a <__fpcmp_parts_f+0xac>
    1190:	6f ef       	ldi	r22, 0xFF	; 255
    1192:	7f ef       	ldi	r23, 0xFF	; 255
    1194:	02 c0       	rjmp	.+4      	; 0x119a <__fpcmp_parts_f+0xac>
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	cb 01       	movw	r24, r22
    119c:	1f 91       	pop	r17
    119e:	08 95       	ret

000011a0 <App_GenerateRandom>:
SwConfig_t button ={SW_IN_PULLUP,PORTA,PIN0};




void App_GenerateRandom(){
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62

	uint8_t LocalRandom;

	/*use timer to generate random number*/
	LocalRandom =TIMER0_ReadTimerReg();
    11aa:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <TIMER0_ReadTimerReg>
    11ae:	89 83       	std	Y+1, r24	; 0x01
	/*mapping the value to desired range*/

	gRandomNumber = ((sfloat32_t)LocalRandom * 14.0f)/255.0f;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	bc 01       	movw	r22, r24
    11bc:	cd 01       	movw	r24, r26
    11be:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e6       	ldi	r20, 0x60	; 96
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	53 e4       	ldi	r21, 0x43	; 67
    11e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	80 93 c8 01 	sts	0x01C8, r24


}
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <App_SetTimeOut>:

void App_SetTimeOut(){
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62

	static uint8_t counter= 0;
	/*increase counter*/
	counter++;
    120e:	80 91 cf 01 	lds	r24, 0x01CF
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	80 93 cf 01 	sts	0x01CF, r24

	if(counter == 220)
    1218:	80 91 cf 01 	lds	r24, 0x01CF
    121c:	8c 3d       	cpi	r24, 0xDC	; 220
    121e:	31 f4       	brne	.+12     	; 0x122c <App_SetTimeOut+0x26>
	{
		/*Set the flag for TimeOut*/
		gTimeOutFlag = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 cb 01 	sts	0x01CB, r24

		TIMER0_SetTimerValue(0);
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <TIMER0_SetTimerValue>
	}



}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <App_GetNumber>:

void App_GetNumber(){
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	SwState_t stateOfbutton;

	/*Enable the the interrupt*/
	TIMER0_SetInterrupt(NORMAL,ENABLED);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <TIMER0_SetInterrupt>

	/*make the Timer to count from here*/
	TIMER0_SetTimerValue(0);
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <TIMER0_SetTimerValue>
    124a:	26 c0       	rjmp	.+76     	; 0x1298 <App_GetNumber+0x66>

	while(gTimeOutFlag == 0){

		/*get the state of button */
		SW_GetState(&button,&stateOfbutton);
    124c:	9e 01       	movw	r18, r28
    124e:	2f 5f       	subi	r18, 0xFF	; 255
    1250:	3f 4f       	sbci	r19, 0xFF	; 255
    1252:	8c ec       	ldi	r24, 0xCC	; 204
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	b9 01       	movw	r22, r18
    1258:	0e 94 49 14 	call	0x2892	; 0x2892 <SW_GetState>

		/*check the state of button */
		if(stateOfbutton== SW_PRESSED){
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	d9 f4       	brne	.+54     	; 0x1298 <App_GetNumber+0x66>

			/*Increment the number */
			gInputNumber ++;
    1262:	80 91 ca 01 	lds	r24, 0x01CA
    1266:	8f 5f       	subi	r24, 0xFF	; 255
    1268:	80 93 ca 01 	sts	0x01CA, r24

			CLCD_voidGoToXY(1,9);
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	69 e0       	ldi	r22, 0x09	; 9
    1270:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <CLCD_voidGoToXY>

			CLCD_voidSendNumber(gInputNumber);
    1274:	80 91 ca 01 	lds	r24, 0x01CA
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <CLCD_voidSendNumber>
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <App_GetNumber+0x60>

			while(stateOfbutton == SW_PRESSED){

				SW_GetState(&button,&stateOfbutton);
    1282:	9e 01       	movw	r18, r28
    1284:	2f 5f       	subi	r18, 0xFF	; 255
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	8c ec       	ldi	r24, 0xCC	; 204
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	b9 01       	movw	r22, r18
    128e:	0e 94 49 14 	call	0x2892	; 0x2892 <SW_GetState>

			CLCD_voidGoToXY(1,9);

			CLCD_voidSendNumber(gInputNumber);

			while(stateOfbutton == SW_PRESSED){
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	a9 f3       	breq	.-22     	; 0x1282 <App_GetNumber+0x50>
	TIMER0_SetInterrupt(NORMAL,ENABLED);

	/*make the Timer to count from here*/
	TIMER0_SetTimerValue(0);

	while(gTimeOutFlag == 0){
    1298:	80 91 cb 01 	lds	r24, 0x01CB
    129c:	88 23       	and	r24, r24
    129e:	b1 f2       	breq	.-84     	; 0x124c <App_GetNumber+0x1a>
		}

	}


}
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <App_Display>:


void App_Display(){
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	static uint8_t  LCD_flag = 0;

	if((gInputNumber == 0)&&(LCD_flag == 0)){
    12b0:	80 91 ca 01 	lds	r24, 0x01CA
    12b4:	88 23       	and	r24, r24
    12b6:	b1 f4       	brne	.+44     	; 0x12e4 <App_Display+0x3c>
    12b8:	80 91 d0 01 	lds	r24, 0x01D0
    12bc:	88 23       	and	r24, r24
    12be:	91 f4       	brne	.+36     	; 0x12e4 <App_Display+0x3c>

		CLCD_voidSendString("Please Guess ");
    12c0:	80 e6       	ldi	r24, 0x60	; 96
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <CLCD_voidGoToXY>
		CLCD_voidSendString("number:");
    12d0:	8e e6       	ldi	r24, 0x6E	; 110
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <CLCD_voidSendString>

		LCD_flag++;
    12d8:	80 91 d0 01 	lds	r24, 0x01D0
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
    12de:	80 93 d0 01 	sts	0x01D0, r24
    12e2:	45 c0       	rjmp	.+138    	; 0x136e <App_Display+0xc6>

	}
	else if(gInputNumber == 0){
    12e4:	80 91 ca 01 	lds	r24, 0x01CA
    12e8:	88 23       	and	r24, r24
    12ea:	79 f4       	brne	.+30     	; 0x130a <App_Display+0x62>
		CLCD_Clear();
    12ec:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <CLCD_Clear>
		CLCD_voidSendString("you don't press ");
    12f0:	86 e7       	ldi	r24, 0x76	; 118
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <CLCD_voidGoToXY>
		CLCD_voidSendString("any numbers");
    1300:	87 e8       	ldi	r24, 0x87	; 135
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <CLCD_voidSendString>
    1308:	32 c0       	rjmp	.+100    	; 0x136e <App_Display+0xc6>
	}

	else if((gInputNumber > 15)){
    130a:	80 91 ca 01 	lds	r24, 0x01CA
    130e:	80 31       	cpi	r24, 0x10	; 16
    1310:	38 f0       	brcs	.+14     	; 0x1320 <App_Display+0x78>
		CLCD_Clear();
    1312:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <CLCD_Clear>
		CLCD_voidSendString("invalid range");
    1316:	83 e9       	ldi	r24, 0x93	; 147
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <CLCD_voidSendString>
    131e:	27 c0       	rjmp	.+78     	; 0x136e <App_Display+0xc6>
	}
	else if(gRandomNumber == gInputNumber){
    1320:	90 91 c8 01 	lds	r25, 0x01C8
    1324:	80 91 ca 01 	lds	r24, 0x01CA
    1328:	98 17       	cp	r25, r24
    132a:	39 f4       	brne	.+14     	; 0x133a <App_Display+0x92>
		CLCD_Clear();
    132c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <CLCD_Clear>
		CLCD_voidSendString("YOU WIN");
    1330:	81 ea       	ldi	r24, 0xA1	; 161
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <CLCD_voidSendString>
    1338:	1a c0       	rjmp	.+52     	; 0x136e <App_Display+0xc6>
	}
	else if(gRandomNumber != gInputNumber)
    133a:	90 91 c8 01 	lds	r25, 0x01C8
    133e:	80 91 ca 01 	lds	r24, 0x01CA
    1342:	98 17       	cp	r25, r24
    1344:	a1 f0       	breq	.+40     	; 0x136e <App_Display+0xc6>
	{
		CLCD_Clear();
    1346:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <CLCD_Clear>
		CLCD_voidSendString("YOU LOSE");
    134a:	89 ea       	ldi	r24, 0xA9	; 169
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <CLCD_voidGoToXY>
		CLCD_voidSendString("RIGHT GUESS: ");
    135a:	82 eb       	ldi	r24, 0xB2	; 178
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <CLCD_voidSendString>
		CLCD_voidSendNumber(gRandomNumber);
    1362:	80 91 c8 01 	lds	r24, 0x01C8
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <CLCD_voidSendNumber>


	}


}
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <App_Init>:


void App_Init(){
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62

	/*Initialize the components of Project*/
	PORT_voidInit();
    137c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <PORT_voidInit>

	/*Initialize the switch*/
	SW_Init(&button);
    1380:	8c ec       	ldi	r24, 0xCC	; 204
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	0e 94 18 14 	call	0x2830	; 0x2830 <SW_Init>

	/*Initialize the switch*/
	CLCD_voidInit();
    1388:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <CLCD_voidInit>
	App_Display();
    138c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <App_Display>

	/*Initialize the timer0*/
	TIMER0_Init();
    1390:	0e 94 9f 14 	call	0x293e	; 0x293e <TIMER0_Init>

	/*Initialize Global interrupt*/
	GIE_voidEnable();
    1394:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <GIE_voidEnable>

	/*disable timer interrupt*/
	TIMER0_SetInterrupt(NORMAL,DISABLED);
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <TIMER0_SetInterrupt>

	/*ISR Callback*/
	TIMER0_u8SetCallBack(App_SetTimeOut);
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	99 e0       	ldi	r25, 0x09	; 9
    13a4:	0e 94 98 17 	call	0x2f30	; 0x2f30 <TIMER0_u8SetCallBack>

}
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <App_Update>:


void App_Update(){
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	//App_GenerateRandom();



	/*get the number from User*/
	App_GetNumber();
    13b6:	0e 94 19 09 	call	0x1232	; 0x1232 <App_GetNumber>

	/*display the content*/
	App_Display();
    13ba:	0e 94 54 09 	call	0x12a8	; 0x12a8 <App_Display>


}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <CLCD_voidSend4BitCommand>:
#include "CLCD_private.h"




void CLCD_voidSend4BitCommand(uint8_t Copy_u8Command){
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	6e 97       	sbiw	r28, 0x1e	; 30
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	8e 8f       	std	Y+30, r24	; 0x1e

	/* store the 4 MSB to send first */
	uint8_t Local_Cmd = Copy_u8Command & MODE_4BIT_MASK;
    13da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13dc:	80 7f       	andi	r24, 0xF0	; 240
    13de:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS pin to low for command */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_LOW);
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    13ea:	83 e0       	ldi	r24, 0x03	; 3
    13ec:	61 e0       	ldi	r22, 0x01	; 1
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Cmd);
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    13f8:	0e 94 18 11 	call	0x2230	; 0x2230 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	62 e0       	ldi	r22, 0x02	; 2
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e4       	ldi	r27, 0x40	; 64
    140e:	89 8f       	std	Y+25, r24	; 0x19
    1410:	9a 8f       	std	Y+26, r25	; 0x1a
    1412:	ab 8f       	std	Y+27, r26	; 0x1b
    1414:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1416:	69 8d       	ldd	r22, Y+25	; 0x19
    1418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a ef       	ldi	r20, 0xFA	; 250
    1424:	54 e4       	ldi	r21, 0x44	; 68
    1426:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8d 8b       	std	Y+21, r24	; 0x15
    1430:	9e 8b       	std	Y+22, r25	; 0x16
    1432:	af 8b       	std	Y+23, r26	; 0x17
    1434:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1436:	6d 89       	ldd	r22, Y+21	; 0x15
    1438:	7e 89       	ldd	r23, Y+22	; 0x16
    143a:	8f 89       	ldd	r24, Y+23	; 0x17
    143c:	98 8d       	ldd	r25, Y+24	; 0x18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    144a:	88 23       	and	r24, r24
    144c:	2c f4       	brge	.+10     	; 0x1458 <CLCD_voidSend4BitCommand+0x94>
		__ticks = 1;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9c 8b       	std	Y+20, r25	; 0x14
    1454:	8b 8b       	std	Y+19, r24	; 0x13
    1456:	3f c0       	rjmp	.+126    	; 0x14d6 <CLCD_voidSend4BitCommand+0x112>
	else if (__tmp > 65535)
    1458:	6d 89       	ldd	r22, Y+21	; 0x15
    145a:	7e 89       	ldd	r23, Y+22	; 0x16
    145c:	8f 89       	ldd	r24, Y+23	; 0x17
    145e:	98 8d       	ldd	r25, Y+24	; 0x18
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	4c f5       	brge	.+82     	; 0x14c2 <CLCD_voidSend4BitCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1470:	69 8d       	ldd	r22, Y+25	; 0x19
    1472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e2       	ldi	r20, 0x20	; 32
    147e:	51 e4       	ldi	r21, 0x41	; 65
    1480:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9c 8b       	std	Y+20, r25	; 0x14
    1496:	8b 8b       	std	Y+19, r24	; 0x13
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <CLCD_voidSend4BitCommand+0xf4>
    149a:	88 ec       	ldi	r24, 0xC8	; 200
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9a 8b       	std	Y+18, r25	; 0x12
    14a0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a2:	89 89       	ldd	r24, Y+17	; 0x11
    14a4:	9a 89       	ldd	r25, Y+18	; 0x12
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <CLCD_voidSend4BitCommand+0xe2>
    14aa:	9a 8b       	std	Y+18, r25	; 0x12
    14ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ae:	8b 89       	ldd	r24, Y+19	; 0x13
    14b0:	9c 89       	ldd	r25, Y+20	; 0x14
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	9c 8b       	std	Y+20, r25	; 0x14
    14b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ba:	9c 89       	ldd	r25, Y+20	; 0x14
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	69 f7       	brne	.-38     	; 0x149a <CLCD_voidSend4BitCommand+0xd6>
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <CLCD_voidSend4BitCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c2:	6d 89       	ldd	r22, Y+21	; 0x15
    14c4:	7e 89       	ldd	r23, Y+22	; 0x16
    14c6:	8f 89       	ldd	r24, Y+23	; 0x17
    14c8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9c 8b       	std	Y+20, r25	; 0x14
    14d4:	8b 8b       	std	Y+19, r24	; 0x13
    14d6:	8b 89       	ldd	r24, Y+19	; 0x13
    14d8:	9c 89       	ldd	r25, Y+20	; 0x14
    14da:	98 8b       	std	Y+16, r25	; 0x10
    14dc:	8f 87       	std	Y+15, r24	; 0x0f
    14de:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e0:	98 89       	ldd	r25, Y+16	; 0x10
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <CLCD_voidSend4BitCommand+0x11e>
    14e6:	98 8b       	std	Y+16, r25	; 0x10
    14e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	62 e0       	ldi	r22, 0x02	; 2
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

	/* store the 4 LSB to send second */
	Local_Cmd = Copy_u8Command << 4 ;
    14f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14f6:	82 95       	swap	r24
    14f8:	80 7f       	andi	r24, 0xF0	; 240
    14fa:	8d 8f       	std	Y+29, r24	; 0x1d
	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Cmd);
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1500:	0e 94 18 11 	call	0x2230	; 0x2230 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	62 e0       	ldi	r22, 0x02	; 2
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	b0 e4       	ldi	r27, 0x40	; 64
    1516:	8b 87       	std	Y+11, r24	; 0x0b
    1518:	9c 87       	std	Y+12, r25	; 0x0c
    151a:	ad 87       	std	Y+13, r26	; 0x0d
    151c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1520:	7c 85       	ldd	r23, Y+12	; 0x0c
    1522:	8d 85       	ldd	r24, Y+13	; 0x0d
    1524:	9e 85       	ldd	r25, Y+14	; 0x0e
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	4a ef       	ldi	r20, 0xFA	; 250
    152c:	54 e4       	ldi	r21, 0x44	; 68
    152e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	8f 83       	std	Y+7, r24	; 0x07
    1538:	98 87       	std	Y+8, r25	; 0x08
    153a:	a9 87       	std	Y+9, r26	; 0x09
    153c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    153e:	6f 81       	ldd	r22, Y+7	; 0x07
    1540:	78 85       	ldd	r23, Y+8	; 0x08
    1542:	89 85       	ldd	r24, Y+9	; 0x09
    1544:	9a 85       	ldd	r25, Y+10	; 0x0a
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e8       	ldi	r20, 0x80	; 128
    154c:	5f e3       	ldi	r21, 0x3F	; 63
    154e:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    1552:	88 23       	and	r24, r24
    1554:	2c f4       	brge	.+10     	; 0x1560 <CLCD_voidSend4BitCommand+0x19c>
		__ticks = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	3f c0       	rjmp	.+126    	; 0x15de <CLCD_voidSend4BitCommand+0x21a>
	else if (__tmp > 65535)
    1560:	6f 81       	ldd	r22, Y+7	; 0x07
    1562:	78 85       	ldd	r23, Y+8	; 0x08
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	3f ef       	ldi	r19, 0xFF	; 255
    156c:	4f e7       	ldi	r20, 0x7F	; 127
    156e:	57 e4       	ldi	r21, 0x47	; 71
    1570:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    1574:	18 16       	cp	r1, r24
    1576:	4c f5       	brge	.+82     	; 0x15ca <CLCD_voidSend4BitCommand+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1578:	6b 85       	ldd	r22, Y+11	; 0x0b
    157a:	7c 85       	ldd	r23, Y+12	; 0x0c
    157c:	8d 85       	ldd	r24, Y+13	; 0x0d
    157e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e2       	ldi	r20, 0x20	; 32
    1586:	51 e4       	ldi	r21, 0x41	; 65
    1588:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <CLCD_voidSend4BitCommand+0x1fc>
    15a2:	88 ec       	ldi	r24, 0xC8	; 200
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <CLCD_voidSend4BitCommand+0x1ea>
    15b2:	9c 83       	std	Y+4, r25	; 0x04
    15b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	69 f7       	brne	.-38     	; 0x15a2 <CLCD_voidSend4BitCommand+0x1de>
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <CLCD_voidSend4BitCommand+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ca:	6f 81       	ldd	r22, Y+7	; 0x07
    15cc:	78 85       	ldd	r23, Y+8	; 0x08
    15ce:	89 85       	ldd	r24, Y+9	; 0x09
    15d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <CLCD_voidSend4BitCommand+0x226>
    15ee:	9a 83       	std	Y+2, r25	; 0x02
    15f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    15f2:	83 e0       	ldi	r24, 0x03	; 3
    15f4:	62 e0       	ldi	r22, 0x02	; 2
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>



}
    15fc:	6e 96       	adiw	r28, 0x1e	; 30
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <CLCD_voidSend4BitData>:

void CLCD_voidSend4BitData(uint8_t Copy_u8Data){
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	6e 97       	sbiw	r28, 0x1e	; 30
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	8e 8f       	std	Y+30, r24	; 0x1e

	uint8_t Local_Data = Copy_u8Data & MODE_4BIT_MASK;
    1624:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1626:	80 7f       	andi	r24, 0xF0	; 240
    1628:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS pin to HIGH for DATA */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_HIGH);
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

	/* send data to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Data);
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1642:	0e 94 18 11 	call	0x2230	; 0x2230 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    1646:	83 e0       	ldi	r24, 0x03	; 3
    1648:	62 e0       	ldi	r22, 0x02	; 2
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e4       	ldi	r27, 0x40	; 64
    1658:	89 8f       	std	Y+25, r24	; 0x19
    165a:	9a 8f       	std	Y+26, r25	; 0x1a
    165c:	ab 8f       	std	Y+27, r26	; 0x1b
    165e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1660:	69 8d       	ldd	r22, Y+25	; 0x19
    1662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	4a ef       	ldi	r20, 0xFA	; 250
    166e:	54 e4       	ldi	r21, 0x44	; 68
    1670:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8d 8b       	std	Y+21, r24	; 0x15
    167a:	9e 8b       	std	Y+22, r25	; 0x16
    167c:	af 8b       	std	Y+23, r26	; 0x17
    167e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1680:	6d 89       	ldd	r22, Y+21	; 0x15
    1682:	7e 89       	ldd	r23, Y+22	; 0x16
    1684:	8f 89       	ldd	r24, Y+23	; 0x17
    1686:	98 8d       	ldd	r25, Y+24	; 0x18
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	5f e3       	ldi	r21, 0x3F	; 63
    1690:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    1694:	88 23       	and	r24, r24
    1696:	2c f4       	brge	.+10     	; 0x16a2 <CLCD_voidSend4BitData+0x94>
		__ticks = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9c 8b       	std	Y+20, r25	; 0x14
    169e:	8b 8b       	std	Y+19, r24	; 0x13
    16a0:	3f c0       	rjmp	.+126    	; 0x1720 <CLCD_voidSend4BitData+0x112>
	else if (__tmp > 65535)
    16a2:	6d 89       	ldd	r22, Y+21	; 0x15
    16a4:	7e 89       	ldd	r23, Y+22	; 0x16
    16a6:	8f 89       	ldd	r24, Y+23	; 0x17
    16a8:	98 8d       	ldd	r25, Y+24	; 0x18
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f e7       	ldi	r20, 0x7F	; 127
    16b0:	57 e4       	ldi	r21, 0x47	; 71
    16b2:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    16b6:	18 16       	cp	r1, r24
    16b8:	4c f5       	brge	.+82     	; 0x170c <CLCD_voidSend4BitData+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ba:	69 8d       	ldd	r22, Y+25	; 0x19
    16bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e2       	ldi	r20, 0x20	; 32
    16c8:	51 e4       	ldi	r21, 0x41	; 65
    16ca:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9c 8b       	std	Y+20, r25	; 0x14
    16e0:	8b 8b       	std	Y+19, r24	; 0x13
    16e2:	0f c0       	rjmp	.+30     	; 0x1702 <CLCD_voidSend4BitData+0xf4>
    16e4:	88 ec       	ldi	r24, 0xC8	; 200
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9a 8b       	std	Y+18, r25	; 0x12
    16ea:	89 8b       	std	Y+17, r24	; 0x11
    16ec:	89 89       	ldd	r24, Y+17	; 0x11
    16ee:	9a 89       	ldd	r25, Y+18	; 0x12
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <CLCD_voidSend4BitData+0xe2>
    16f4:	9a 8b       	std	Y+18, r25	; 0x12
    16f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f8:	8b 89       	ldd	r24, Y+19	; 0x13
    16fa:	9c 89       	ldd	r25, Y+20	; 0x14
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	9c 8b       	std	Y+20, r25	; 0x14
    1700:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1702:	8b 89       	ldd	r24, Y+19	; 0x13
    1704:	9c 89       	ldd	r25, Y+20	; 0x14
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	69 f7       	brne	.-38     	; 0x16e4 <CLCD_voidSend4BitData+0xd6>
    170a:	14 c0       	rjmp	.+40     	; 0x1734 <CLCD_voidSend4BitData+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170c:	6d 89       	ldd	r22, Y+21	; 0x15
    170e:	7e 89       	ldd	r23, Y+22	; 0x16
    1710:	8f 89       	ldd	r24, Y+23	; 0x17
    1712:	98 8d       	ldd	r25, Y+24	; 0x18
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9c 8b       	std	Y+20, r25	; 0x14
    171e:	8b 8b       	std	Y+19, r24	; 0x13
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	98 8b       	std	Y+16, r25	; 0x10
    1726:	8f 87       	std	Y+15, r24	; 0x0f
    1728:	8f 85       	ldd	r24, Y+15	; 0x0f
    172a:	98 89       	ldd	r25, Y+16	; 0x10
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <CLCD_voidSend4BitData+0x11e>
    1730:	98 8b       	std	Y+16, r25	; 0x10
    1732:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    1734:	83 e0       	ldi	r24, 0x03	; 3
    1736:	62 e0       	ldi	r22, 0x02	; 2
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

	/* store the 4 LSB to send second */
	Local_Data = Copy_u8Data << 4 ;
    173e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1740:	82 95       	swap	r24
    1742:	80 7f       	andi	r24, 0xF0	; 240
    1744:	8d 8f       	std	Y+29, r24	; 0x1d

	/* send data to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Data);
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	6d 8d       	ldd	r22, Y+29	; 0x1d
    174a:	0e 94 18 11 	call	0x2230	; 0x2230 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    174e:	83 e0       	ldi	r24, 0x03	; 3
    1750:	62 e0       	ldi	r22, 0x02	; 2
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a0 e0       	ldi	r26, 0x00	; 0
    175e:	b0 e4       	ldi	r27, 0x40	; 64
    1760:	8b 87       	std	Y+11, r24	; 0x0b
    1762:	9c 87       	std	Y+12, r25	; 0x0c
    1764:	ad 87       	std	Y+13, r26	; 0x0d
    1766:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	6b 85       	ldd	r22, Y+11	; 0x0b
    176a:	7c 85       	ldd	r23, Y+12	; 0x0c
    176c:	8d 85       	ldd	r24, Y+13	; 0x0d
    176e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	4a ef       	ldi	r20, 0xFA	; 250
    1776:	54 e4       	ldi	r21, 0x44	; 68
    1778:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	8f 83       	std	Y+7, r24	; 0x07
    1782:	98 87       	std	Y+8, r25	; 0x08
    1784:	a9 87       	std	Y+9, r26	; 0x09
    1786:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1788:	6f 81       	ldd	r22, Y+7	; 0x07
    178a:	78 85       	ldd	r23, Y+8	; 0x08
    178c:	89 85       	ldd	r24, Y+9	; 0x09
    178e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	2c f4       	brge	.+10     	; 0x17aa <CLCD_voidSend4BitData+0x19c>
		__ticks = 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	3f c0       	rjmp	.+126    	; 0x1828 <CLCD_voidSend4BitData+0x21a>
	else if (__tmp > 65535)
    17aa:	6f 81       	ldd	r22, Y+7	; 0x07
    17ac:	78 85       	ldd	r23, Y+8	; 0x08
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	3f ef       	ldi	r19, 0xFF	; 255
    17b6:	4f e7       	ldi	r20, 0x7F	; 127
    17b8:	57 e4       	ldi	r21, 0x47	; 71
    17ba:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    17be:	18 16       	cp	r1, r24
    17c0:	4c f5       	brge	.+82     	; 0x1814 <CLCD_voidSend4BitData+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e2       	ldi	r20, 0x20	; 32
    17d0:	51 e4       	ldi	r21, 0x41	; 65
    17d2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9e 83       	std	Y+6, r25	; 0x06
    17e8:	8d 83       	std	Y+5, r24	; 0x05
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <CLCD_voidSend4BitData+0x1fc>
    17ec:	88 ec       	ldi	r24, 0xC8	; 200
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9c 83       	std	Y+4, r25	; 0x04
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <CLCD_voidSend4BitData+0x1ea>
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	9e 81       	ldd	r25, Y+6	; 0x06
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	69 f7       	brne	.-38     	; 0x17ec <CLCD_voidSend4BitData+0x1de>
    1812:	14 c0       	rjmp	.+40     	; 0x183c <CLCD_voidSend4BitData+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1814:	6f 81       	ldd	r22, Y+7	; 0x07
    1816:	78 85       	ldd	r23, Y+8	; 0x08
    1818:	89 85       	ldd	r24, Y+9	; 0x09
    181a:	9a 85       	ldd	r25, Y+10	; 0x0a
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	8d 83       	std	Y+5, r24	; 0x05
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	9a 83       	std	Y+2, r25	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <CLCD_voidSend4BitData+0x226>
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	62 e0       	ldi	r22, 0x02	; 2
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>



}
    1846:	6e 96       	adiw	r28, 0x1e	; 30
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <CLCD_voidSend8BitCommand>:


void CLCD_voidSend8BitCommand(uint8_t Copy_u8Command){
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	2f 97       	sbiw	r28, 0x0f	; 15
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	8f 87       	std	Y+15, r24	; 0x0f

	/* Set RS pin to low for command */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_LOW);
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	6f 85       	ldd	r22, Y+15	; 0x0f
    1886:	0e 94 18 11 	call	0x2230	; 0x2230 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	62 e0       	ldi	r22, 0x02	; 2
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e0       	ldi	r26, 0x00	; 0
    189a:	b0 e4       	ldi	r27, 0x40	; 64
    189c:	8b 87       	std	Y+11, r24	; 0x0b
    189e:	9c 87       	std	Y+12, r25	; 0x0c
    18a0:	ad 87       	std	Y+13, r26	; 0x0d
    18a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a ef       	ldi	r20, 0xFA	; 250
    18b2:	54 e4       	ldi	r21, 0x44	; 68
    18b4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8f 83       	std	Y+7, r24	; 0x07
    18be:	98 87       	std	Y+8, r25	; 0x08
    18c0:	a9 87       	std	Y+9, r26	; 0x09
    18c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c4:	6f 81       	ldd	r22, Y+7	; 0x07
    18c6:	78 85       	ldd	r23, Y+8	; 0x08
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <CLCD_voidSend8BitCommand+0x8e>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <CLCD_voidSend8BitCommand+0x10c>
	else if (__tmp > 65535)
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <CLCD_voidSend8BitCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1900:	7c 85       	ldd	r23, Y+12	; 0x0c
    1902:	8d 85       	ldd	r24, Y+13	; 0x0d
    1904:	9e 85       	ldd	r25, Y+14	; 0x0e
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <CLCD_voidSend8BitCommand+0xee>
    1928:	88 ec       	ldi	r24, 0xC8	; 200
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c 83       	std	Y+4, r25	; 0x04
    192e:	8b 83       	std	Y+3, r24	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <CLCD_voidSend8BitCommand+0xdc>
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <CLCD_voidSend8BitCommand+0xd0>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <CLCD_voidSend8BitCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9e 83       	std	Y+6, r25	; 0x06
    1962:	8d 83       	std	Y+5, r24	; 0x05
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <CLCD_voidSend8BitCommand+0x118>
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	62 e0       	ldi	r22, 0x02	; 2
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

}
    1982:	2f 96       	adiw	r28, 0x0f	; 15
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <CLCD_voidSend8BitData>:

void CLCD_voidSend8BitData(uint8_t Copy_u8Data){
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	2f 97       	sbiw	r28, 0x0f	; 15
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	8f 87       	std	Y+15, r24	; 0x0f

	/* Set RS pin to HIGH for DATA */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_HIGH);
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	41 e0       	ldi	r20, 0x01	; 1
    19b0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	61 e0       	ldi	r22, 0x01	; 1
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    19c2:	0e 94 18 11 	call	0x2230	; 0x2230 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a0 e0       	ldi	r26, 0x00	; 0
    19d6:	b0 e4       	ldi	r27, 0x40	; 64
    19d8:	8b 87       	std	Y+11, r24	; 0x0b
    19da:	9c 87       	std	Y+12, r25	; 0x0c
    19dc:	ad 87       	std	Y+13, r26	; 0x0d
    19de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a ef       	ldi	r20, 0xFA	; 250
    19ee:	54 e4       	ldi	r21, 0x44	; 68
    19f0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	8f 83       	std	Y+7, r24	; 0x07
    19fa:	98 87       	std	Y+8, r25	; 0x08
    19fc:	a9 87       	std	Y+9, r26	; 0x09
    19fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a00:	6f 81       	ldd	r22, Y+7	; 0x07
    1a02:	78 85       	ldd	r23, Y+8	; 0x08
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <CLCD_voidSend8BitData+0x8e>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <CLCD_voidSend8BitData+0x10c>
	else if (__tmp > 65535)
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	4c f5       	brge	.+82     	; 0x1a8c <CLCD_voidSend8BitData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <CLCD_voidSend8BitData+0xee>
    1a64:	88 ec       	ldi	r24, 0xC8	; 200
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <CLCD_voidSend8BitData+0xdc>
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <CLCD_voidSend8BitData+0xd0>
    1a8a:	14 c0       	rjmp	.+40     	; 0x1ab4 <CLCD_voidSend8BitData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <CLCD_voidSend8BitData+0x118>
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    1ab4:	83 e0       	ldi	r24, 0x03	; 3
    1ab6:	62 e0       	ldi	r22, 0x02	; 2
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>

}
    1abe:	2f 96       	adiw	r28, 0x0f	; 15
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8_t Copy_u8Data){
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	0f 92       	push	r0
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSend8BitData(Copy_u8Data);

#elif CLCD_MODE == CLCD_4BIT_MODE

	CLCD_voidSend4BitData(Copy_u8Data);
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	0e 94 07 0b 	call	0x160e	; 0x160e <CLCD_voidSend4BitData>

#endif
}
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8_t Copy_u8Data){
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	0f 92       	push	r0
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSend8BitCommand(Copy_u8Data);

#elif CLCD_MODE == CLCD_4BIT_MODE

	CLCD_voidSend4BitCommand(Copy_u8Data);
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSend4BitCommand>

#endif
}
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <CLCD_Clear>:

void CLCD_Clear(){
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62

	/* Clear Display  */
	CLCD_voidSendCmd(ClEAR_LCD);
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CLCD_voidSendCmd>
}
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <CLCD_DispOff>:

void CLCD_DispOff(){
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(DISPLAY_OFF_CURSOR_OFF);
    1b20:	88 e0       	ldi	r24, 0x08	; 8
    1b22:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CLCD_voidSendCmd>
}
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <CLCD_DispOn>:

void CLCD_DispOn(){
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(DISPLAY_OFF_CURSOR_ON);
    1b34:	8a e0       	ldi	r24, 0x0A	; 10
    1b36:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CLCD_voidSendCmd>
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <CLCD_ShL>:

void CLCD_ShL()
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(SHIFT_CURSOR_POSITION_TO_LEFT);
    1b48:	80 e1       	ldi	r24, 0x10	; 16
    1b4a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CLCD_voidSendCmd>

}
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <CLCD_ShR>:

void CLCD_ShR()
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(SHIFT_CURSOR_POSITION_TO_RIGHT);
    1b5c:	84 e1       	ldi	r24, 0x14	; 20
    1b5e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CLCD_voidSendCmd>

}
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <CLCD_voidInit>:
void CLCD_voidInit(void){
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	2e 97       	sbiw	r28, 0x0e	; 14
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 e2       	ldi	r26, 0x20	; 32
    1b82:	b2 e4       	ldi	r27, 0x42	; 66
    1b84:	8b 87       	std	Y+11, r24	; 0x0b
    1b86:	9c 87       	std	Y+12, r25	; 0x0c
    1b88:	ad 87       	std	Y+13, r26	; 0x0d
    1b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a ef       	ldi	r20, 0xFA	; 250
    1b9a:	54 e4       	ldi	r21, 0x44	; 68
    1b9c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8f 83       	std	Y+7, r24	; 0x07
    1ba6:	98 87       	std	Y+8, r25	; 0x08
    1ba8:	a9 87       	std	Y+9, r26	; 0x09
    1baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bac:	6f 81       	ldd	r22, Y+7	; 0x07
    1bae:	78 85       	ldd	r23, Y+8	; 0x08
    1bb0:	89 85       	ldd	r24, Y+9	; 0x09
    1bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	2c f4       	brge	.+10     	; 0x1bce <CLCD_voidInit+0x66>
		__ticks = 1;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
    1bcc:	3f c0       	rjmp	.+126    	; 0x1c4c <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1bce:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd0:	78 85       	ldd	r23, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	57 e4       	ldi	r21, 0x47	; 71
    1bde:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	4c f5       	brge	.+82     	; 0x1c38 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e2       	ldi	r20, 0x20	; 32
    1bf4:	51 e4       	ldi	r21, 0x41	; 65
    1bf6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
    1c0e:	0f c0       	rjmp	.+30     	; 0x1c2e <CLCD_voidInit+0xc6>
    1c10:	88 ec       	ldi	r24, 0xC8	; 200
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9c 83       	std	Y+4, r25	; 0x04
    1c16:	8b 83       	std	Y+3, r24	; 0x03
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <CLCD_voidInit+0xb4>
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	69 f7       	brne	.-38     	; 0x1c10 <CLCD_voidInit+0xa8>
    1c36:	14 c0       	rjmp	.+40     	; 0x1c60 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c38:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3a:	78 85       	ldd	r23, Y+8	; 0x08
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <CLCD_voidInit+0xf0>
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSend8BitCommand(ClEAR_LCD);

#elif CLCD_MODE == CLCD_4BIT_MODE

	/*Send command to set for 4 bit mode */
	CLCD_voidSend4BitCommand(CLCD_4BIT_MODE );
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSend4BitCommand>

	/* Function set command control lines and font size */
	CLCD_voidSend4BitCommand(CLCD_FUNC_SET);
    1c66:	88 e2       	ldi	r24, 0x28	; 40
    1c68:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSend4BitCommand>

	/* Display on oFF control */
	CLCD_voidSend4BitCommand(CLCD_DISPLAY_CTRL);
    1c6c:	8c e0       	ldi	r24, 0x0C	; 12
    1c6e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSend4BitCommand>

	/* Clear Display  */
	CLCD_voidSend4BitCommand(ClEAR_LCD);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSend4BitCommand>

#endif
}
    1c78:	2e 96       	adiw	r28, 0x0e	; 14
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <CLCD_voidSendString>:


void CLCD_voidSendString(const char* Copy_pcString){
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <CLCD_voidSendString+0x6>
    1c90:	0f 92       	push	r0
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	9b 83       	std	Y+3, r25	; 0x03
    1c98:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t Local_u8Iterator = 0;
    1c9a:	19 82       	std	Y+1, r1	; 0x01
    1c9c:	0e c0       	rjmp	.+28     	; 0x1cba <CLCD_voidSendString+0x30>

	while(Copy_pcString[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Iterator]);
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca8:	fc 01       	movw	r30, r24
    1caa:	e2 0f       	add	r30, r18
    1cac:	f3 1f       	adc	r31, r19
    1cae:	80 81       	ld	r24, Z
    1cb0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <CLCD_voidSendData>

		Local_u8Iterator++;
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	8f 5f       	subi	r24, 0xFF	; 255
    1cb8:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char* Copy_pcString){

	uint8_t Local_u8Iterator = 0;

	while(Copy_pcString[Local_u8Iterator] != '\0')
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e2 0f       	add	r30, r18
    1cc8:	f3 1f       	adc	r31, r19
    1cca:	80 81       	ld	r24, Z
    1ccc:	88 23       	and	r24, r24
    1cce:	39 f7       	brne	.-50     	; 0x1c9e <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[Local_u8Iterator]);

		Local_u8Iterator++;
	}

}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(uint32  Copy_u8Data)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	a4 97       	sbiw	r28, 0x24	; 36
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	9c a3       	std	Y+36, r25	; 0x24
    1cf2:	8b a3       	std	Y+35, r24	; 0x23
	 sint8_t Local_Index ;
	 uint8_t Local_Iterator = 0;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
    1cf6:	1d c0       	rjmp	.+58     	; 0x1d32 <CLCD_voidSendNumber+0x56>


	while (Copy_u8Data > 0) {

		// storing remainder in digit array
		arru8Digit[Local_Iterator] = Copy_u8Data % 10;
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	e8 2f       	mov	r30, r24
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	8b a1       	ldd	r24, Y+35	; 0x23
    1d00:	9c a1       	ldd	r25, Y+36	; 0x24
    1d02:	2a e0       	ldi	r18, 0x0A	; 10
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	b9 01       	movw	r22, r18
    1d08:	0e 94 25 18 	call	0x304a	; 0x304a <__udivmodhi4>
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	ce 01       	movw	r24, r28
    1d10:	03 96       	adiw	r24, 0x03	; 3
    1d12:	e8 0f       	add	r30, r24
    1d14:	f9 1f       	adc	r31, r25
    1d16:	20 83       	st	Z, r18
		Copy_u8Data =  Copy_u8Data / 10;
    1d18:	8b a1       	ldd	r24, Y+35	; 0x23
    1d1a:	9c a1       	ldd	r25, Y+36	; 0x24
    1d1c:	2a e0       	ldi	r18, 0x0A	; 10
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	b9 01       	movw	r22, r18
    1d22:	0e 94 25 18 	call	0x304a	; 0x304a <__udivmodhi4>
    1d26:	cb 01       	movw	r24, r22
    1d28:	9c a3       	std	Y+36, r25	; 0x24
    1d2a:	8b a3       	std	Y+35, r24	; 0x23
		Local_Iterator++;
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	8f 5f       	subi	r24, 0xFF	; 255
    1d30:	89 83       	std	Y+1, r24	; 0x01
	 uint8_t Local_Iterator = 0;
	char arru8Digit [32];



	while (Copy_u8Data > 0) {
    1d32:	8b a1       	ldd	r24, Y+35	; 0x23
    1d34:	9c a1       	ldd	r25, Y+36	; 0x24
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	f9 f6       	brne	.-66     	; 0x1cf8 <CLCD_voidSendNumber+0x1c>
		// storing remainder in digit array
		arru8Digit[Local_Iterator] = Copy_u8Data % 10;
		Copy_u8Data =  Copy_u8Data / 10;
		Local_Iterator++;
	}
	for(Local_Index = Local_Iterator-1 ; Local_Index >= 0 ; Local_Index--)
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	81 50       	subi	r24, 0x01	; 1
    1d3e:	8a 83       	std	Y+2, r24	; 0x02
    1d40:	11 c0       	rjmp	.+34     	; 0x1d64 <CLCD_voidSendNumber+0x88>
	{
		CLCD_voidSendData(arru8Digit[Local_Index]+ '0') ;
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	28 2f       	mov	r18, r24
    1d46:	33 27       	eor	r19, r19
    1d48:	27 fd       	sbrc	r18, 7
    1d4a:	30 95       	com	r19
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	03 96       	adiw	r24, 0x03	; 3
    1d50:	fc 01       	movw	r30, r24
    1d52:	e2 0f       	add	r30, r18
    1d54:	f3 1f       	adc	r31, r19
    1d56:	80 81       	ld	r24, Z
    1d58:	80 5d       	subi	r24, 0xD0	; 208
    1d5a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <CLCD_voidSendData>
		// storing remainder in digit array
		arru8Digit[Local_Iterator] = Copy_u8Data % 10;
		Copy_u8Data =  Copy_u8Data / 10;
		Local_Iterator++;
	}
	for(Local_Index = Local_Iterator-1 ; Local_Index >= 0 ; Local_Index--)
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	81 50       	subi	r24, 0x01	; 1
    1d62:	8a 83       	std	Y+2, r24	; 0x02
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	88 23       	and	r24, r24
    1d68:	64 f7       	brge	.-40     	; 0x1d42 <CLCD_voidSendNumber+0x66>
	{
		CLCD_voidSendData(arru8Digit[Local_Index]+ '0') ;
	}


}
    1d6a:	a4 96       	adiw	r28, 0x24	; 36
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8_t Copy_u8XPos,uint8_t Copy_u8YPos){
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <CLCD_voidGoToXY+0x6>
    1d82:	0f 92       	push	r0
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	8a 83       	std	Y+2, r24	; 0x02
    1d8a:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t Local_u8Address;
	if(Copy_u8XPos == 0)
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	88 23       	and	r24, r24
    1d90:	19 f4       	brne	.+6      	; 0x1d98 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	06 c0       	rjmp	.+12     	; 0x1da4 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos == 1)
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	19 f4       	brne	.+6      	; 0x1da4 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8YPos + 0x40;
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	80 5c       	subi	r24, 0xC0	; 192
    1da2:	89 83       	std	Y+1, r24	; 0x01
	 ************************************************
	 * 1 * adresss               ********************
	 ************************************************
	 */

	CLCD_voidSendCmd(Local_u8Address+128);
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	80 58       	subi	r24, 0x80	; 128
    1da8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CLCD_voidSendCmd>
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <DIO_SetPinDirection>:
* @endcode
***************************************************************/


ErrorState_t DIO_SetPinDirection(DioPort_t Port,DioPin_t Pin, DioMode_t Mode)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	2a 97       	sbiw	r28, 0x0a	; 10
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
    1dce:	6b 83       	std	Y+3, r22	; 0x03
    1dd0:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState_t Local_u8ErrorState = DONE;
    1dd2:	8a e0       	ldi	r24, 0x0A	; 10
    1dd4:	89 83       	std	Y+1, r24	; 0x01

	if(Pin<= PIN7)
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	88 30       	cpi	r24, 0x08	; 8
    1dda:	08 f0       	brcs	.+2      	; 0x1dde <DIO_SetPinDirection+0x26>
    1ddc:	d5 c1       	rjmp	.+938    	; 0x2188 <DIO_SetPinDirection+0x3d0>
	{
		if(Mode==DIO_INPUT)
    1dde:	8c 81       	ldd	r24, Y+4	; 0x04
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <DIO_SetPinDirection+0x2e>
    1de4:	7e c0       	rjmp	.+252    	; 0x1ee2 <DIO_SetPinDirection+0x12a>
		{
			switch(Port)
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3a 87       	std	Y+10, r19	; 0x0a
    1dee:	29 87       	std	Y+9, r18	; 0x09
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	69 f1       	breq	.+90     	; 0x1e54 <DIO_SetPinDirection+0x9c>
    1dfa:	29 85       	ldd	r18, Y+9	; 0x09
    1dfc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <DIO_SetPinDirection+0x56>
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	69 f0       	breq	.+26     	; 0x1e26 <DIO_SetPinDirection+0x6e>
    1e0c:	68 c0       	rjmp	.+208    	; 0x1ede <DIO_SetPinDirection+0x126>
    1e0e:	29 85       	ldd	r18, Y+9	; 0x09
    1e10:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	31 05       	cpc	r19, r1
    1e16:	a9 f1       	breq	.+106    	; 0x1e82 <DIO_SetPinDirection+0xca>
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	83 30       	cpi	r24, 0x03	; 3
    1e1e:	91 05       	cpc	r25, r1
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <DIO_SetPinDirection+0x6c>
    1e22:	46 c0       	rjmp	.+140    	; 0x1eb0 <DIO_SetPinDirection+0xf8>
    1e24:	5c c0       	rjmp	.+184    	; 0x1ede <DIO_SetPinDirection+0x126>
			{
			case PORTA: CLR_BIT( PORTA_BASE_PTR->DDR,Pin); break;
    1e26:	a9 e3       	ldi	r26, 0x39	; 57
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e9 e3       	ldi	r30, 0x39	; 57
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	81 81       	ldd	r24, Z+1	; 0x01
    1e30:	48 2f       	mov	r20, r24
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <DIO_SetPinDirection+0x8c>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <DIO_SetPinDirection+0x88>
    1e48:	80 95       	com	r24
    1e4a:	84 23       	and	r24, r20
    1e4c:	11 96       	adiw	r26, 0x01	; 1
    1e4e:	8c 93       	st	X, r24
    1e50:	11 97       	sbiw	r26, 0x01	; 1
    1e52:	47 c0       	rjmp	.+142    	; 0x1ee2 <DIO_SetPinDirection+0x12a>
			case PORTB: CLR_BIT( PORTB_BASE_PTR->DDR,Pin); break;
    1e54:	a6 e3       	ldi	r26, 0x36	; 54
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e6 e3       	ldi	r30, 0x36	; 54
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	81 81       	ldd	r24, Z+1	; 0x01
    1e5e:	48 2f       	mov	r20, r24
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 2e       	mov	r0, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <DIO_SetPinDirection+0xba>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <DIO_SetPinDirection+0xb6>
    1e76:	80 95       	com	r24
    1e78:	84 23       	and	r24, r20
    1e7a:	11 96       	adiw	r26, 0x01	; 1
    1e7c:	8c 93       	st	X, r24
    1e7e:	11 97       	sbiw	r26, 0x01	; 1
    1e80:	30 c0       	rjmp	.+96     	; 0x1ee2 <DIO_SetPinDirection+0x12a>
			case PORTC: CLR_BIT( PORTC_BASE_PTR->DDR,Pin); break;
    1e82:	a3 e3       	ldi	r26, 0x33	; 51
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e3 e3       	ldi	r30, 0x33	; 51
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	81 81       	ldd	r24, Z+1	; 0x01
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <DIO_SetPinDirection+0xe8>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <DIO_SetPinDirection+0xe4>
    1ea4:	80 95       	com	r24
    1ea6:	84 23       	and	r24, r20
    1ea8:	11 96       	adiw	r26, 0x01	; 1
    1eaa:	8c 93       	st	X, r24
    1eac:	11 97       	sbiw	r26, 0x01	; 1
    1eae:	19 c0       	rjmp	.+50     	; 0x1ee2 <DIO_SetPinDirection+0x12a>
			case PORTD: CLR_BIT( PORTD_BASE_PTR->DDR,Pin); break;
    1eb0:	a0 e3       	ldi	r26, 0x30	; 48
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e0 e3       	ldi	r30, 0x30	; 48
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	81 81       	ldd	r24, Z+1	; 0x01
    1eba:	48 2f       	mov	r20, r24
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 2e       	mov	r0, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <DIO_SetPinDirection+0x116>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <DIO_SetPinDirection+0x112>
    1ed2:	80 95       	com	r24
    1ed4:	84 23       	and	r24, r20
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	8c 93       	st	X, r24
    1eda:	11 97       	sbiw	r26, 0x01	; 1
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <DIO_SetPinDirection+0x12a>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		if(Mode==DIO_INPUT_PULLUP)
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	82 30       	cpi	r24, 0x02	; 2
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <DIO_SetPinDirection+0x132>
    1ee8:	cd c0       	rjmp	.+410    	; 0x2084 <DIO_SetPinDirection+0x2cc>
		{
			switch(Port)
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	38 87       	std	Y+8, r19	; 0x08
    1ef2:	2f 83       	std	Y+7, r18	; 0x07
    1ef4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef6:	98 85       	ldd	r25, Y+8	; 0x08
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	91 05       	cpc	r25, r1
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <DIO_SetPinDirection+0x148>
    1efe:	41 c0       	rjmp	.+130    	; 0x1f82 <DIO_SetPinDirection+0x1ca>
    1f00:	2f 81       	ldd	r18, Y+7	; 0x07
    1f02:	38 85       	ldd	r19, Y+8	; 0x08
    1f04:	22 30       	cpi	r18, 0x02	; 2
    1f06:	31 05       	cpc	r19, r1
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <DIO_SetPinDirection+0x15c>
    1f0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f0c:	98 85       	ldd	r25, Y+8	; 0x08
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	71 f0       	breq	.+28     	; 0x1f2e <DIO_SetPinDirection+0x176>
    1f12:	b5 c0       	rjmp	.+362    	; 0x207e <DIO_SetPinDirection+0x2c6>
    1f14:	2f 81       	ldd	r18, Y+7	; 0x07
    1f16:	38 85       	ldd	r19, Y+8	; 0x08
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <DIO_SetPinDirection+0x168>
    1f1e:	5b c0       	rjmp	.+182    	; 0x1fd6 <DIO_SetPinDirection+0x21e>
    1f20:	8f 81       	ldd	r24, Y+7	; 0x07
    1f22:	98 85       	ldd	r25, Y+8	; 0x08
    1f24:	83 30       	cpi	r24, 0x03	; 3
    1f26:	91 05       	cpc	r25, r1
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <DIO_SetPinDirection+0x174>
    1f2a:	7f c0       	rjmp	.+254    	; 0x202a <DIO_SetPinDirection+0x272>
    1f2c:	a8 c0       	rjmp	.+336    	; 0x207e <DIO_SetPinDirection+0x2c6>
			{
			case PORTA: CLR_BIT( PORTA_BASE_PTR->DDR,Pin);SET_BIT( PORTA_BASE_PTR->PORT,Pin); break;
    1f2e:	a9 e3       	ldi	r26, 0x39	; 57
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e9 e3       	ldi	r30, 0x39	; 57
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	81 81       	ldd	r24, Z+1	; 0x01
    1f38:	48 2f       	mov	r20, r24
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <DIO_SetPinDirection+0x192>
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	2a 95       	dec	r18
    1f4c:	e2 f7       	brpl	.-8      	; 0x1f46 <DIO_SetPinDirection+0x18e>
    1f4e:	80 95       	com	r24
    1f50:	84 23       	and	r24, r20
    1f52:	11 96       	adiw	r26, 0x01	; 1
    1f54:	8c 93       	st	X, r24
    1f56:	a9 e3       	ldi	r26, 0x39	; 57
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e9 e3       	ldi	r30, 0x39	; 57
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	82 81       	ldd	r24, Z+2	; 0x02
    1f60:	48 2f       	mov	r20, r24
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 2e       	mov	r0, r18
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <DIO_SetPinDirection+0x1bc>
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	0a 94       	dec	r0
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <DIO_SetPinDirection+0x1b8>
    1f78:	84 2b       	or	r24, r20
    1f7a:	12 96       	adiw	r26, 0x02	; 2
    1f7c:	8c 93       	st	X, r24
    1f7e:	12 97       	sbiw	r26, 0x02	; 2
    1f80:	04 c1       	rjmp	.+520    	; 0x218a <DIO_SetPinDirection+0x3d2>
			case PORTB: CLR_BIT( PORTB_BASE_PTR->DDR,Pin);SET_BIT( PORTB_BASE_PTR->PORT,Pin); break;
    1f82:	a6 e3       	ldi	r26, 0x36	; 54
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e6 e3       	ldi	r30, 0x36	; 54
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	81 81       	ldd	r24, Z+1	; 0x01
    1f8c:	48 2f       	mov	r20, r24
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <DIO_SetPinDirection+0x1e6>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	2a 95       	dec	r18
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <DIO_SetPinDirection+0x1e2>
    1fa2:	80 95       	com	r24
    1fa4:	84 23       	and	r24, r20
    1fa6:	11 96       	adiw	r26, 0x01	; 1
    1fa8:	8c 93       	st	X, r24
    1faa:	a6 e3       	ldi	r26, 0x36	; 54
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e6 e3       	ldi	r30, 0x36	; 54
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	48 2f       	mov	r20, r24
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	02 2e       	mov	r0, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <DIO_SetPinDirection+0x210>
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	0a 94       	dec	r0
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <DIO_SetPinDirection+0x20c>
    1fcc:	84 2b       	or	r24, r20
    1fce:	12 96       	adiw	r26, 0x02	; 2
    1fd0:	8c 93       	st	X, r24
    1fd2:	12 97       	sbiw	r26, 0x02	; 2
    1fd4:	da c0       	rjmp	.+436    	; 0x218a <DIO_SetPinDirection+0x3d2>
			case PORTC: CLR_BIT( PORTC_BASE_PTR->DDR,Pin);SET_BIT( PORTC_BASE_PTR->PORT,Pin); break;
    1fd6:	a3 e3       	ldi	r26, 0x33	; 51
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e3 e3       	ldi	r30, 0x33	; 51
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	81 81       	ldd	r24, Z+1	; 0x01
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <DIO_SetPinDirection+0x23a>
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	2a 95       	dec	r18
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <DIO_SetPinDirection+0x236>
    1ff6:	80 95       	com	r24
    1ff8:	84 23       	and	r24, r20
    1ffa:	11 96       	adiw	r26, 0x01	; 1
    1ffc:	8c 93       	st	X, r24
    1ffe:	a3 e3       	ldi	r26, 0x33	; 51
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e3 e3       	ldi	r30, 0x33	; 51
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	48 2f       	mov	r20, r24
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 2e       	mov	r0, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <DIO_SetPinDirection+0x264>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	0a 94       	dec	r0
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <DIO_SetPinDirection+0x260>
    2020:	84 2b       	or	r24, r20
    2022:	12 96       	adiw	r26, 0x02	; 2
    2024:	8c 93       	st	X, r24
    2026:	12 97       	sbiw	r26, 0x02	; 2
    2028:	b0 c0       	rjmp	.+352    	; 0x218a <DIO_SetPinDirection+0x3d2>
			case PORTD: CLR_BIT( PORTD_BASE_PTR->DDR,Pin);SET_BIT( PORTD_BASE_PTR->PORT,Pin); break;
    202a:	a0 e3       	ldi	r26, 0x30	; 48
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e0 e3       	ldi	r30, 0x30	; 48
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	81 81       	ldd	r24, Z+1	; 0x01
    2034:	48 2f       	mov	r20, r24
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <DIO_SetPinDirection+0x28e>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	2a 95       	dec	r18
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <DIO_SetPinDirection+0x28a>
    204a:	80 95       	com	r24
    204c:	84 23       	and	r24, r20
    204e:	11 96       	adiw	r26, 0x01	; 1
    2050:	8c 93       	st	X, r24
    2052:	a0 e3       	ldi	r26, 0x30	; 48
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e0 e3       	ldi	r30, 0x30	; 48
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	48 2f       	mov	r20, r24
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	02 2e       	mov	r0, r18
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <DIO_SetPinDirection+0x2b8>
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	0a 94       	dec	r0
    2072:	e2 f7       	brpl	.-8      	; 0x206c <DIO_SetPinDirection+0x2b4>
    2074:	84 2b       	or	r24, r20
    2076:	12 96       	adiw	r26, 0x02	; 2
    2078:	8c 93       	st	X, r24
    207a:	12 97       	sbiw	r26, 0x02	; 2
    207c:	86 c0       	rjmp	.+268    	; 0x218a <DIO_SetPinDirection+0x3d2>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	83 c0       	rjmp	.+262    	; 0x218a <DIO_SetPinDirection+0x3d2>
			}
		}
		else if (Mode==DIO_OUTPUT)
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	88 23       	and	r24, r24
    2088:	09 f0       	breq	.+2      	; 0x208c <DIO_SetPinDirection+0x2d4>
    208a:	7b c0       	rjmp	.+246    	; 0x2182 <DIO_SetPinDirection+0x3ca>
		{
			switch(Port)
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	3e 83       	std	Y+6, r19	; 0x06
    2094:	2d 83       	std	Y+5, r18	; 0x05
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	91 05       	cpc	r25, r1
    209e:	61 f1       	breq	.+88     	; 0x20f8 <DIO_SetPinDirection+0x340>
    20a0:	2d 81       	ldd	r18, Y+5	; 0x05
    20a2:	3e 81       	ldd	r19, Y+6	; 0x06
    20a4:	22 30       	cpi	r18, 0x02	; 2
    20a6:	31 05       	cpc	r19, r1
    20a8:	2c f4       	brge	.+10     	; 0x20b4 <DIO_SetPinDirection+0x2fc>
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	69 f0       	breq	.+26     	; 0x20cc <DIO_SetPinDirection+0x314>
    20b2:	64 c0       	rjmp	.+200    	; 0x217c <DIO_SetPinDirection+0x3c4>
    20b4:	2d 81       	ldd	r18, Y+5	; 0x05
    20b6:	3e 81       	ldd	r19, Y+6	; 0x06
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	99 f1       	breq	.+102    	; 0x2124 <DIO_SetPinDirection+0x36c>
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	83 30       	cpi	r24, 0x03	; 3
    20c4:	91 05       	cpc	r25, r1
    20c6:	09 f4       	brne	.+2      	; 0x20ca <DIO_SetPinDirection+0x312>
    20c8:	43 c0       	rjmp	.+134    	; 0x2150 <DIO_SetPinDirection+0x398>
    20ca:	58 c0       	rjmp	.+176    	; 0x217c <DIO_SetPinDirection+0x3c4>
			{
			case PORTA: SET_BIT( PORTA_BASE_PTR->DDR,Pin); break;
    20cc:	a9 e3       	ldi	r26, 0x39	; 57
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e9 e3       	ldi	r30, 0x39	; 57
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	81 81       	ldd	r24, Z+1	; 0x01
    20d6:	48 2f       	mov	r20, r24
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	02 2e       	mov	r0, r18
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <DIO_SetPinDirection+0x332>
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	0a 94       	dec	r0
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <DIO_SetPinDirection+0x32e>
    20ee:	84 2b       	or	r24, r20
    20f0:	11 96       	adiw	r26, 0x01	; 1
    20f2:	8c 93       	st	X, r24
    20f4:	11 97       	sbiw	r26, 0x01	; 1
    20f6:	49 c0       	rjmp	.+146    	; 0x218a <DIO_SetPinDirection+0x3d2>
			case PORTB: SET_BIT( PORTB_BASE_PTR->DDR,Pin); break;
    20f8:	a6 e3       	ldi	r26, 0x36	; 54
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e6 e3       	ldi	r30, 0x36	; 54
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	81 81       	ldd	r24, Z+1	; 0x01
    2102:	48 2f       	mov	r20, r24
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 2e       	mov	r0, r18
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <DIO_SetPinDirection+0x35e>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <DIO_SetPinDirection+0x35a>
    211a:	84 2b       	or	r24, r20
    211c:	11 96       	adiw	r26, 0x01	; 1
    211e:	8c 93       	st	X, r24
    2120:	11 97       	sbiw	r26, 0x01	; 1
    2122:	33 c0       	rjmp	.+102    	; 0x218a <DIO_SetPinDirection+0x3d2>
			case PORTC: SET_BIT( PORTC_BASE_PTR->DDR,Pin); break;
    2124:	a3 e3       	ldi	r26, 0x33	; 51
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e3 e3       	ldi	r30, 0x33	; 51
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	81 81       	ldd	r24, Z+1	; 0x01
    212e:	48 2f       	mov	r20, r24
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	02 2e       	mov	r0, r18
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <DIO_SetPinDirection+0x38a>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	0a 94       	dec	r0
    2144:	e2 f7       	brpl	.-8      	; 0x213e <DIO_SetPinDirection+0x386>
    2146:	84 2b       	or	r24, r20
    2148:	11 96       	adiw	r26, 0x01	; 1
    214a:	8c 93       	st	X, r24
    214c:	11 97       	sbiw	r26, 0x01	; 1
    214e:	1d c0       	rjmp	.+58     	; 0x218a <DIO_SetPinDirection+0x3d2>
			case PORTD: SET_BIT( PORTD_BASE_PTR->DDR,Pin); break;
    2150:	a0 e3       	ldi	r26, 0x30	; 48
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e0 e3       	ldi	r30, 0x30	; 48
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	81 81       	ldd	r24, Z+1	; 0x01
    215a:	48 2f       	mov	r20, r24
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	02 2e       	mov	r0, r18
    2168:	02 c0       	rjmp	.+4      	; 0x216e <DIO_SetPinDirection+0x3b6>
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	0a 94       	dec	r0
    2170:	e2 f7       	brpl	.-8      	; 0x216a <DIO_SetPinDirection+0x3b2>
    2172:	84 2b       	or	r24, r20
    2174:	11 96       	adiw	r26, 0x01	; 1
    2176:	8c 93       	st	X, r24
    2178:	11 97       	sbiw	r26, 0x01	; 1
    217a:	07 c0       	rjmp	.+14     	; 0x218a <DIO_SetPinDirection+0x3d2>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	04 c0       	rjmp	.+8      	; 0x218a <DIO_SetPinDirection+0x3d2>
			}
		}
		else
		{
			Local_u8ErrorState = MODE_NOT_AVALIABLE;
    2182:	83 e0       	ldi	r24, 0x03	; 3
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	01 c0       	rjmp	.+2      	; 0x218a <DIO_SetPinDirection+0x3d2>
		}
	}
	else
	{
		Local_u8ErrorState = PIN_NOT_FOUND;
    2188:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    218a:	89 81       	ldd	r24, Y+1	; 0x01
}
    218c:	2a 96       	adiw	r28, 0x0a	; 10
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <DIO_SetPortDirection>:
* DIO_SetPortDirection(PORTA,15);
* @endcode
***************************************************************************/

ErrorState_t DIO_SetPortDirection(DioPort_t Port, uint8_t u8Value)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <DIO_SetPortDirection+0x6>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <DIO_SetPortDirection+0x8>
    21a6:	0f 92       	push	r0
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	8a 83       	std	Y+2, r24	; 0x02
    21ae:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_u8ErrorState = DONE;
    21b0:	8a e0       	ldi	r24, 0x0A	; 10
    21b2:	89 83       	std	Y+1, r24	; 0x01

	switch(Port)
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	3d 83       	std	Y+5, r19	; 0x05
    21bc:	2c 83       	std	Y+4, r18	; 0x04
    21be:	8c 81       	ldd	r24, Y+4	; 0x04
    21c0:	9d 81       	ldd	r25, Y+5	; 0x05
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	91 05       	cpc	r25, r1
    21c6:	d1 f0       	breq	.+52     	; 0x21fc <DIO_SetPortDirection+0x5e>
    21c8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ca:	3d 81       	ldd	r19, Y+5	; 0x05
    21cc:	22 30       	cpi	r18, 0x02	; 2
    21ce:	31 05       	cpc	r19, r1
    21d0:	2c f4       	brge	.+10     	; 0x21dc <DIO_SetPortDirection+0x3e>
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	9d 81       	ldd	r25, Y+5	; 0x05
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	61 f0       	breq	.+24     	; 0x21f2 <DIO_SetPortDirection+0x54>
    21da:	1f c0       	rjmp	.+62     	; 0x221a <DIO_SetPortDirection+0x7c>
    21dc:	2c 81       	ldd	r18, Y+4	; 0x04
    21de:	3d 81       	ldd	r19, Y+5	; 0x05
    21e0:	22 30       	cpi	r18, 0x02	; 2
    21e2:	31 05       	cpc	r19, r1
    21e4:	81 f0       	breq	.+32     	; 0x2206 <DIO_SetPortDirection+0x68>
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	91 05       	cpc	r25, r1
    21ee:	81 f0       	breq	.+32     	; 0x2210 <DIO_SetPortDirection+0x72>
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <DIO_SetPortDirection+0x7c>
	{
	case PORTA : PORTA_BASE_PTR->DDR = u8Value; break;
    21f2:	e9 e3       	ldi	r30, 0x39	; 57
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	81 83       	std	Z+1, r24	; 0x01
    21fa:	11 c0       	rjmp	.+34     	; 0x221e <DIO_SetPortDirection+0x80>
	case PORTB : PORTB_BASE_PTR->DDR = u8Value; break;
    21fc:	e6 e3       	ldi	r30, 0x36	; 54
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	81 83       	std	Z+1, r24	; 0x01
    2204:	0c c0       	rjmp	.+24     	; 0x221e <DIO_SetPortDirection+0x80>
	case PORTC : PORTC_BASE_PTR->DDR = u8Value; break;
    2206:	e3 e3       	ldi	r30, 0x33	; 51
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	81 83       	std	Z+1, r24	; 0x01
    220e:	07 c0       	rjmp	.+14     	; 0x221e <DIO_SetPortDirection+0x80>
	case PORTD : PORTD_BASE_PTR->DDR = u8Value; break;
    2210:	e0 e3       	ldi	r30, 0x30	; 48
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	81 83       	std	Z+1, r24	; 0x01
    2218:	02 c0       	rjmp	.+4      	; 0x221e <DIO_SetPortDirection+0x80>
	default: Local_u8ErrorState = PORT_NOT_FOUND;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    221e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <DIO_SetPortValue>:
* @endcode
***************************************************************************/


ErrorState_t DIO_SetPortValue(DioPort_t Port, uint8_t u8Value)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	00 d0       	rcall	.+0      	; 0x2236 <DIO_SetPortValue+0x6>
    2236:	00 d0       	rcall	.+0      	; 0x2238 <DIO_SetPortValue+0x8>
    2238:	0f 92       	push	r0
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	8a 83       	std	Y+2, r24	; 0x02
    2240:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_u8ErrorState = DONE;
    2242:	8a e0       	ldi	r24, 0x0A	; 10
    2244:	89 83       	std	Y+1, r24	; 0x01

	switch(Port)
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	3d 83       	std	Y+5, r19	; 0x05
    224e:	2c 83       	std	Y+4, r18	; 0x04
    2250:	8c 81       	ldd	r24, Y+4	; 0x04
    2252:	9d 81       	ldd	r25, Y+5	; 0x05
    2254:	81 30       	cpi	r24, 0x01	; 1
    2256:	91 05       	cpc	r25, r1
    2258:	d1 f0       	breq	.+52     	; 0x228e <DIO_SetPortValue+0x5e>
    225a:	2c 81       	ldd	r18, Y+4	; 0x04
    225c:	3d 81       	ldd	r19, Y+5	; 0x05
    225e:	22 30       	cpi	r18, 0x02	; 2
    2260:	31 05       	cpc	r19, r1
    2262:	2c f4       	brge	.+10     	; 0x226e <DIO_SetPortValue+0x3e>
    2264:	8c 81       	ldd	r24, Y+4	; 0x04
    2266:	9d 81       	ldd	r25, Y+5	; 0x05
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	61 f0       	breq	.+24     	; 0x2284 <DIO_SetPortValue+0x54>
    226c:	1f c0       	rjmp	.+62     	; 0x22ac <DIO_SetPortValue+0x7c>
    226e:	2c 81       	ldd	r18, Y+4	; 0x04
    2270:	3d 81       	ldd	r19, Y+5	; 0x05
    2272:	22 30       	cpi	r18, 0x02	; 2
    2274:	31 05       	cpc	r19, r1
    2276:	81 f0       	breq	.+32     	; 0x2298 <DIO_SetPortValue+0x68>
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	9d 81       	ldd	r25, Y+5	; 0x05
    227c:	83 30       	cpi	r24, 0x03	; 3
    227e:	91 05       	cpc	r25, r1
    2280:	81 f0       	breq	.+32     	; 0x22a2 <DIO_SetPortValue+0x72>
    2282:	14 c0       	rjmp	.+40     	; 0x22ac <DIO_SetPortValue+0x7c>
	{
	case PORTA : PORTA_BASE_PTR->PORT = u8Value; break;
    2284:	e9 e3       	ldi	r30, 0x39	; 57
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	82 83       	std	Z+2, r24	; 0x02
    228c:	11 c0       	rjmp	.+34     	; 0x22b0 <DIO_SetPortValue+0x80>
	case PORTB : PORTB_BASE_PTR->PORT = u8Value; break;
    228e:	e6 e3       	ldi	r30, 0x36	; 54
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	82 83       	std	Z+2, r24	; 0x02
    2296:	0c c0       	rjmp	.+24     	; 0x22b0 <DIO_SetPortValue+0x80>
	case PORTC : PORTC_BASE_PTR->PORT = u8Value; break;
    2298:	e3 e3       	ldi	r30, 0x33	; 51
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	82 83       	std	Z+2, r24	; 0x02
    22a0:	07 c0       	rjmp	.+14     	; 0x22b0 <DIO_SetPortValue+0x80>
	case PORTD : PORTD_BASE_PTR->PORT = u8Value; break;
    22a2:	e0 e3       	ldi	r30, 0x30	; 48
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	82 83       	std	Z+2, r24	; 0x02
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <DIO_SetPortValue+0x80>
	default: Local_u8ErrorState= PORT_NOT_FOUND;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <DIO_SetPinValue>:
* DIO_SetPinValue(PORTB, PIN1 , HIGH);
* @endcode
**********************************************************************/

ErrorState_t DIO_SetPinValue(DioPort_t Port,DioPin_t Pin, DioState_t State)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	28 97       	sbiw	r28, 0x08	; 8
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	6b 83       	std	Y+3, r22	; 0x03
    22da:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState_t Local_u8ErrorState = DONE;
    22dc:	8a e0       	ldi	r24, 0x0A	; 10
    22de:	89 83       	std	Y+1, r24	; 0x01

	if(Pin<= PIN7)
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	88 30       	cpi	r24, 0x08	; 8
    22e4:	08 f0       	brcs	.+2      	; 0x22e8 <DIO_SetPinValue+0x26>
    22e6:	05 c1       	rjmp	.+522    	; 0x24f2 <DIO_SetPinValue+0x230>
	{
		if(State==DIO_LOW)
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	88 23       	and	r24, r24
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <DIO_SetPinValue+0x2e>
    22ee:	7f c0       	rjmp	.+254    	; 0x23ee <DIO_SetPinValue+0x12c>
		{
			switch(Port)
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	38 87       	std	Y+8, r19	; 0x08
    22f8:	2f 83       	std	Y+7, r18	; 0x07
    22fa:	8f 81       	ldd	r24, Y+7	; 0x07
    22fc:	98 85       	ldd	r25, Y+8	; 0x08
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	91 05       	cpc	r25, r1
    2302:	69 f1       	breq	.+90     	; 0x235e <DIO_SetPinValue+0x9c>
    2304:	2f 81       	ldd	r18, Y+7	; 0x07
    2306:	38 85       	ldd	r19, Y+8	; 0x08
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	31 05       	cpc	r19, r1
    230c:	2c f4       	brge	.+10     	; 0x2318 <DIO_SetPinValue+0x56>
    230e:	8f 81       	ldd	r24, Y+7	; 0x07
    2310:	98 85       	ldd	r25, Y+8	; 0x08
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f0       	breq	.+26     	; 0x2330 <DIO_SetPinValue+0x6e>
    2316:	68 c0       	rjmp	.+208    	; 0x23e8 <DIO_SetPinValue+0x126>
    2318:	2f 81       	ldd	r18, Y+7	; 0x07
    231a:	38 85       	ldd	r19, Y+8	; 0x08
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	a9 f1       	breq	.+106    	; 0x238c <DIO_SetPinValue+0xca>
    2322:	8f 81       	ldd	r24, Y+7	; 0x07
    2324:	98 85       	ldd	r25, Y+8	; 0x08
    2326:	83 30       	cpi	r24, 0x03	; 3
    2328:	91 05       	cpc	r25, r1
    232a:	09 f4       	brne	.+2      	; 0x232e <DIO_SetPinValue+0x6c>
    232c:	46 c0       	rjmp	.+140    	; 0x23ba <DIO_SetPinValue+0xf8>
    232e:	5c c0       	rjmp	.+184    	; 0x23e8 <DIO_SetPinValue+0x126>
			{
			case PORTA: CLR_BIT(PORTA_BASE_PTR->PORT,Pin); break;
    2330:	a9 e3       	ldi	r26, 0x39	; 57
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e9 e3       	ldi	r30, 0x39	; 57
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	48 2f       	mov	r20, r24
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	02 2e       	mov	r0, r18
    2348:	02 c0       	rjmp	.+4      	; 0x234e <DIO_SetPinValue+0x8c>
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	0a 94       	dec	r0
    2350:	e2 f7       	brpl	.-8      	; 0x234a <DIO_SetPinValue+0x88>
    2352:	80 95       	com	r24
    2354:	84 23       	and	r24, r20
    2356:	12 96       	adiw	r26, 0x02	; 2
    2358:	8c 93       	st	X, r24
    235a:	12 97       	sbiw	r26, 0x02	; 2
    235c:	cb c0       	rjmp	.+406    	; 0x24f4 <DIO_SetPinValue+0x232>
			case PORTB: CLR_BIT(PORTB_BASE_PTR->PORT,Pin); break;
    235e:	a6 e3       	ldi	r26, 0x36	; 54
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e6 e3       	ldi	r30, 0x36	; 54
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	48 2f       	mov	r20, r24
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	02 2e       	mov	r0, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <DIO_SetPinValue+0xba>
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	0a 94       	dec	r0
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <DIO_SetPinValue+0xb6>
    2380:	80 95       	com	r24
    2382:	84 23       	and	r24, r20
    2384:	12 96       	adiw	r26, 0x02	; 2
    2386:	8c 93       	st	X, r24
    2388:	12 97       	sbiw	r26, 0x02	; 2
    238a:	b4 c0       	rjmp	.+360    	; 0x24f4 <DIO_SetPinValue+0x232>
			case PORTC: CLR_BIT(PORTC_BASE_PTR->PORT,Pin); break;
    238c:	a3 e3       	ldi	r26, 0x33	; 51
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e3 e3       	ldi	r30, 0x33	; 51
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	48 2f       	mov	r20, r24
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <DIO_SetPinValue+0xe8>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <DIO_SetPinValue+0xe4>
    23ae:	80 95       	com	r24
    23b0:	84 23       	and	r24, r20
    23b2:	12 96       	adiw	r26, 0x02	; 2
    23b4:	8c 93       	st	X, r24
    23b6:	12 97       	sbiw	r26, 0x02	; 2
    23b8:	9d c0       	rjmp	.+314    	; 0x24f4 <DIO_SetPinValue+0x232>
			case PORTD: CLR_BIT(PORTD_BASE_PTR->PORT,Pin); break;
    23ba:	a0 e3       	ldi	r26, 0x30	; 48
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e0 e3       	ldi	r30, 0x30	; 48
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	48 2f       	mov	r20, r24
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 2e       	mov	r0, r18
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <DIO_SetPinValue+0x116>
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	0a 94       	dec	r0
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <DIO_SetPinValue+0x112>
    23dc:	80 95       	com	r24
    23de:	84 23       	and	r24, r20
    23e0:	12 96       	adiw	r26, 0x02	; 2
    23e2:	8c 93       	st	X, r24
    23e4:	12 97       	sbiw	r26, 0x02	; 2
    23e6:	86 c0       	rjmp	.+268    	; 0x24f4 <DIO_SetPinValue+0x232>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	83 c0       	rjmp	.+262    	; 0x24f4 <DIO_SetPinValue+0x232>
			}
		}
		else if (State==DIO_HIGH)
    23ee:	8c 81       	ldd	r24, Y+4	; 0x04
    23f0:	81 30       	cpi	r24, 0x01	; 1
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <DIO_SetPinValue+0x134>
    23f4:	7b c0       	rjmp	.+246    	; 0x24ec <DIO_SetPinValue+0x22a>
		{
			switch(Port)
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	3e 83       	std	Y+6, r19	; 0x06
    23fe:	2d 83       	std	Y+5, r18	; 0x05
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	91 05       	cpc	r25, r1
    2408:	61 f1       	breq	.+88     	; 0x2462 <DIO_SetPinValue+0x1a0>
    240a:	2d 81       	ldd	r18, Y+5	; 0x05
    240c:	3e 81       	ldd	r19, Y+6	; 0x06
    240e:	22 30       	cpi	r18, 0x02	; 2
    2410:	31 05       	cpc	r19, r1
    2412:	2c f4       	brge	.+10     	; 0x241e <DIO_SetPinValue+0x15c>
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	69 f0       	breq	.+26     	; 0x2436 <DIO_SetPinValue+0x174>
    241c:	64 c0       	rjmp	.+200    	; 0x24e6 <DIO_SetPinValue+0x224>
    241e:	2d 81       	ldd	r18, Y+5	; 0x05
    2420:	3e 81       	ldd	r19, Y+6	; 0x06
    2422:	22 30       	cpi	r18, 0x02	; 2
    2424:	31 05       	cpc	r19, r1
    2426:	99 f1       	breq	.+102    	; 0x248e <DIO_SetPinValue+0x1cc>
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	83 30       	cpi	r24, 0x03	; 3
    242e:	91 05       	cpc	r25, r1
    2430:	09 f4       	brne	.+2      	; 0x2434 <DIO_SetPinValue+0x172>
    2432:	43 c0       	rjmp	.+134    	; 0x24ba <DIO_SetPinValue+0x1f8>
    2434:	58 c0       	rjmp	.+176    	; 0x24e6 <DIO_SetPinValue+0x224>
			{
			case PORTA: SET_BIT(PORTA_BASE_PTR->PORT,Pin); break;
    2436:	a9 e3       	ldi	r26, 0x39	; 57
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e9 e3       	ldi	r30, 0x39	; 57
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	82 81       	ldd	r24, Z+2	; 0x02
    2440:	48 2f       	mov	r20, r24
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	02 2e       	mov	r0, r18
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <DIO_SetPinValue+0x192>
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	0a 94       	dec	r0
    2456:	e2 f7       	brpl	.-8      	; 0x2450 <DIO_SetPinValue+0x18e>
    2458:	84 2b       	or	r24, r20
    245a:	12 96       	adiw	r26, 0x02	; 2
    245c:	8c 93       	st	X, r24
    245e:	12 97       	sbiw	r26, 0x02	; 2
    2460:	49 c0       	rjmp	.+146    	; 0x24f4 <DIO_SetPinValue+0x232>
			case PORTB: SET_BIT(PORTB_BASE_PTR->PORT,Pin); break;
    2462:	a6 e3       	ldi	r26, 0x36	; 54
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e6 e3       	ldi	r30, 0x36	; 54
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	48 2f       	mov	r20, r24
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	02 2e       	mov	r0, r18
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <DIO_SetPinValue+0x1be>
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	0a 94       	dec	r0
    2482:	e2 f7       	brpl	.-8      	; 0x247c <DIO_SetPinValue+0x1ba>
    2484:	84 2b       	or	r24, r20
    2486:	12 96       	adiw	r26, 0x02	; 2
    2488:	8c 93       	st	X, r24
    248a:	12 97       	sbiw	r26, 0x02	; 2
    248c:	33 c0       	rjmp	.+102    	; 0x24f4 <DIO_SetPinValue+0x232>
			case PORTC: SET_BIT(PORTC_BASE_PTR->PORT,Pin); break;
    248e:	a3 e3       	ldi	r26, 0x33	; 51
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e3 e3       	ldi	r30, 0x33	; 51
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	48 2f       	mov	r20, r24
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	02 2e       	mov	r0, r18
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <DIO_SetPinValue+0x1ea>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	0a 94       	dec	r0
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <DIO_SetPinValue+0x1e6>
    24b0:	84 2b       	or	r24, r20
    24b2:	12 96       	adiw	r26, 0x02	; 2
    24b4:	8c 93       	st	X, r24
    24b6:	12 97       	sbiw	r26, 0x02	; 2
    24b8:	1d c0       	rjmp	.+58     	; 0x24f4 <DIO_SetPinValue+0x232>
			case PORTD: SET_BIT(PORTD_BASE_PTR->PORT,Pin); break;
    24ba:	a0 e3       	ldi	r26, 0x30	; 48
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e0 e3       	ldi	r30, 0x30	; 48
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	48 2f       	mov	r20, r24
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	02 2e       	mov	r0, r18
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <DIO_SetPinValue+0x216>
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	0a 94       	dec	r0
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <DIO_SetPinValue+0x212>
    24dc:	84 2b       	or	r24, r20
    24de:	12 96       	adiw	r26, 0x02	; 2
    24e0:	8c 93       	st	X, r24
    24e2:	12 97       	sbiw	r26, 0x02	; 2
    24e4:	07 c0       	rjmp	.+14     	; 0x24f4 <DIO_SetPinValue+0x232>
			default: Local_u8ErrorState = PORT_NOT_FOUND; break;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <DIO_SetPinValue+0x232>
			}
		}
		else
		{
			Local_u8ErrorState = STATE_NOT_AVALIABLE;
    24ec:	84 e0       	ldi	r24, 0x04	; 4
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	01 c0       	rjmp	.+2      	; 0x24f4 <DIO_SetPinValue+0x232>
		}
	}
	else
	{
		Local_u8ErrorState = PIN_NOT_FOUND;
    24f2:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f6:	28 96       	adiw	r28, 0x08	; 8
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <DIO_TogglePinValue>:
* @endcode
***************************************************/


ErrorState_t DIO_TogglePinValue(DioPort_t Port,DioPin_t Pin)
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	00 d0       	rcall	.+0      	; 0x250e <DIO_TogglePinValue+0x6>
    250e:	00 d0       	rcall	.+0      	; 0x2510 <DIO_TogglePinValue+0x8>
    2510:	0f 92       	push	r0
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	8a 83       	std	Y+2, r24	; 0x02
    2518:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_u8ErrorState= DONE ;
    251a:	8a e0       	ldi	r24, 0x0A	; 10
    251c:	89 83       	std	Y+1, r24	; 0x01
	if(Pin<= PIN7)
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	88 30       	cpi	r24, 0x08	; 8
    2522:	08 f0       	brcs	.+2      	; 0x2526 <DIO_TogglePinValue+0x1e>
    2524:	7b c0       	rjmp	.+246    	; 0x261c <DIO_TogglePinValue+0x114>
	{
		switch(Port)
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	3d 83       	std	Y+5, r19	; 0x05
    252e:	2c 83       	std	Y+4, r18	; 0x04
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	9d 81       	ldd	r25, Y+5	; 0x05
    2534:	81 30       	cpi	r24, 0x01	; 1
    2536:	91 05       	cpc	r25, r1
    2538:	61 f1       	breq	.+88     	; 0x2592 <DIO_TogglePinValue+0x8a>
    253a:	2c 81       	ldd	r18, Y+4	; 0x04
    253c:	3d 81       	ldd	r19, Y+5	; 0x05
    253e:	22 30       	cpi	r18, 0x02	; 2
    2540:	31 05       	cpc	r19, r1
    2542:	2c f4       	brge	.+10     	; 0x254e <DIO_TogglePinValue+0x46>
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	9d 81       	ldd	r25, Y+5	; 0x05
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	69 f0       	breq	.+26     	; 0x2566 <DIO_TogglePinValue+0x5e>
    254c:	64 c0       	rjmp	.+200    	; 0x2616 <DIO_TogglePinValue+0x10e>
    254e:	2c 81       	ldd	r18, Y+4	; 0x04
    2550:	3d 81       	ldd	r19, Y+5	; 0x05
    2552:	22 30       	cpi	r18, 0x02	; 2
    2554:	31 05       	cpc	r19, r1
    2556:	99 f1       	breq	.+102    	; 0x25be <DIO_TogglePinValue+0xb6>
    2558:	8c 81       	ldd	r24, Y+4	; 0x04
    255a:	9d 81       	ldd	r25, Y+5	; 0x05
    255c:	83 30       	cpi	r24, 0x03	; 3
    255e:	91 05       	cpc	r25, r1
    2560:	09 f4       	brne	.+2      	; 0x2564 <DIO_TogglePinValue+0x5c>
    2562:	43 c0       	rjmp	.+134    	; 0x25ea <DIO_TogglePinValue+0xe2>
    2564:	58 c0       	rjmp	.+176    	; 0x2616 <DIO_TogglePinValue+0x10e>
		{
		case PORTA: TOG_BIT(PORTA_BASE_PTR->PORT,Pin); break;
    2566:	a9 e3       	ldi	r26, 0x39	; 57
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e9 e3       	ldi	r30, 0x39	; 57
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	48 2f       	mov	r20, r24
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	02 2e       	mov	r0, r18
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <DIO_TogglePinValue+0x7c>
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	0a 94       	dec	r0
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <DIO_TogglePinValue+0x78>
    2588:	84 27       	eor	r24, r20
    258a:	12 96       	adiw	r26, 0x02	; 2
    258c:	8c 93       	st	X, r24
    258e:	12 97       	sbiw	r26, 0x02	; 2
    2590:	46 c0       	rjmp	.+140    	; 0x261e <DIO_TogglePinValue+0x116>
		case PORTB: TOG_BIT(PORTB_BASE_PTR->PORT,Pin); break;
    2592:	a6 e3       	ldi	r26, 0x36	; 54
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e6 e3       	ldi	r30, 0x36	; 54
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	48 2f       	mov	r20, r24
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	02 2e       	mov	r0, r18
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <DIO_TogglePinValue+0xa8>
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	0a 94       	dec	r0
    25b2:	e2 f7       	brpl	.-8      	; 0x25ac <DIO_TogglePinValue+0xa4>
    25b4:	84 27       	eor	r24, r20
    25b6:	12 96       	adiw	r26, 0x02	; 2
    25b8:	8c 93       	st	X, r24
    25ba:	12 97       	sbiw	r26, 0x02	; 2
    25bc:	30 c0       	rjmp	.+96     	; 0x261e <DIO_TogglePinValue+0x116>
		case PORTC: TOG_BIT(PORTC_BASE_PTR->PORT,Pin); break;
    25be:	a3 e3       	ldi	r26, 0x33	; 51
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e3 e3       	ldi	r30, 0x33	; 51
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	48 2f       	mov	r20, r24
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	02 2e       	mov	r0, r18
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <DIO_TogglePinValue+0xd4>
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	0a 94       	dec	r0
    25de:	e2 f7       	brpl	.-8      	; 0x25d8 <DIO_TogglePinValue+0xd0>
    25e0:	84 27       	eor	r24, r20
    25e2:	12 96       	adiw	r26, 0x02	; 2
    25e4:	8c 93       	st	X, r24
    25e6:	12 97       	sbiw	r26, 0x02	; 2
    25e8:	1a c0       	rjmp	.+52     	; 0x261e <DIO_TogglePinValue+0x116>
		case PORTD: TOG_BIT(PORTD_BASE_PTR->PORT,Pin); break;
    25ea:	a0 e3       	ldi	r26, 0x30	; 48
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e0 e3       	ldi	r30, 0x30	; 48
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	48 2f       	mov	r20, r24
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	02 2e       	mov	r0, r18
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <DIO_TogglePinValue+0x100>
    2604:	88 0f       	add	r24, r24
    2606:	99 1f       	adc	r25, r25
    2608:	0a 94       	dec	r0
    260a:	e2 f7       	brpl	.-8      	; 0x2604 <DIO_TogglePinValue+0xfc>
    260c:	84 27       	eor	r24, r20
    260e:	12 96       	adiw	r26, 0x02	; 2
    2610:	8c 93       	st	X, r24
    2612:	12 97       	sbiw	r26, 0x02	; 2
    2614:	04 c0       	rjmp	.+8      	; 0x261e <DIO_TogglePinValue+0x116>
		default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	01 c0       	rjmp	.+2      	; 0x261e <DIO_TogglePinValue+0x116>
		}
	}
	else
	{
		Local_u8ErrorState = PIN_NOT_FOUND;
    261c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    261e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <DIO_GetPinValue>:
* uint8_t value;
* uint8_t pinstate = DIO_GetPinValue(PORTA,PIN0,&value);
* @endcode
******************************************************************************/
ErrorState_t DIO_GetPinValue(DioPort_t Port,DioPin_t Pin, uint8_t* pu8Value)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	27 97       	sbiw	r28, 0x07	; 7
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	8a 83       	std	Y+2, r24	; 0x02
    2646:	6b 83       	std	Y+3, r22	; 0x03
    2648:	5d 83       	std	Y+5, r21	; 0x05
    264a:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState_t Local_u8ErrorState = DONE ;
    264c:	8a e0       	ldi	r24, 0x0A	; 10
    264e:	89 83       	std	Y+1, r24	; 0x01

	if(pu8Value!=NULL)
    2650:	8c 81       	ldd	r24, Y+4	; 0x04
    2652:	9d 81       	ldd	r25, Y+5	; 0x05
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	09 f4       	brne	.+2      	; 0x265a <DIO_GetPinValue+0x2a>
    2658:	7a c0       	rjmp	.+244    	; 0x274e <DIO_GetPinValue+0x11e>
	{
		if( (Pin<=PIN7))
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	88 30       	cpi	r24, 0x08	; 8
    265e:	08 f0       	brcs	.+2      	; 0x2662 <DIO_GetPinValue+0x32>
    2660:	74 c0       	rjmp	.+232    	; 0x274a <DIO_GetPinValue+0x11a>
		{
			switch(Port)
    2662:	8a 81       	ldd	r24, Y+2	; 0x02
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	3f 83       	std	Y+7, r19	; 0x07
    266a:	2e 83       	std	Y+6, r18	; 0x06
    266c:	4e 81       	ldd	r20, Y+6	; 0x06
    266e:	5f 81       	ldd	r21, Y+7	; 0x07
    2670:	41 30       	cpi	r20, 0x01	; 1
    2672:	51 05       	cpc	r21, r1
    2674:	59 f1       	breq	.+86     	; 0x26cc <DIO_GetPinValue+0x9c>
    2676:	8e 81       	ldd	r24, Y+6	; 0x06
    2678:	9f 81       	ldd	r25, Y+7	; 0x07
    267a:	82 30       	cpi	r24, 0x02	; 2
    267c:	91 05       	cpc	r25, r1
    267e:	34 f4       	brge	.+12     	; 0x268c <DIO_GetPinValue+0x5c>
    2680:	2e 81       	ldd	r18, Y+6	; 0x06
    2682:	3f 81       	ldd	r19, Y+7	; 0x07
    2684:	21 15       	cp	r18, r1
    2686:	31 05       	cpc	r19, r1
    2688:	69 f0       	breq	.+26     	; 0x26a4 <DIO_GetPinValue+0x74>
    268a:	5c c0       	rjmp	.+184    	; 0x2744 <DIO_GetPinValue+0x114>
    268c:	4e 81       	ldd	r20, Y+6	; 0x06
    268e:	5f 81       	ldd	r21, Y+7	; 0x07
    2690:	42 30       	cpi	r20, 0x02	; 2
    2692:	51 05       	cpc	r21, r1
    2694:	79 f1       	breq	.+94     	; 0x26f4 <DIO_GetPinValue+0xc4>
    2696:	8e 81       	ldd	r24, Y+6	; 0x06
    2698:	9f 81       	ldd	r25, Y+7	; 0x07
    269a:	83 30       	cpi	r24, 0x03	; 3
    269c:	91 05       	cpc	r25, r1
    269e:	09 f4       	brne	.+2      	; 0x26a2 <DIO_GetPinValue+0x72>
    26a0:	3d c0       	rjmp	.+122    	; 0x271c <DIO_GetPinValue+0xec>
    26a2:	50 c0       	rjmp	.+160    	; 0x2744 <DIO_GetPinValue+0x114>
			{
			case PORTA : *pu8Value= GET_BIT(PORTA_BASE_PTR->PIN ,Pin); break;
    26a4:	e9 e3       	ldi	r30, 0x39	; 57
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	88 2f       	mov	r24, r24
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a9 01       	movw	r20, r18
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <DIO_GetPinValue+0x8c>
    26b8:	55 95       	asr	r21
    26ba:	47 95       	ror	r20
    26bc:	8a 95       	dec	r24
    26be:	e2 f7       	brpl	.-8      	; 0x26b8 <DIO_GetPinValue+0x88>
    26c0:	ca 01       	movw	r24, r20
    26c2:	81 70       	andi	r24, 0x01	; 1
    26c4:	ec 81       	ldd	r30, Y+4	; 0x04
    26c6:	fd 81       	ldd	r31, Y+5	; 0x05
    26c8:	80 83       	st	Z, r24
    26ca:	43 c0       	rjmp	.+134    	; 0x2752 <DIO_GetPinValue+0x122>
			case PORTB : *pu8Value= GET_BIT(PORTB_BASE_PTR->PIN ,Pin); break;
    26cc:	e6 e3       	ldi	r30, 0x36	; 54
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	88 2f       	mov	r24, r24
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	a9 01       	movw	r20, r18
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <DIO_GetPinValue+0xb4>
    26e0:	55 95       	asr	r21
    26e2:	47 95       	ror	r20
    26e4:	8a 95       	dec	r24
    26e6:	e2 f7       	brpl	.-8      	; 0x26e0 <DIO_GetPinValue+0xb0>
    26e8:	ca 01       	movw	r24, r20
    26ea:	81 70       	andi	r24, 0x01	; 1
    26ec:	ec 81       	ldd	r30, Y+4	; 0x04
    26ee:	fd 81       	ldd	r31, Y+5	; 0x05
    26f0:	80 83       	st	Z, r24
    26f2:	2f c0       	rjmp	.+94     	; 0x2752 <DIO_GetPinValue+0x122>
			case PORTC : *pu8Value= GET_BIT(PORTC_BASE_PTR->PIN ,Pin); break;
    26f4:	e3 e3       	ldi	r30, 0x33	; 51
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	88 2f       	mov	r24, r24
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	a9 01       	movw	r20, r18
    2706:	02 c0       	rjmp	.+4      	; 0x270c <DIO_GetPinValue+0xdc>
    2708:	55 95       	asr	r21
    270a:	47 95       	ror	r20
    270c:	8a 95       	dec	r24
    270e:	e2 f7       	brpl	.-8      	; 0x2708 <DIO_GetPinValue+0xd8>
    2710:	ca 01       	movw	r24, r20
    2712:	81 70       	andi	r24, 0x01	; 1
    2714:	ec 81       	ldd	r30, Y+4	; 0x04
    2716:	fd 81       	ldd	r31, Y+5	; 0x05
    2718:	80 83       	st	Z, r24
    271a:	1b c0       	rjmp	.+54     	; 0x2752 <DIO_GetPinValue+0x122>
			case PORTD : *pu8Value= GET_BIT(PORTD_BASE_PTR->PIN ,Pin); break;
    271c:	e0 e3       	ldi	r30, 0x30	; 48
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	28 2f       	mov	r18, r24
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	a9 01       	movw	r20, r18
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <DIO_GetPinValue+0x104>
    2730:	55 95       	asr	r21
    2732:	47 95       	ror	r20
    2734:	8a 95       	dec	r24
    2736:	e2 f7       	brpl	.-8      	; 0x2730 <DIO_GetPinValue+0x100>
    2738:	ca 01       	movw	r24, r20
    273a:	81 70       	andi	r24, 0x01	; 1
    273c:	ec 81       	ldd	r30, Y+4	; 0x04
    273e:	fd 81       	ldd	r31, Y+5	; 0x05
    2740:	80 83       	st	Z, r24
    2742:	07 c0       	rjmp	.+14     	; 0x2752 <DIO_GetPinValue+0x122>
			default: Local_u8ErrorState = PORT_NOT_FOUND ;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	04 c0       	rjmp	.+8      	; 0x2752 <DIO_GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = PIN_NOT_FOUND ;
    274a:	19 82       	std	Y+1, r1	; 0x01
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <DIO_GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULLPTR;
    274e:	85 e0       	ldi	r24, 0x05	; 5
    2750:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    2752:	89 81       	ldd	r24, Y+1	; 0x01
}
    2754:	27 96       	adiw	r28, 0x07	; 7
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <DIO_Init>:
* @endcode
*
**************************************************************************************************************************/

ErrorState_t DIO_Init(const DioConfig_t * const  Config)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	00 d0       	rcall	.+0      	; 0x276c <DIO_Init+0x6>
    276c:	0f 92       	push	r0
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	9b 83       	std	Y+3, r25	; 0x03
    2774:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_u8ErrorState = 4;
    2776:	84 e0       	ldi	r24, 0x04	; 4
    2778:	89 83       	std	Y+1, r24	; 0x01


	if(Config != NULL)
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	71 f0       	breq	.+28     	; 0x279e <DIO_Init+0x38>
	{

		DIO_SetPinDirection(Config->Port,Config->Pin,Config->Mode);
    2782:	ea 81       	ldd	r30, Y+2	; 0x02
    2784:	fb 81       	ldd	r31, Y+3	; 0x03
    2786:	80 81       	ld	r24, Z
    2788:	ea 81       	ldd	r30, Y+2	; 0x02
    278a:	fb 81       	ldd	r31, Y+3	; 0x03
    278c:	21 81       	ldd	r18, Z+1	; 0x01
    278e:	ea 81       	ldd	r30, Y+2	; 0x02
    2790:	fb 81       	ldd	r31, Y+3	; 0x03
    2792:	92 81       	ldd	r25, Z+2	; 0x02
    2794:	62 2f       	mov	r22, r18
    2796:	49 2f       	mov	r20, r25
    2798:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <DIO_SetPinDirection>
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <DIO_Init+0x3c>


	}
	else
	{
		Local_u8ErrorState = NULLPTR;
    279e:	85 e0       	ldi	r24, 0x05	; 5
    27a0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    27a2:	89 81       	ldd	r24, Y+1	; 0x01

}
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    27b8:	af e5       	ldi	r26, 0x5F	; 95
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	ef e5       	ldi	r30, 0x5F	; 95
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	80 68       	ori	r24, 0x80	; 128
    27c4:	8c 93       	st	X, r24
}
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    27d4:	af e5       	ldi	r26, 0x5F	; 95
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	ef e5       	ldi	r30, 0x5F	; 95
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	8f 77       	andi	r24, 0x7F	; 127
    27e0:	8c 93       	st	X, r24

}
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <PORT_voidInit>:
#include "PORT_register.h"



void PORT_voidInit(void)
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
	 DDRA = PORTA_DIR ;
    27f0:	ea e3       	ldi	r30, 0x3A	; 58
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	8e ef       	ldi	r24, 0xFE	; 254
    27f6:	80 83       	st	Z, r24
	 DDRB = PORTB_DIR ;
    27f8:	e7 e3       	ldi	r30, 0x37	; 55
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	8f ef       	ldi	r24, 0xFF	; 255
    27fe:	80 83       	st	Z, r24
	 DDRC = PORTC_DIR ;
    2800:	e4 e3       	ldi	r30, 0x34	; 52
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	8f ef       	ldi	r24, 0xFF	; 255
    2806:	80 83       	st	Z, r24
	 DDRD = PORTD_DIR ;
    2808:	e1 e3       	ldi	r30, 0x31	; 49
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	8f ef       	ldi	r24, 0xFF	; 255
    280e:	80 83       	st	Z, r24
	 
	 
	PORTA = PORTA_INIT_VAL; 
    2810:	eb e3       	ldi	r30, 0x3B	; 59
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	80 83       	st	Z, r24
	PORTB = PORTB_INIT_VAL; 
    2818:	e8 e3       	ldi	r30, 0x38	; 56
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	10 82       	st	Z, r1
	PORTC = PORTC_INIT_VAL; 
    281e:	e5 e3       	ldi	r30, 0x35	; 53
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL; 
    2824:	e2 e3       	ldi	r30, 0x32	; 50
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	10 82       	st	Z, r1
	
}
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <SW_Init>:
* uint8_t state = SW_Init(&SW1);
*
* @endcode
******************************************************************************/
ErrorState_t SW_Init(SwConfig_t * pstSW)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <SW_Init+0x6>
    2836:	0f 92       	push	r0
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	9b 83       	std	Y+3, r25	; 0x03
    283e:	8a 83       	std	Y+2, r24	; 0x02

	ErrorState_t Local_u8SwErrorState = DONE;
    2840:	8a e0       	ldi	r24, 0x0A	; 10
    2842:	89 83       	std	Y+1, r24	; 0x01
	if(pstSW != NULL)
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	9b 81       	ldd	r25, Y+3	; 0x03
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	d1 f0       	breq	.+52     	; 0x2880 <SW_Init+0x50>
	{
		DIO_SetPinDirection(pstSW->SwPort ,pstSW->SwPin , DIO_INPUT);
    284c:	ea 81       	ldd	r30, Y+2	; 0x02
    284e:	fb 81       	ldd	r31, Y+3	; 0x03
    2850:	81 81       	ldd	r24, Z+1	; 0x01
    2852:	ea 81       	ldd	r30, Y+2	; 0x02
    2854:	fb 81       	ldd	r31, Y+3	; 0x03
    2856:	92 81       	ldd	r25, Z+2	; 0x02
    2858:	69 2f       	mov	r22, r25
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <DIO_SetPinDirection>

		if(pstSW->SwConectionType == SW_IN_PULLUP)
    2860:	ea 81       	ldd	r30, Y+2	; 0x02
    2862:	fb 81       	ldd	r31, Y+3	; 0x03
    2864:	80 81       	ld	r24, Z
    2866:	88 23       	and	r24, r24
    2868:	69 f4       	brne	.+26     	; 0x2884 <SW_Init+0x54>
		{
			DIO_SetPinValue(pstSW->SwPort ,pstSW->SwPin , DIO_HIGH);
    286a:	ea 81       	ldd	r30, Y+2	; 0x02
    286c:	fb 81       	ldd	r31, Y+3	; 0x03
    286e:	81 81       	ldd	r24, Z+1	; 0x01
    2870:	ea 81       	ldd	r30, Y+2	; 0x02
    2872:	fb 81       	ldd	r31, Y+3	; 0x03
    2874:	92 81       	ldd	r25, Z+2	; 0x02
    2876:	69 2f       	mov	r22, r25
    2878:	41 e0       	ldi	r20, 0x01	; 1
    287a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_SetPinValue>
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <SW_Init+0x54>
		}
	}
	else
	{
		Local_u8SwErrorState = NULLPTR ;
    2880:	85 e0       	ldi	r24, 0x05	; 5
    2882:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8SwErrorState ;
    2884:	89 81       	ldd	r24, Y+1	; 0x01
}
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <SW_GetState>:
* @endcode
******************************************************************************/



ErrorState_t  SW_GetState(SwConfig_t * pstSW,volatile SwState_t * State){
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <SW_GetState+0x6>
    2898:	00 d0       	rcall	.+0      	; 0x289a <SW_GetState+0x8>
    289a:	00 d0       	rcall	.+0      	; 0x289c <SW_GetState+0xa>
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
    28a4:	7e 83       	std	Y+6, r23	; 0x06
    28a6:	6d 83       	std	Y+5, r22	; 0x05

	ErrorState_t Local_u8SwErrorState = DONE;
    28a8:	8a e0       	ldi	r24, 0x0A	; 10
    28aa:	89 83       	std	Y+1, r24	; 0x01
	SwState_t Local_u8SwState;

	if((pstSW != NULL) && (State != NULL))
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	c9 f1       	breq	.+114    	; 0x2926 <SW_GetState+0x94>
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	a9 f1       	breq	.+106    	; 0x2926 <SW_GetState+0x94>

	{
		DIO_GetPinValue(pstSW->SwPort ,pstSW->SwPin, &Local_u8SwState);
    28bc:	eb 81       	ldd	r30, Y+3	; 0x03
    28be:	fc 81       	ldd	r31, Y+4	; 0x04
    28c0:	81 81       	ldd	r24, Z+1	; 0x01
    28c2:	eb 81       	ldd	r30, Y+3	; 0x03
    28c4:	fc 81       	ldd	r31, Y+4	; 0x04
    28c6:	92 81       	ldd	r25, Z+2	; 0x02
    28c8:	9e 01       	movw	r18, r28
    28ca:	2e 5f       	subi	r18, 0xFE	; 254
    28cc:	3f 4f       	sbci	r19, 0xFF	; 255
    28ce:	69 2f       	mov	r22, r25
    28d0:	a9 01       	movw	r20, r18
    28d2:	0e 94 18 13 	call	0x2630	; 0x2630 <DIO_GetPinValue>

		if(pstSW->SwConectionType == SW_IN_PULLUP)
    28d6:	eb 81       	ldd	r30, Y+3	; 0x03
    28d8:	fc 81       	ldd	r31, Y+4	; 0x04
    28da:	80 81       	ld	r24, Z
    28dc:	88 23       	and	r24, r24
    28de:	79 f4       	brne	.+30     	; 0x28fe <SW_GetState+0x6c>
		{

			if(Local_u8SwState == 0)
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	88 23       	and	r24, r24
    28e4:	29 f4       	brne	.+10     	; 0x28f0 <SW_GetState+0x5e>
			{
				*State = SW_PRESSED;
    28e6:	ed 81       	ldd	r30, Y+5	; 0x05
    28e8:	fe 81       	ldd	r31, Y+6	; 0x06
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	80 83       	st	Z, r24
    28ee:	1d c0       	rjmp	.+58     	; 0x292a <SW_GetState+0x98>
			}

			else if(Local_u8SwState == 1)
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	81 30       	cpi	r24, 0x01	; 1
    28f4:	d1 f4       	brne	.+52     	; 0x292a <SW_GetState+0x98>
			{
				*State = SW_NOT_PRESSED;
    28f6:	ed 81       	ldd	r30, Y+5	; 0x05
    28f8:	fe 81       	ldd	r31, Y+6	; 0x06
    28fa:	10 82       	st	Z, r1
    28fc:	16 c0       	rjmp	.+44     	; 0x292a <SW_GetState+0x98>
			}
		}

		else if(pstSW->SwConectionType == SW_IN_PULLDOWN)
    28fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2900:	fc 81       	ldd	r31, Y+4	; 0x04
    2902:	80 81       	ld	r24, Z
    2904:	81 30       	cpi	r24, 0x01	; 1
    2906:	89 f4       	brne	.+34     	; 0x292a <SW_GetState+0x98>
		{

			if(Local_u8SwState == 1)
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	29 f4       	brne	.+10     	; 0x2918 <SW_GetState+0x86>
			{
				*State = SW_PRESSED;
    290e:	ed 81       	ldd	r30, Y+5	; 0x05
    2910:	fe 81       	ldd	r31, Y+6	; 0x06
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	80 83       	st	Z, r24
    2916:	09 c0       	rjmp	.+18     	; 0x292a <SW_GetState+0x98>
			}

			else if(Local_u8SwState == 0)
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	88 23       	and	r24, r24
    291c:	31 f4       	brne	.+12     	; 0x292a <SW_GetState+0x98>
			{
				*State = SW_NOT_PRESSED;
    291e:	ed 81       	ldd	r30, Y+5	; 0x05
    2920:	fe 81       	ldd	r31, Y+6	; 0x06
    2922:	10 82       	st	Z, r1
    2924:	02 c0       	rjmp	.+4      	; 0x292a <SW_GetState+0x98>
			}
		}
	}
	else
	{
		Local_u8SwErrorState = NULLPTR ;
    2926:	85 e0       	ldi	r24, 0x05	; 5
    2928:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8SwErrorState;
    292a:	89 81       	ldd	r24, Y+1	; 0x01
}
    292c:	26 96       	adiw	r28, 0x06	; 6
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <TIMER0_Init>:
 *
 * @param none
 *
 * @return void
 */
void TIMER0_Init(void){
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62

	/**
	 * clear the bits that control clock source
	 */
	TCCR0 &= CLK_MASK;
    2946:	a3 e5       	ldi	r26, 0x53	; 83
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e3 e5       	ldi	r30, 0x53	; 83
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	88 7f       	andi	r24, 0xF8	; 248
    2952:	8c 93       	st	X, r24

	/**
	 * Set the clock source
	 */
	TCCR0 |= CLOCK_SELECT;
    2954:	a3 e5       	ldi	r26, 0x53	; 83
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e3 e5       	ldi	r30, 0x53	; 83
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	85 60       	ori	r24, 0x05	; 5
    2960:	8c 93       	st	X, r24

}
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <TIMER0_SetMode>:
 *
 * @param[IN]  Mode is type of TimerMode_t
 *
 * @return Error state
 ******************************************************************************/
ErrorState_t TIMER0_SetMode(TimerMode_t Mode){
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	00 d0       	rcall	.+0      	; 0x296e <TIMER0_SetMode+0x6>
    296e:	00 d0       	rcall	.+0      	; 0x2970 <TIMER0_SetMode+0x8>
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t state = DONE ;
    2976:	8a e0       	ldi	r24, 0x0A	; 10
    2978:	89 83       	std	Y+1, r24	; 0x01
	switch(Mode){
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	28 2f       	mov	r18, r24
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	3c 83       	std	Y+4, r19	; 0x04
    2982:	2b 83       	std	Y+3, r18	; 0x03
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	9c 81       	ldd	r25, Y+4	; 0x04
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	31 f0       	breq	.+12     	; 0x2998 <TIMER0_SetMode+0x30>
    298c:	2b 81       	ldd	r18, Y+3	; 0x03
    298e:	3c 81       	ldd	r19, Y+4	; 0x04
    2990:	22 30       	cpi	r18, 0x02	; 2
    2992:	31 05       	cpc	r19, r1
    2994:	81 f0       	breq	.+32     	; 0x29b6 <TIMER0_SetMode+0x4e>
    2996:	1e c0       	rjmp	.+60     	; 0x29d4 <TIMER0_SetMode+0x6c>
	case NORMAL:
	{
		CLR_BIT(TCCR0,TCCR0_WGM00);
    2998:	a3 e5       	ldi	r26, 0x53	; 83
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e3 e5       	ldi	r30, 0x53	; 83
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	8f 7b       	andi	r24, 0xBF	; 191
    29a4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
    29a6:	a3 e5       	ldi	r26, 0x53	; 83
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e3 e5       	ldi	r30, 0x53	; 83
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	87 7f       	andi	r24, 0xF7	; 247
    29b2:	8c 93       	st	X, r24
    29b4:	11 c0       	rjmp	.+34     	; 0x29d8 <TIMER0_SetMode+0x70>
	}break;
	case CTC:
	{
		CLR_BIT(TCCR0,TCCR0_WGM00);
    29b6:	a3 e5       	ldi	r26, 0x53	; 83
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e3 e5       	ldi	r30, 0x53	; 83
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	8f 7b       	andi	r24, 0xBF	; 191
    29c2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    29c4:	a3 e5       	ldi	r26, 0x53	; 83
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e3 e5       	ldi	r30, 0x53	; 83
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	88 60       	ori	r24, 0x08	; 8
    29d0:	8c 93       	st	X, r24
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <TIMER0_SetMode+0x70>
	}break;
	default:
		state = WRONG_MODE;
    29d4:	88 e0       	ldi	r24, 0x08	; 8
    29d6:	89 83       	std	Y+1, r24	; 0x01

	}
	return state;
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <TIMER0_SetInterrupt>:
 * @param[IN]  state is type of InterruptStatus_t
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_SetInterrupt(TimerMode_t Mode,InterruptStatus_t State){
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	29 97       	sbiw	r28, 0x09	; 9
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	8a 83       	std	Y+2, r24	; 0x02
    29fe:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t state = DONE;
    2a00:	8a e0       	ldi	r24, 0x0A	; 10
    2a02:	89 83       	std	Y+1, r24	; 0x01

	switch(Mode){
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	39 87       	std	Y+9, r19	; 0x09
    2a0c:	28 87       	std	Y+8, r18	; 0x08
    2a0e:	88 85       	ldd	r24, Y+8	; 0x08
    2a10:	99 85       	ldd	r25, Y+9	; 0x09
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	31 f0       	breq	.+12     	; 0x2a22 <TIMER0_SetInterrupt+0x3a>
    2a16:	28 85       	ldd	r18, Y+8	; 0x08
    2a18:	39 85       	ldd	r19, Y+9	; 0x09
    2a1a:	22 30       	cpi	r18, 0x02	; 2
    2a1c:	31 05       	cpc	r19, r1
    2a1e:	11 f1       	breq	.+68     	; 0x2a64 <TIMER0_SetInterrupt+0x7c>
    2a20:	42 c0       	rjmp	.+132    	; 0x2aa6 <TIMER0_SetInterrupt+0xbe>
	case NORMAL:
	{
		switch(State){
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	28 2f       	mov	r18, r24
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	3f 83       	std	Y+7, r19	; 0x07
    2a2a:	2e 83       	std	Y+6, r18	; 0x06
    2a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	69 f0       	breq	.+26     	; 0x2a4e <TIMER0_SetInterrupt+0x66>
    2a34:	2e 81       	ldd	r18, Y+6	; 0x06
    2a36:	3f 81       	ldd	r19, Y+7	; 0x07
    2a38:	21 30       	cpi	r18, 0x01	; 1
    2a3a:	31 05       	cpc	r19, r1
    2a3c:	81 f4       	brne	.+32     	; 0x2a5e <TIMER0_SetInterrupt+0x76>
		case ENABLED:
		{
			SET_BIT(TIMSK,TIMSK_TOIE0);break;
    2a3e:	a9 e5       	ldi	r26, 0x59	; 89
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e9 e5       	ldi	r30, 0x59	; 89
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	81 60       	ori	r24, 0x01	; 1
    2a4a:	8c 93       	st	X, r24
    2a4c:	2e c0       	rjmp	.+92     	; 0x2aaa <TIMER0_SetInterrupt+0xc2>
		}
		case DISABLED:
		{
			CLR_BIT(TIMSK,TIMSK_TOIE0);break;
    2a4e:	a9 e5       	ldi	r26, 0x59	; 89
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e9 e5       	ldi	r30, 0x59	; 89
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8e 7f       	andi	r24, 0xFE	; 254
    2a5a:	8c 93       	st	X, r24
    2a5c:	26 c0       	rjmp	.+76     	; 0x2aaa <TIMER0_SetInterrupt+0xc2>
		}
		default:
			state = ERROR_STATE;
    2a5e:	89 e0       	ldi	r24, 0x09	; 9
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	23 c0       	rjmp	.+70     	; 0x2aaa <TIMER0_SetInterrupt+0xc2>
		}
		break;
	}
	case CTC:
	{
		switch(State){
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	3d 83       	std	Y+5, r19	; 0x05
    2a6c:	2c 83       	std	Y+4, r18	; 0x04
    2a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a70:	9d 81       	ldd	r25, Y+5	; 0x05
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	69 f0       	breq	.+26     	; 0x2a90 <TIMER0_SetInterrupt+0xa8>
    2a76:	2c 81       	ldd	r18, Y+4	; 0x04
    2a78:	3d 81       	ldd	r19, Y+5	; 0x05
    2a7a:	21 30       	cpi	r18, 0x01	; 1
    2a7c:	31 05       	cpc	r19, r1
    2a7e:	81 f4       	brne	.+32     	; 0x2aa0 <TIMER0_SetInterrupt+0xb8>
		case ENABLED:
		{
			SET_BIT(TIMSK,TIMSK_OCIE0);break;
    2a80:	a9 e5       	ldi	r26, 0x59	; 89
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e9 e5       	ldi	r30, 0x59	; 89
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	82 60       	ori	r24, 0x02	; 2
    2a8c:	8c 93       	st	X, r24
    2a8e:	0d c0       	rjmp	.+26     	; 0x2aaa <TIMER0_SetInterrupt+0xc2>
		}
		case DISABLED:
		{
			CLR_BIT(TIMSK,TIMSK_OCIE0);break;
    2a90:	a9 e5       	ldi	r26, 0x59	; 89
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e9 e5       	ldi	r30, 0x59	; 89
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	8d 7f       	andi	r24, 0xFD	; 253
    2a9c:	8c 93       	st	X, r24
    2a9e:	05 c0       	rjmp	.+10     	; 0x2aaa <TIMER0_SetInterrupt+0xc2>
		}
		default:
			state = ERROR_STATE;
    2aa0:	89 e0       	ldi	r24, 0x09	; 9
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <TIMER0_SetInterrupt+0xc2>
		}
		break;
	}
	default:
		state = WRONG_MODE;
    2aa6:	88 e0       	ldi	r24, 0x08	; 8
    2aa8:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aac:	29 96       	adiw	r28, 0x09	; 9
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	f8 94       	cli
    2ab2:	de bf       	out	0x3e, r29	; 62
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	cd bf       	out	0x3d, r28	; 61
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <TIMER0_ReadFlag>:
 * @param[IN]  Mode is type of TimerMode_t
 * @param[OUT] Result
 *
 * @return Error state
 ******************************************************************************/
ErrorState_t TIMER0_ReadFlag(TimerMode_t Mode,FlagStatus_t *Result ){
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <TIMER0_ReadFlag+0x6>
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <TIMER0_ReadFlag+0x8>
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <TIMER0_ReadFlag+0xa>
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	8a 83       	std	Y+2, r24	; 0x02
    2ace:	7c 83       	std	Y+4, r23	; 0x04
    2ad0:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t state = DONE;
    2ad2:	8a e0       	ldi	r24, 0x0A	; 10
    2ad4:	89 83       	std	Y+1, r24	; 0x01
	if(Result != NULL){
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	11 f1       	breq	.+68     	; 0x2b22 <TIMER0_ReadFlag+0x64>
		switch(Mode){
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	3e 83       	std	Y+6, r19	; 0x06
    2ae6:	2d 83       	std	Y+5, r18	; 0x05
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	31 f0       	breq	.+12     	; 0x2afc <TIMER0_ReadFlag+0x3e>
    2af0:	2d 81       	ldd	r18, Y+5	; 0x05
    2af2:	3e 81       	ldd	r19, Y+6	; 0x06
    2af4:	22 30       	cpi	r18, 0x02	; 2
    2af6:	31 05       	cpc	r19, r1
    2af8:	49 f0       	breq	.+18     	; 0x2b0c <TIMER0_ReadFlag+0x4e>
    2afa:	11 c0       	rjmp	.+34     	; 0x2b1e <TIMER0_ReadFlag+0x60>
		case NORMAL: *Result = GET_BIT(TIFR,TIFR_TOV0); break;
    2afc:	e8 e5       	ldi	r30, 0x58	; 88
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	81 70       	andi	r24, 0x01	; 1
    2b04:	eb 81       	ldd	r30, Y+3	; 0x03
    2b06:	fc 81       	ldd	r31, Y+4	; 0x04
    2b08:	80 83       	st	Z, r24
    2b0a:	0b c0       	rjmp	.+22     	; 0x2b22 <TIMER0_ReadFlag+0x64>
		case CTC   : *Result = GET_BIT(TIFR,TIFR_OCF0); break;
    2b0c:	e8 e5       	ldi	r30, 0x58	; 88
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	86 95       	lsr	r24
    2b14:	81 70       	andi	r24, 0x01	; 1
    2b16:	eb 81       	ldd	r30, Y+3	; 0x03
    2b18:	fc 81       	ldd	r31, Y+4	; 0x04
    2b1a:	80 83       	st	Z, r24
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <TIMER0_ReadFlag+0x64>
		default : state = WRONG_MODE;
    2b1e:	88 e0       	ldi	r24, 0x08	; 8
    2b20:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return state;
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b24:	26 96       	adiw	r28, 0x06	; 6
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <TIMER0_SetBusyWait>:
 * @param[IN]  period
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_SetBusyWait(uint64_t Period){
    2b36:	ef 92       	push	r14
    2b38:	ff 92       	push	r15
    2b3a:	0f 93       	push	r16
    2b3c:	1f 93       	push	r17
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	69 97       	sbiw	r28, 0x19	; 25
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
    2b52:	2a 8b       	std	Y+18, r18	; 0x12
    2b54:	3b 8b       	std	Y+19, r19	; 0x13
    2b56:	4c 8b       	std	Y+20, r20	; 0x14
    2b58:	5d 8b       	std	Y+21, r21	; 0x15
    2b5a:	6e 8b       	std	Y+22, r22	; 0x16
    2b5c:	7f 8b       	std	Y+23, r23	; 0x17
    2b5e:	88 8f       	std	Y+24, r24	; 0x18
    2b60:	99 8f       	std	Y+25, r25	; 0x19

	ErrorState_t state = DONE;
    2b62:	8a e0       	ldi	r24, 0x0A	; 10
    2b64:	89 8b       	std	Y+17, r24	; 0x11
	sfloat32_t NO_ofOverflow;

	/*
	 * define the freq ,presacler, OverFlowTicks parameters
	 */
	Freq =SYS_CLK;
    2b66:	88 e0       	ldi	r24, 0x08	; 8
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	9c 87       	std	Y+12, r25	; 0x0c
    2b6c:	8b 87       	std	Y+11, r24	; 0x0b
	Prescaler = TIMER_CLK_SRC ;
    2b6e:	88 e0       	ldi	r24, 0x08	; 8
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9a 87       	std	Y+10, r25	; 0x0a
    2b74:	89 87       	std	Y+9, r24	; 0x09
	OverFlowTicks= TIMER_TICKS;
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	91 e0       	ldi	r25, 0x01	; 1
    2b7a:	9e 87       	std	Y+14, r25	; 0x0e
    2b7c:	8d 87       	std	Y+13, r24	; 0x0d
	/*
	 * calculate the Tick time of counter in microsecond
	 */
	TickTime = ( sfloat32_t)Prescaler / Freq;
    2b7e:	89 85       	ldd	r24, Y+9	; 0x09
    2b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b82:	cc 01       	movw	r24, r24
    2b84:	a0 e0       	ldi	r26, 0x00	; 0
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2b90:	7b 01       	movw	r14, r22
    2b92:	8c 01       	movw	r16, r24
    2b94:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b96:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b98:	cc 01       	movw	r24, r24
    2b9a:	a0 e0       	ldi	r26, 0x00	; 0
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2ba6:	9b 01       	movw	r18, r22
    2ba8:	ac 01       	movw	r20, r24
    2baa:	c8 01       	movw	r24, r16
    2bac:	b7 01       	movw	r22, r14
    2bae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	98 8b       	std	Y+16, r25	; 0x10
    2bc4:	8f 87       	std	Y+15, r24	; 0x0f

	/*
	 * calculate the desired ticks
	 */

	DesiredTicks = ( sfloat32_t)Period / TickTime;
    2bc6:	2a 89       	ldd	r18, Y+18	; 0x12
    2bc8:	3b 89       	ldd	r19, Y+19	; 0x13
    2bca:	4c 89       	ldd	r20, Y+20	; 0x14
    2bcc:	5d 89       	ldd	r21, Y+21	; 0x15
    2bce:	6e 89       	ldd	r22, Y+22	; 0x16
    2bd0:	7f 89       	ldd	r23, Y+23	; 0x17
    2bd2:	88 8d       	ldd	r24, Y+24	; 0x18
    2bd4:	99 8d       	ldd	r25, Y+25	; 0x19
    2bd6:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    2bda:	7b 01       	movw	r14, r22
    2bdc:	8c 01       	movw	r16, r24
    2bde:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be0:	98 89       	ldd	r25, Y+16	; 0x10
    2be2:	cc 01       	movw	r24, r24
    2be4:	a0 e0       	ldi	r26, 0x00	; 0
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2bf0:	9b 01       	movw	r18, r22
    2bf2:	ac 01       	movw	r20, r24
    2bf4:	c8 01       	movw	r24, r16
    2bf6:	b7 01       	movw	r22, r14
    2bf8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	98 87       	std	Y+8, r25	; 0x08
    2c0e:	8f 83       	std	Y+7, r24	; 0x07

	/**
	 * Check the relation between overflow ticks and desired ticks
	 */
	if(DesiredTicks > OverFlowTicks){
    2c10:	2f 81       	ldd	r18, Y+7	; 0x07
    2c12:	38 85       	ldd	r19, Y+8	; 0x08
    2c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c18:	82 17       	cp	r24, r18
    2c1a:	93 07       	cpc	r25, r19
    2c1c:	08 f0       	brcs	.+2      	; 0x2c20 <TIMER0_SetBusyWait+0xea>
    2c1e:	89 c0       	rjmp	.+274    	; 0x2d32 <TIMER0_SetBusyWait+0x1fc>

		NO_ofOverflow = (sfloat32_t)DesiredTicks /OverFlowTicks;
    2c20:	8f 81       	ldd	r24, Y+7	; 0x07
    2c22:	98 85       	ldd	r25, Y+8	; 0x08
    2c24:	cc 01       	movw	r24, r24
    2c26:	a0 e0       	ldi	r26, 0x00	; 0
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2c32:	7b 01       	movw	r14, r22
    2c34:	8c 01       	movw	r16, r24
    2c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3a:	cc 01       	movw	r24, r24
    2c3c:	a0 e0       	ldi	r26, 0x00	; 0
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	bc 01       	movw	r22, r24
    2c42:	cd 01       	movw	r24, r26
    2c44:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2c48:	9b 01       	movw	r18, r22
    2c4a:	ac 01       	movw	r20, r24
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	b7 01       	movw	r22, r14
    2c50:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	89 83       	std	Y+1, r24	; 0x01
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	ab 83       	std	Y+3, r26	; 0x03
    2c5e:	bc 83       	std	Y+4, r27	; 0x04
		/*to get integer part */
		Flag = (uint32)NO_ofOverflow;
    2c60:	69 81       	ldd	r22, Y+1	; 0x01
    2c62:	7a 81       	ldd	r23, Y+2	; 0x02
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	9c 81       	ldd	r25, Y+4	; 0x04
    2c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	8e 83       	std	Y+6, r24	; 0x06
		/*to get fraction part and calculate the preload value*/
		Preload = ((1-(NO_ofOverflow -Flag))*( sfloat32_t)OverFlowTicks);
    2c72:	8e 81       	ldd	r24, Y+6	; 0x06
    2c74:	88 2f       	mov	r24, r24
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	aa 27       	eor	r26, r26
    2c7a:	97 fd       	sbrc	r25, 7
    2c7c:	a0 95       	com	r26
    2c7e:	ba 2f       	mov	r27, r26
    2c80:	bc 01       	movw	r22, r24
    2c82:	cd 01       	movw	r24, r26
    2c84:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
    2c88:	9b 01       	movw	r18, r22
    2c8a:	ac 01       	movw	r20, r24
    2c8c:	69 81       	ldd	r22, Y+1	; 0x01
    2c8e:	7a 81       	ldd	r23, Y+2	; 0x02
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	9c 81       	ldd	r25, Y+4	; 0x04
    2c94:	0e 94 9d 02 	call	0x53a	; 0x53a <__subsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9c 01       	movw	r18, r24
    2c9e:	ad 01       	movw	r20, r26
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	70 e0       	ldi	r23, 0x00	; 0
    2ca4:	80 e8       	ldi	r24, 0x80	; 128
    2ca6:	9f e3       	ldi	r25, 0x3F	; 63
    2ca8:	0e 94 9d 02 	call	0x53a	; 0x53a <__subsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	7c 01       	movw	r14, r24
    2cb2:	8d 01       	movw	r16, r26
    2cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb8:	cc 01       	movw	r24, r24
    2cba:	a0 e0       	ldi	r26, 0x00	; 0
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2cc6:	9b 01       	movw	r18, r22
    2cc8:	ac 01       	movw	r20, r24
    2cca:	c8 01       	movw	r24, r16
    2ccc:	b7 01       	movw	r22, r14
    2cce:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
		if(Preload >0 ){
    2ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce6:	88 23       	and	r24, r24
    2ce8:	19 f0       	breq	.+6      	; 0x2cf0 <TIMER0_SetBusyWait+0x1ba>
			Flag ++;
    2cea:	8e 81       	ldd	r24, Y+6	; 0x06
    2cec:	8f 5f       	subi	r24, 0xFF	; 255
    2cee:	8e 83       	std	Y+6, r24	; 0x06
		}
		TCNT0 = Preload;
    2cf0:	e2 e5       	ldi	r30, 0x52	; 82
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	80 83       	st	Z, r24
    2cf8:	16 c0       	rjmp	.+44     	; 0x2d26 <TIMER0_SetBusyWait+0x1f0>
		/*Stuck until during is elapsed */

		while(Flag > 0)
		{
			/*Decrement flag each time */
			Flag --;
    2cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfc:	81 50       	subi	r24, 0x01	; 1
    2cfe:	8e 83       	std	Y+6, r24	; 0x06
			/*stay polling until flag is raised */
			while(GET_BIT(TIFR,TIFR_TOV0) != 1);
    2d00:	e8 e5       	ldi	r30, 0x58	; 88
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	88 2f       	mov	r24, r24
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	81 70       	andi	r24, 0x01	; 1
    2d0c:	90 70       	andi	r25, 0x00	; 0
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	b9 f3       	breq	.-18     	; 0x2d00 <TIMER0_SetBusyWait+0x1ca>
			/*CLEAR FLAG BY ST WITH LOGIC ONE*/
			SET_BIT(TIFR,TIFR_TOV0);
    2d12:	a8 e5       	ldi	r26, 0x58	; 88
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e8 e5       	ldi	r30, 0x58	; 88
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	81 60       	ori	r24, 0x01	; 1
    2d1e:	8c 93       	st	X, r24
			/*Set the timer register = 0*/

			TCNT0= 0;
    2d20:	e2 e5       	ldi	r30, 0x52	; 82
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	10 82       	st	Z, r1
		}
		TCNT0 = Preload;

		/*Stuck until during is elapsed */

		while(Flag > 0)
    2d26:	8e 81       	ldd	r24, Y+6	; 0x06
    2d28:	88 23       	and	r24, r24
    2d2a:	39 f7       	brne	.-50     	; 0x2cfa <TIMER0_SetBusyWait+0x1c4>
			TCNT0= 0;

		}


		state = STAT1;
    2d2c:	85 e0       	ldi	r24, 0x05	; 5
    2d2e:	89 8b       	std	Y+17, r24	; 0x11
    2d30:	43 c0       	rjmp	.+134    	; 0x2db8 <TIMER0_SetBusyWait+0x282>


	}
	else if(DesiredTicks < OverFlowTicks){
    2d32:	2f 81       	ldd	r18, Y+7	; 0x07
    2d34:	38 85       	ldd	r19, Y+8	; 0x08
    2d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3a:	28 17       	cp	r18, r24
    2d3c:	39 07       	cpc	r19, r25
    2d3e:	e8 f4       	brcc	.+58     	; 0x2d7a <TIMER0_SetBusyWait+0x244>
		/*
		 * we calculate the preload value and set to timer register
		 */
		Preload = OverFlowTicks -DesiredTicks;
    2d40:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d42:	8f 81       	ldd	r24, Y+7	; 0x07
    2d44:	29 2f       	mov	r18, r25
    2d46:	28 1b       	sub	r18, r24
    2d48:	82 2f       	mov	r24, r18
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0 = Preload;
    2d4c:	e2 e5       	ldi	r30, 0x52	; 82
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	8d 81       	ldd	r24, Y+5	; 0x05
    2d52:	80 83       	st	Z, r24
		/*stay polling until flag is raised */
		while(GET_BIT(TIFR,TIFR_TOV0) != 1);
    2d54:	e8 e5       	ldi	r30, 0x58	; 88
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	88 2f       	mov	r24, r24
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	81 70       	andi	r24, 0x01	; 1
    2d60:	90 70       	andi	r25, 0x00	; 0
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	b9 f3       	breq	.-18     	; 0x2d54 <TIMER0_SetBusyWait+0x21e>
		/*CLEAR FLAG BY ST WITH LOGIC ONE*/
		SET_BIT(TIFR,TIFR_TOV0);
    2d66:	a8 e5       	ldi	r26, 0x58	; 88
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e8 e5       	ldi	r30, 0x58	; 88
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	81 60       	ori	r24, 0x01	; 1
    2d72:	8c 93       	st	X, r24
		state = STAT2;
    2d74:	86 e0       	ldi	r24, 0x06	; 6
    2d76:	89 8b       	std	Y+17, r24	; 0x11
    2d78:	1f c0       	rjmp	.+62     	; 0x2db8 <TIMER0_SetBusyWait+0x282>
	}
	else if(DesiredTicks == OverFlowTicks){
    2d7a:	2f 81       	ldd	r18, Y+7	; 0x07
    2d7c:	38 85       	ldd	r19, Y+8	; 0x08
    2d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d82:	28 17       	cp	r18, r24
    2d84:	39 07       	cpc	r19, r25
    2d86:	b1 f4       	brne	.+44     	; 0x2db4 <TIMER0_SetBusyWait+0x27e>
		TCNT0 = 0;
    2d88:	e2 e5       	ldi	r30, 0x52	; 82
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	10 82       	st	Z, r1

		/*stay polling until flag is raised */
		while(GET_BIT(TIFR,TIFR_TOV0) != 1);
    2d8e:	e8 e5       	ldi	r30, 0x58	; 88
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	88 2f       	mov	r24, r24
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	81 70       	andi	r24, 0x01	; 1
    2d9a:	90 70       	andi	r25, 0x00	; 0
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	b9 f3       	breq	.-18     	; 0x2d8e <TIMER0_SetBusyWait+0x258>
		/*CLEAR FLAG BY ST WITH LOGIC ONE*/
		SET_BIT(TIFR,TIFR_TOV0);
    2da0:	a8 e5       	ldi	r26, 0x58	; 88
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e8 e5       	ldi	r30, 0x58	; 88
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	81 60       	ori	r24, 0x01	; 1
    2dac:	8c 93       	st	X, r24
		state = STAT3;
    2dae:	87 e0       	ldi	r24, 0x07	; 7
    2db0:	89 8b       	std	Y+17, r24	; 0x11
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <TIMER0_SetBusyWait+0x282>
	}

	else
	{
		state = NULLPTR;
    2db4:	85 e0       	ldi	r24, 0x05	; 5
    2db6:	89 8b       	std	Y+17, r24	; 0x11
	}

	return state;
    2db8:	89 89       	ldd	r24, Y+17	; 0x11



}
    2dba:	69 96       	adiw	r28, 0x19	; 25
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	1f 91       	pop	r17
    2dcc:	0f 91       	pop	r16
    2dce:	ff 90       	pop	r15
    2dd0:	ef 90       	pop	r14
    2dd2:	08 95       	ret

00002dd4 <TIMER0_Disabled>:
 * Description: used to disable the TIMER0
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_Disabled(void){
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	0f 92       	push	r0
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t state = DONE;
    2dde:	8a e0       	ldi	r24, 0x0A	; 10
    2de0:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 |=TIM_NO_CLK;
    2de2:	a3 e5       	ldi	r26, 0x53	; 83
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e3 e5       	ldi	r30, 0x53	; 83
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	8c 93       	st	X, r24

	return state;
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
}
    2df0:	0f 90       	pop	r0
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <TIMER0_SetModeOfOutputComparePin>:
 * @param[IN]  mode in CompareOutputMode_t enum
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_SetModeOfOutputComparePin(CompareOutputMode_t Mode){
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <TIMER0_SetModeOfOutputComparePin+0x6>
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <TIMER0_SetModeOfOutputComparePin+0x8>
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t state = DONE;
    2e06:	8a e0       	ldi	r24, 0x0A	; 10
    2e08:	89 83       	std	Y+1, r24	; 0x01

	switch(Mode){
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	28 2f       	mov	r18, r24
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	3c 83       	std	Y+4, r19	; 0x04
    2e12:	2b 83       	std	Y+3, r18	; 0x03
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	9c 81       	ldd	r25, Y+4	; 0x04
    2e18:	81 30       	cpi	r24, 0x01	; 1
    2e1a:	91 05       	cpc	r25, r1
    2e1c:	21 f1       	breq	.+72     	; 0x2e66 <TIMER0_SetModeOfOutputComparePin+0x6e>
    2e1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e20:	3c 81       	ldd	r19, Y+4	; 0x04
    2e22:	22 30       	cpi	r18, 0x02	; 2
    2e24:	31 05       	cpc	r19, r1
    2e26:	2c f4       	brge	.+10     	; 0x2e32 <TIMER0_SetModeOfOutputComparePin+0x3a>
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	61 f0       	breq	.+24     	; 0x2e48 <TIMER0_SetModeOfOutputComparePin+0x50>
    2e30:	47 c0       	rjmp	.+142    	; 0x2ec0 <TIMER0_SetModeOfOutputComparePin+0xc8>
    2e32:	2b 81       	ldd	r18, Y+3	; 0x03
    2e34:	3c 81       	ldd	r19, Y+4	; 0x04
    2e36:	22 30       	cpi	r18, 0x02	; 2
    2e38:	31 05       	cpc	r19, r1
    2e3a:	21 f1       	breq	.+72     	; 0x2e84 <TIMER0_SetModeOfOutputComparePin+0x8c>
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e40:	83 30       	cpi	r24, 0x03	; 3
    2e42:	91 05       	cpc	r25, r1
    2e44:	71 f1       	breq	.+92     	; 0x2ea2 <TIMER0_SetModeOfOutputComparePin+0xaa>
    2e46:	3c c0       	rjmp	.+120    	; 0x2ec0 <TIMER0_SetModeOfOutputComparePin+0xc8>
	case DISCONNECTED_OC0:
	{
		CLR_BIT(TCCR0,TCCR0_COM00);
    2e48:	a3 e5       	ldi	r26, 0x53	; 83
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e3 e5       	ldi	r30, 0x53	; 83
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	8f 7e       	andi	r24, 0xEF	; 239
    2e54:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_COM01);
    2e56:	a3 e5       	ldi	r26, 0x53	; 83
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e3 e5       	ldi	r30, 0x53	; 83
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	8f 7d       	andi	r24, 0xDF	; 223
    2e62:	8c 93       	st	X, r24
    2e64:	2f c0       	rjmp	.+94     	; 0x2ec4 <TIMER0_SetModeOfOutputComparePin+0xcc>
		break;
	}
	case TOGGLE_OC0      :
	{
		SET_BIT(TCCR0,TCCR0_COM00);
    2e66:	a3 e5       	ldi	r26, 0x53	; 83
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e3 e5       	ldi	r30, 0x53	; 83
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	80 61       	ori	r24, 0x10	; 16
    2e72:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_COM01);
    2e74:	a3 e5       	ldi	r26, 0x53	; 83
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e3 e5       	ldi	r30, 0x53	; 83
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	8f 7d       	andi	r24, 0xDF	; 223
    2e80:	8c 93       	st	X, r24
    2e82:	20 c0       	rjmp	.+64     	; 0x2ec4 <TIMER0_SetModeOfOutputComparePin+0xcc>
		break;
	}
	case CLEAR_OC0       :
	{
		CLR_BIT(TCCR0,TCCR0_COM00);
    2e84:	a3 e5       	ldi	r26, 0x53	; 83
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e3 e5       	ldi	r30, 0x53	; 83
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	8f 7e       	andi	r24, 0xEF	; 239
    2e90:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    2e92:	a3 e5       	ldi	r26, 0x53	; 83
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	e3 e5       	ldi	r30, 0x53	; 83
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	80 62       	ori	r24, 0x20	; 32
    2e9e:	8c 93       	st	X, r24
    2ea0:	11 c0       	rjmp	.+34     	; 0x2ec4 <TIMER0_SetModeOfOutputComparePin+0xcc>
		break;
	}
	case SET_OC0         :
	{
		SET_BIT(TCCR0,TCCR0_COM00);
    2ea2:	a3 e5       	ldi	r26, 0x53	; 83
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e3 e5       	ldi	r30, 0x53	; 83
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	80 61       	ori	r24, 0x10	; 16
    2eae:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    2eb0:	a3 e5       	ldi	r26, 0x53	; 83
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	e3 e5       	ldi	r30, 0x53	; 83
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	80 62       	ori	r24, 0x20	; 32
    2ebc:	8c 93       	st	X, r24
    2ebe:	02 c0       	rjmp	.+4      	; 0x2ec4 <TIMER0_SetModeOfOutputComparePin+0xcc>
		break;
	}
	default:
	{
		state = WRONG_MODE;
    2ec0:	88 e0       	ldi	r24, 0x08	; 8
    2ec2:	89 83       	std	Y+1, r24	; 0x01
	}

	}

	return state;
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	08 95       	ret

00002ed4 <TIMER0_ReadTimerReg>:
 *
 * @param[OUT]  none
 *
 * @return value of timer register
 ******************************************************************************/
uint8_t  TIMER0_ReadTimerReg(void){
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    2edc:	e2 e5       	ldi	r30, 0x52	; 82
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z

}
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	08 95       	ret

00002ee8 <TIMER0_SetTimerValue>:
 * @param[IN]  value
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_SetTimerValue(uint8_t Value){
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	00 d0       	rcall	.+0      	; 0x2eee <TIMER0_SetTimerValue+0x6>
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    2ef2:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t state = DONE;
    2ef4:	8a e0       	ldi	r24, 0x0A	; 10
    2ef6:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = Value;
    2ef8:	e2 e5       	ldi	r30, 0x52	; 82
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	80 83       	st	Z, r24

	return state;
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <TIMER0_SetOutputCompareValue>:
 * @param[IN]  value
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_SetOutputCompareValue(uint8_t Value){
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	00 d0       	rcall	.+0      	; 0x2f12 <TIMER0_SetOutputCompareValue+0x6>
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t state = DONE;
    2f18:	8a e0       	ldi	r24, 0x0A	; 10
    2f1a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Value;
    2f1c:	ec e5       	ldi	r30, 0x5C	; 92
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	80 83       	st	Z, r24

	return state;
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <TIMER0_u8SetCallBack>:
 * @param[IN]  Copy_pvCallBack
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_u8SetCallBack(void (*Copy_pvCallBack)(void)){
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <TIMER0_u8SetCallBack+0x6>
    2f36:	0f 92       	push	r0
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	9b 83       	std	Y+3, r25	; 0x03
    2f3e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t state = DONE;
    2f40:	8a e0       	ldi	r24, 0x0A	; 10
    2f42:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBack != NULL){
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	9b 81       	ldd	r25, Y+3	; 0x03
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	39 f0       	breq	.+14     	; 0x2f5a <TIMER0_u8SetCallBack+0x2a>
		Timer0Callback = Copy_pvCallBack;
    2f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f50:	90 93 d2 01 	sts	0x01D2, r25
    2f54:	80 93 d1 01 	sts	0x01D1, r24
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <TIMER0_u8SetCallBack+0x2e>
	}
	else
	{
		state = NULLPTR;
    2f5a:	85 e0       	ldi	r24, 0x05	; 5
    2f5c:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <__vector_10>:
/**
 * ISR for CLear On Compare Match Event
 */
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    2f6c:	1f 92       	push	r1
    2f6e:	0f 92       	push	r0
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	0f 92       	push	r0
    2f74:	11 24       	eor	r1, r1
    2f76:	2f 93       	push	r18
    2f78:	3f 93       	push	r19
    2f7a:	4f 93       	push	r20
    2f7c:	5f 93       	push	r21
    2f7e:	6f 93       	push	r22
    2f80:	7f 93       	push	r23
    2f82:	8f 93       	push	r24
    2f84:	9f 93       	push	r25
    2f86:	af 93       	push	r26
    2f88:	bf 93       	push	r27
    2f8a:	ef 93       	push	r30
    2f8c:	ff 93       	push	r31
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
	if(Timer0Callback  != NULL)
    2f96:	80 91 d1 01 	lds	r24, 0x01D1
    2f9a:	90 91 d2 01 	lds	r25, 0x01D2
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	29 f0       	breq	.+10     	; 0x2fac <__vector_10+0x40>
	{
		Timer0Callback();
    2fa2:	e0 91 d1 01 	lds	r30, 0x01D1
    2fa6:	f0 91 d2 01 	lds	r31, 0x01D2
    2faa:	09 95       	icall
	}
}
    2fac:	cf 91       	pop	r28
    2fae:	df 91       	pop	r29
    2fb0:	ff 91       	pop	r31
    2fb2:	ef 91       	pop	r30
    2fb4:	bf 91       	pop	r27
    2fb6:	af 91       	pop	r26
    2fb8:	9f 91       	pop	r25
    2fba:	8f 91       	pop	r24
    2fbc:	7f 91       	pop	r23
    2fbe:	6f 91       	pop	r22
    2fc0:	5f 91       	pop	r21
    2fc2:	4f 91       	pop	r20
    2fc4:	3f 91       	pop	r19
    2fc6:	2f 91       	pop	r18
    2fc8:	0f 90       	pop	r0
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	0f 90       	pop	r0
    2fce:	1f 90       	pop	r1
    2fd0:	18 95       	reti

00002fd2 <__vector_11>:
/**
 * ISR for CLear On overflow Event
 */
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    2fd2:	1f 92       	push	r1
    2fd4:	0f 92       	push	r0
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	0f 92       	push	r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	2f 93       	push	r18
    2fde:	3f 93       	push	r19
    2fe0:	4f 93       	push	r20
    2fe2:	5f 93       	push	r21
    2fe4:	6f 93       	push	r22
    2fe6:	7f 93       	push	r23
    2fe8:	8f 93       	push	r24
    2fea:	9f 93       	push	r25
    2fec:	af 93       	push	r26
    2fee:	bf 93       	push	r27
    2ff0:	ef 93       	push	r30
    2ff2:	ff 93       	push	r31
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
	if(Timer0Callback  != NULL)
    2ffc:	80 91 d1 01 	lds	r24, 0x01D1
    3000:	90 91 d2 01 	lds	r25, 0x01D2
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	29 f0       	breq	.+10     	; 0x3012 <__vector_11+0x40>
	{
		Timer0Callback();
    3008:	e0 91 d1 01 	lds	r30, 0x01D1
    300c:	f0 91 d2 01 	lds	r31, 0x01D2
    3010:	09 95       	icall
	}
}
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	ff 91       	pop	r31
    3018:	ef 91       	pop	r30
    301a:	bf 91       	pop	r27
    301c:	af 91       	pop	r26
    301e:	9f 91       	pop	r25
    3020:	8f 91       	pop	r24
    3022:	7f 91       	pop	r23
    3024:	6f 91       	pop	r22
    3026:	5f 91       	pop	r21
    3028:	4f 91       	pop	r20
    302a:	3f 91       	pop	r19
    302c:	2f 91       	pop	r18
    302e:	0f 90       	pop	r0
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	0f 90       	pop	r0
    3034:	1f 90       	pop	r1
    3036:	18 95       	reti

00003038 <main>:
 */

#include "App_interface.h"


void main(void){
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62

App_Init();
    3040:	0e 94 ba 09 	call	0x1374	; 0x1374 <App_Init>

App_Update();
    3044:	0e 94 d7 09 	call	0x13ae	; 0x13ae <App_Update>
    3048:	ff cf       	rjmp	.-2      	; 0x3048 <main+0x10>

0000304a <__udivmodhi4>:
    304a:	aa 1b       	sub	r26, r26
    304c:	bb 1b       	sub	r27, r27
    304e:	51 e1       	ldi	r21, 0x11	; 17
    3050:	07 c0       	rjmp	.+14     	; 0x3060 <__udivmodhi4_ep>

00003052 <__udivmodhi4_loop>:
    3052:	aa 1f       	adc	r26, r26
    3054:	bb 1f       	adc	r27, r27
    3056:	a6 17       	cp	r26, r22
    3058:	b7 07       	cpc	r27, r23
    305a:	10 f0       	brcs	.+4      	; 0x3060 <__udivmodhi4_ep>
    305c:	a6 1b       	sub	r26, r22
    305e:	b7 0b       	sbc	r27, r23

00003060 <__udivmodhi4_ep>:
    3060:	88 1f       	adc	r24, r24
    3062:	99 1f       	adc	r25, r25
    3064:	5a 95       	dec	r21
    3066:	a9 f7       	brne	.-22     	; 0x3052 <__udivmodhi4_loop>
    3068:	80 95       	com	r24
    306a:	90 95       	com	r25
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	08 95       	ret

00003072 <__prologue_saves__>:
    3072:	2f 92       	push	r2
    3074:	3f 92       	push	r3
    3076:	4f 92       	push	r4
    3078:	5f 92       	push	r5
    307a:	6f 92       	push	r6
    307c:	7f 92       	push	r7
    307e:	8f 92       	push	r8
    3080:	9f 92       	push	r9
    3082:	af 92       	push	r10
    3084:	bf 92       	push	r11
    3086:	cf 92       	push	r12
    3088:	df 92       	push	r13
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	ca 1b       	sub	r28, r26
    309c:	db 0b       	sbc	r29, r27
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	09 94       	ijmp

000030aa <__epilogue_restores__>:
    30aa:	2a 88       	ldd	r2, Y+18	; 0x12
    30ac:	39 88       	ldd	r3, Y+17	; 0x11
    30ae:	48 88       	ldd	r4, Y+16	; 0x10
    30b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    30bc:	b9 84       	ldd	r11, Y+9	; 0x09
    30be:	c8 84       	ldd	r12, Y+8	; 0x08
    30c0:	df 80       	ldd	r13, Y+7	; 0x07
    30c2:	ee 80       	ldd	r14, Y+6	; 0x06
    30c4:	fd 80       	ldd	r15, Y+5	; 0x05
    30c6:	0c 81       	ldd	r16, Y+4	; 0x04
    30c8:	1b 81       	ldd	r17, Y+3	; 0x03
    30ca:	aa 81       	ldd	r26, Y+2	; 0x02
    30cc:	b9 81       	ldd	r27, Y+1	; 0x01
    30ce:	ce 0f       	add	r28, r30
    30d0:	d1 1d       	adc	r29, r1
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	ed 01       	movw	r28, r26
    30de:	08 95       	ret

000030e0 <_exit>:
    30e0:	f8 94       	cli

000030e2 <__stop_program>:
    30e2:	ff cf       	rjmp	.-2      	; 0x30e2 <__stop_program>
