
Geussing_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000182  00800060  000031e8  0000327c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001e2  008001e2  000033fe  2**0
                  ALLOC
  3 .stab         00002ed4  00000000  00000000  00003400  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016f0  00000000  00000000  000062d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  000079c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000258  00000000  00000000  00007bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000028f3  00000000  00000000  00007e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000168f  00000000  00000000  0000a70f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014df  00000000  00000000  0000bd9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000d280  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000357  00000000  00000000  0000d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cfc  00000000  00000000  0000d7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e4f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__vector_10>
      2c:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3e       	cpi	r26, 0xE2	; 226
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ee       	ldi	r26, 0xE2	; 226
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3e       	cpi	r26, 0xE8	; 232
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 18 	call	0x313c	; 0x313c <main>
      8a:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 9d 02 	call	0x53a	; 0x53a <__subsf3>
      be:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__floatundisf>:
      ea:	a2 e0       	ldi	r26, 0x02	; 2
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__prologue_saves__>
      f6:	12 2f       	mov	r17, r18
      f8:	b3 2e       	mov	r11, r19
      fa:	a4 2e       	mov	r10, r20
      fc:	95 2e       	mov	r9, r21
      fe:	86 2e       	mov	r8, r22
     100:	37 2e       	mov	r3, r23
     102:	28 2e       	mov	r2, r24
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	c2 2e       	mov	r12, r18
     108:	d3 2e       	mov	r13, r19
     10a:	e4 2e       	mov	r14, r20
     10c:	f5 2e       	mov	r15, r21
     10e:	a7 01       	movw	r20, r14
     110:	96 01       	movw	r18, r12
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	21 17       	cp	r18, r17
     11c:	a1 f4       	brne	.+40     	; 0x146 <__floatundisf+0x5c>
     11e:	3b 15       	cp	r19, r11
     120:	91 f4       	brne	.+36     	; 0x146 <__floatundisf+0x5c>
     122:	4a 15       	cp	r20, r10
     124:	81 f4       	brne	.+32     	; 0x146 <__floatundisf+0x5c>
     126:	59 15       	cp	r21, r9
     128:	71 f4       	brne	.+28     	; 0x146 <__floatundisf+0x5c>
     12a:	68 15       	cp	r22, r8
     12c:	61 f4       	brne	.+24     	; 0x146 <__floatundisf+0x5c>
     12e:	73 15       	cp	r23, r3
     130:	51 f4       	brne	.+20     	; 0x146 <__floatundisf+0x5c>
     132:	82 15       	cp	r24, r2
     134:	41 f4       	brne	.+16     	; 0x146 <__floatundisf+0x5c>
     136:	aa 81       	ldd	r26, Y+2	; 0x02
     138:	9a 17       	cp	r25, r26
     13a:	29 f4       	brne	.+10     	; 0x146 <__floatundisf+0x5c>
     13c:	c7 01       	movw	r24, r14
     13e:	b6 01       	movw	r22, r12
     140:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
     144:	aa c0       	rjmp	.+340    	; 0x29a <__floatundisf+0x1b0>
     146:	21 2f       	mov	r18, r17
     148:	3b 2d       	mov	r19, r11
     14a:	4a 2d       	mov	r20, r10
     14c:	59 2d       	mov	r21, r9
     14e:	68 2d       	mov	r22, r8
     150:	73 2d       	mov	r23, r3
     152:	82 2d       	mov	r24, r2
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	00 e2       	ldi	r16, 0x20	; 32
     158:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__lshrdi3>
     15c:	c9 01       	movw	r24, r18
     15e:	da 01       	movw	r26, r20
     160:	80 30       	cpi	r24, 0x00	; 0
     162:	e0 e0       	ldi	r30, 0x00	; 0
     164:	9e 07       	cpc	r25, r30
     166:	e1 e0       	ldi	r30, 0x01	; 1
     168:	ae 07       	cpc	r26, r30
     16a:	e0 e0       	ldi	r30, 0x00	; 0
     16c:	be 07       	cpc	r27, r30
     16e:	80 f4       	brcc	.+32     	; 0x190 <__floatundisf+0xa6>
     170:	8f 3f       	cpi	r24, 0xFF	; 255
     172:	91 05       	cpc	r25, r1
     174:	a1 05       	cpc	r26, r1
     176:	b1 05       	cpc	r27, r1
     178:	31 f0       	breq	.+12     	; 0x186 <__floatundisf+0x9c>
     17a:	28 f0       	brcs	.+10     	; 0x186 <__floatundisf+0x9c>
     17c:	28 e0       	ldi	r18, 0x08	; 8
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	16 c0       	rjmp	.+44     	; 0x1b2 <__floatundisf+0xc8>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	11 c0       	rjmp	.+34     	; 0x1b2 <__floatundisf+0xc8>
     190:	80 30       	cpi	r24, 0x00	; 0
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	9f 07       	cpc	r25, r31
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	af 07       	cpc	r26, r31
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	bf 07       	cpc	r27, r31
     19e:	28 f0       	brcs	.+10     	; 0x1aa <__floatundisf+0xc0>
     1a0:	28 e1       	ldi	r18, 0x18	; 24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__floatundisf+0xc8>
     1aa:	20 e1       	ldi	r18, 0x10	; 16
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	02 2e       	mov	r0, r18
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <__floatundisf+0xd4>
     1b6:	b6 95       	lsr	r27
     1b8:	a7 95       	ror	r26
     1ba:	97 95       	ror	r25
     1bc:	87 95       	ror	r24
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <__floatundisf+0xcc>
     1c2:	fc 01       	movw	r30, r24
     1c4:	e8 53       	subi	r30, 0x38	; 56
     1c6:	ff 4f       	sbci	r31, 0xFF	; 255
     1c8:	80 81       	ld	r24, Z
     1ca:	29 01       	movw	r4, r18
     1cc:	3a 01       	movw	r6, r20
     1ce:	48 0e       	add	r4, r24
     1d0:	51 1c       	adc	r5, r1
     1d2:	61 1c       	adc	r6, r1
     1d4:	71 1c       	adc	r7, r1
     1d6:	49 82       	std	Y+1, r4	; 0x01
     1d8:	21 2f       	mov	r18, r17
     1da:	3b 2d       	mov	r19, r11
     1dc:	4a 2d       	mov	r20, r10
     1de:	59 2d       	mov	r21, r9
     1e0:	68 2d       	mov	r22, r8
     1e2:	73 2d       	mov	r23, r3
     1e4:	82 2d       	mov	r24, r2
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	04 2d       	mov	r16, r4
     1ea:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__lshrdi3>
     1ee:	c9 01       	movw	r24, r18
     1f0:	da 01       	movw	r26, r20
     1f2:	4c 01       	movw	r8, r24
     1f4:	5d 01       	movw	r10, r26
     1f6:	80 e2       	ldi	r24, 0x20	; 32
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	84 19       	sub	r24, r4
     1fc:	95 09       	sbc	r25, r5
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <__floatundisf+0x11e>
     200:	cc 0c       	add	r12, r12
     202:	dd 1c       	adc	r13, r13
     204:	ee 1c       	adc	r14, r14
     206:	ff 1c       	adc	r15, r15
     208:	8a 95       	dec	r24
     20a:	d2 f7       	brpl	.-12     	; 0x200 <__floatundisf+0x116>
     20c:	c1 14       	cp	r12, r1
     20e:	d1 04       	cpc	r13, r1
     210:	e1 04       	cpc	r14, r1
     212:	f1 04       	cpc	r15, r1
     214:	41 f0       	breq	.+16     	; 0x226 <__floatundisf+0x13c>
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	88 2a       	or	r8, r24
     220:	99 2a       	or	r9, r25
     222:	aa 2a       	or	r10, r26
     224:	bb 2a       	or	r11, r27
     226:	90 e2       	ldi	r25, 0x20	; 32
     228:	49 16       	cp	r4, r25
     22a:	51 04       	cpc	r5, r1
     22c:	61 04       	cpc	r6, r1
     22e:	71 04       	cpc	r7, r1
     230:	59 f4       	brne	.+22     	; 0x248 <__floatundisf+0x15e>
     232:	0f 2e       	mov	r0, r31
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	ef 2e       	mov	r14, r31
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ff 2e       	mov	r15, r31
     23c:	f0 e8       	ldi	r31, 0x80	; 128
     23e:	0f 2f       	mov	r16, r31
     240:	ff e4       	ldi	r31, 0x4F	; 79
     242:	1f 2f       	mov	r17, r31
     244:	f0 2d       	mov	r31, r0
     246:	21 c0       	rjmp	.+66     	; 0x28a <__floatundisf+0x1a0>
     248:	af e1       	ldi	r26, 0x1F	; 31
     24a:	4a 16       	cp	r4, r26
     24c:	51 04       	cpc	r5, r1
     24e:	61 04       	cpc	r6, r1
     250:	71 04       	cpc	r7, r1
     252:	59 f4       	brne	.+22     	; 0x26a <__floatundisf+0x180>
     254:	0f 2e       	mov	r0, r31
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ef 2e       	mov	r14, r31
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	ff 2e       	mov	r15, r31
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	0f 2f       	mov	r16, r31
     262:	ff e4       	ldi	r31, 0x4F	; 79
     264:	1f 2f       	mov	r17, r31
     266:	f0 2d       	mov	r31, r0
     268:	10 c0       	rjmp	.+32     	; 0x28a <__floatundisf+0x1a0>
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	09 80       	ldd	r0, Y+1	; 0x01
     274:	04 c0       	rjmp	.+8      	; 0x27e <__floatundisf+0x194>
     276:	66 0f       	add	r22, r22
     278:	77 1f       	adc	r23, r23
     27a:	88 1f       	adc	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	0a 94       	dec	r0
     280:	d2 f7       	brpl	.-12     	; 0x276 <__floatundisf+0x18c>
     282:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
     286:	7b 01       	movw	r14, r22
     288:	8c 01       	movw	r16, r24
     28a:	c5 01       	movw	r24, r10
     28c:	b4 01       	movw	r22, r8
     28e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
     292:	a8 01       	movw	r20, r16
     294:	97 01       	movw	r18, r14
     296:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
     29a:	22 96       	adiw	r28, 0x02	; 2
     29c:	e2 e1       	ldi	r30, 0x12	; 18
     29e:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__epilogue_restores__>

000002a2 <_fpadd_parts>:
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e7 e5       	ldi	r30, 0x57	; 87
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__prologue_saves__>
     2ae:	dc 01       	movw	r26, r24
     2b0:	2b 01       	movw	r4, r22
     2b2:	fa 01       	movw	r30, r20
     2b4:	9c 91       	ld	r25, X
     2b6:	92 30       	cpi	r25, 0x02	; 2
     2b8:	08 f4       	brcc	.+2      	; 0x2bc <_fpadd_parts+0x1a>
     2ba:	39 c1       	rjmp	.+626    	; 0x52e <_fpadd_parts+0x28c>
     2bc:	eb 01       	movw	r28, r22
     2be:	88 81       	ld	r24, Y
     2c0:	82 30       	cpi	r24, 0x02	; 2
     2c2:	08 f4       	brcc	.+2      	; 0x2c6 <_fpadd_parts+0x24>
     2c4:	33 c1       	rjmp	.+614    	; 0x52c <_fpadd_parts+0x28a>
     2c6:	94 30       	cpi	r25, 0x04	; 4
     2c8:	69 f4       	brne	.+26     	; 0x2e4 <_fpadd_parts+0x42>
     2ca:	84 30       	cpi	r24, 0x04	; 4
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <_fpadd_parts+0x2e>
     2ce:	2f c1       	rjmp	.+606    	; 0x52e <_fpadd_parts+0x28c>
     2d0:	11 96       	adiw	r26, 0x01	; 1
     2d2:	9c 91       	ld	r25, X
     2d4:	11 97       	sbiw	r26, 0x01	; 1
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	98 17       	cp	r25, r24
     2da:	09 f4       	brne	.+2      	; 0x2de <_fpadd_parts+0x3c>
     2dc:	28 c1       	rjmp	.+592    	; 0x52e <_fpadd_parts+0x28c>
     2de:	a0 ec       	ldi	r26, 0xC0	; 192
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	25 c1       	rjmp	.+586    	; 0x52e <_fpadd_parts+0x28c>
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	09 f4       	brne	.+2      	; 0x2ea <_fpadd_parts+0x48>
     2e8:	21 c1       	rjmp	.+578    	; 0x52c <_fpadd_parts+0x28a>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	a9 f4       	brne	.+42     	; 0x318 <_fpadd_parts+0x76>
     2ee:	92 30       	cpi	r25, 0x02	; 2
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <_fpadd_parts+0x52>
     2f2:	1d c1       	rjmp	.+570    	; 0x52e <_fpadd_parts+0x28c>
     2f4:	9a 01       	movw	r18, r20
     2f6:	ad 01       	movw	r20, r26
     2f8:	88 e0       	ldi	r24, 0x08	; 8
     2fa:	ea 01       	movw	r28, r20
     2fc:	09 90       	ld	r0, Y+
     2fe:	ae 01       	movw	r20, r28
     300:	e9 01       	movw	r28, r18
     302:	09 92       	st	Y+, r0
     304:	9e 01       	movw	r18, r28
     306:	81 50       	subi	r24, 0x01	; 1
     308:	c1 f7       	brne	.-16     	; 0x2fa <_fpadd_parts+0x58>
     30a:	e2 01       	movw	r28, r4
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	11 96       	adiw	r26, 0x01	; 1
     310:	9c 91       	ld	r25, X
     312:	89 23       	and	r24, r25
     314:	81 83       	std	Z+1, r24	; 0x01
     316:	08 c1       	rjmp	.+528    	; 0x528 <_fpadd_parts+0x286>
     318:	92 30       	cpi	r25, 0x02	; 2
     31a:	09 f4       	brne	.+2      	; 0x31e <_fpadd_parts+0x7c>
     31c:	07 c1       	rjmp	.+526    	; 0x52c <_fpadd_parts+0x28a>
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	2d 90       	ld	r2, X+
     322:	3c 90       	ld	r3, X
     324:	13 97       	sbiw	r26, 0x03	; 3
     326:	eb 01       	movw	r28, r22
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	9b 81       	ldd	r25, Y+3	; 0x03
     32c:	14 96       	adiw	r26, 0x04	; 4
     32e:	ad 90       	ld	r10, X+
     330:	bd 90       	ld	r11, X+
     332:	cd 90       	ld	r12, X+
     334:	dc 90       	ld	r13, X
     336:	17 97       	sbiw	r26, 0x07	; 7
     338:	ec 80       	ldd	r14, Y+4	; 0x04
     33a:	fd 80       	ldd	r15, Y+5	; 0x05
     33c:	0e 81       	ldd	r16, Y+6	; 0x06
     33e:	1f 81       	ldd	r17, Y+7	; 0x07
     340:	91 01       	movw	r18, r2
     342:	28 1b       	sub	r18, r24
     344:	39 0b       	sbc	r19, r25
     346:	b9 01       	movw	r22, r18
     348:	37 ff       	sbrs	r19, 7
     34a:	04 c0       	rjmp	.+8      	; 0x354 <_fpadd_parts+0xb2>
     34c:	66 27       	eor	r22, r22
     34e:	77 27       	eor	r23, r23
     350:	62 1b       	sub	r22, r18
     352:	73 0b       	sbc	r23, r19
     354:	60 32       	cpi	r22, 0x20	; 32
     356:	71 05       	cpc	r23, r1
     358:	0c f0       	brlt	.+2      	; 0x35c <_fpadd_parts+0xba>
     35a:	61 c0       	rjmp	.+194    	; 0x41e <_fpadd_parts+0x17c>
     35c:	12 16       	cp	r1, r18
     35e:	13 06       	cpc	r1, r19
     360:	6c f5       	brge	.+90     	; 0x3bc <_fpadd_parts+0x11a>
     362:	37 01       	movw	r6, r14
     364:	48 01       	movw	r8, r16
     366:	06 2e       	mov	r0, r22
     368:	04 c0       	rjmp	.+8      	; 0x372 <_fpadd_parts+0xd0>
     36a:	96 94       	lsr	r9
     36c:	87 94       	ror	r8
     36e:	77 94       	ror	r7
     370:	67 94       	ror	r6
     372:	0a 94       	dec	r0
     374:	d2 f7       	brpl	.-12     	; 0x36a <_fpadd_parts+0xc8>
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	04 c0       	rjmp	.+8      	; 0x388 <_fpadd_parts+0xe6>
     380:	22 0f       	add	r18, r18
     382:	33 1f       	adc	r19, r19
     384:	44 1f       	adc	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	6a 95       	dec	r22
     38a:	d2 f7       	brpl	.-12     	; 0x380 <_fpadd_parts+0xde>
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	30 40       	sbci	r19, 0x00	; 0
     390:	40 40       	sbci	r20, 0x00	; 0
     392:	50 40       	sbci	r21, 0x00	; 0
     394:	2e 21       	and	r18, r14
     396:	3f 21       	and	r19, r15
     398:	40 23       	and	r20, r16
     39a:	51 23       	and	r21, r17
     39c:	21 15       	cp	r18, r1
     39e:	31 05       	cpc	r19, r1
     3a0:	41 05       	cpc	r20, r1
     3a2:	51 05       	cpc	r21, r1
     3a4:	21 f0       	breq	.+8      	; 0x3ae <_fpadd_parts+0x10c>
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	79 01       	movw	r14, r18
     3b0:	8a 01       	movw	r16, r20
     3b2:	e6 28       	or	r14, r6
     3b4:	f7 28       	or	r15, r7
     3b6:	08 29       	or	r16, r8
     3b8:	19 29       	or	r17, r9
     3ba:	3c c0       	rjmp	.+120    	; 0x434 <_fpadd_parts+0x192>
     3bc:	23 2b       	or	r18, r19
     3be:	d1 f1       	breq	.+116    	; 0x434 <_fpadd_parts+0x192>
     3c0:	26 0e       	add	r2, r22
     3c2:	37 1e       	adc	r3, r23
     3c4:	35 01       	movw	r6, r10
     3c6:	46 01       	movw	r8, r12
     3c8:	06 2e       	mov	r0, r22
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0x132>
     3cc:	96 94       	lsr	r9
     3ce:	87 94       	ror	r8
     3d0:	77 94       	ror	r7
     3d2:	67 94       	ror	r6
     3d4:	0a 94       	dec	r0
     3d6:	d2 f7       	brpl	.-12     	; 0x3cc <_fpadd_parts+0x12a>
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <_fpadd_parts+0x148>
     3e2:	22 0f       	add	r18, r18
     3e4:	33 1f       	adc	r19, r19
     3e6:	44 1f       	adc	r20, r20
     3e8:	55 1f       	adc	r21, r21
     3ea:	6a 95       	dec	r22
     3ec:	d2 f7       	brpl	.-12     	; 0x3e2 <_fpadd_parts+0x140>
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	30 40       	sbci	r19, 0x00	; 0
     3f2:	40 40       	sbci	r20, 0x00	; 0
     3f4:	50 40       	sbci	r21, 0x00	; 0
     3f6:	2a 21       	and	r18, r10
     3f8:	3b 21       	and	r19, r11
     3fa:	4c 21       	and	r20, r12
     3fc:	5d 21       	and	r21, r13
     3fe:	21 15       	cp	r18, r1
     400:	31 05       	cpc	r19, r1
     402:	41 05       	cpc	r20, r1
     404:	51 05       	cpc	r21, r1
     406:	21 f0       	breq	.+8      	; 0x410 <_fpadd_parts+0x16e>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	59 01       	movw	r10, r18
     412:	6a 01       	movw	r12, r20
     414:	a6 28       	or	r10, r6
     416:	b7 28       	or	r11, r7
     418:	c8 28       	or	r12, r8
     41a:	d9 28       	or	r13, r9
     41c:	0b c0       	rjmp	.+22     	; 0x434 <_fpadd_parts+0x192>
     41e:	82 15       	cp	r24, r2
     420:	93 05       	cpc	r25, r3
     422:	2c f0       	brlt	.+10     	; 0x42e <_fpadd_parts+0x18c>
     424:	1c 01       	movw	r2, r24
     426:	aa 24       	eor	r10, r10
     428:	bb 24       	eor	r11, r11
     42a:	65 01       	movw	r12, r10
     42c:	03 c0       	rjmp	.+6      	; 0x434 <_fpadd_parts+0x192>
     42e:	ee 24       	eor	r14, r14
     430:	ff 24       	eor	r15, r15
     432:	87 01       	movw	r16, r14
     434:	11 96       	adiw	r26, 0x01	; 1
     436:	9c 91       	ld	r25, X
     438:	d2 01       	movw	r26, r4
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	8c 91       	ld	r24, X
     43e:	98 17       	cp	r25, r24
     440:	09 f4       	brne	.+2      	; 0x444 <_fpadd_parts+0x1a2>
     442:	45 c0       	rjmp	.+138    	; 0x4ce <_fpadd_parts+0x22c>
     444:	99 23       	and	r25, r25
     446:	39 f0       	breq	.+14     	; 0x456 <_fpadd_parts+0x1b4>
     448:	a8 01       	movw	r20, r16
     44a:	97 01       	movw	r18, r14
     44c:	2a 19       	sub	r18, r10
     44e:	3b 09       	sbc	r19, r11
     450:	4c 09       	sbc	r20, r12
     452:	5d 09       	sbc	r21, r13
     454:	06 c0       	rjmp	.+12     	; 0x462 <_fpadd_parts+0x1c0>
     456:	a6 01       	movw	r20, r12
     458:	95 01       	movw	r18, r10
     45a:	2e 19       	sub	r18, r14
     45c:	3f 09       	sbc	r19, r15
     45e:	40 0b       	sbc	r20, r16
     460:	51 0b       	sbc	r21, r17
     462:	57 fd       	sbrc	r21, 7
     464:	08 c0       	rjmp	.+16     	; 0x476 <_fpadd_parts+0x1d4>
     466:	11 82       	std	Z+1, r1	; 0x01
     468:	33 82       	std	Z+3, r3	; 0x03
     46a:	22 82       	std	Z+2, r2	; 0x02
     46c:	24 83       	std	Z+4, r18	; 0x04
     46e:	35 83       	std	Z+5, r19	; 0x05
     470:	46 83       	std	Z+6, r20	; 0x06
     472:	57 83       	std	Z+7, r21	; 0x07
     474:	1d c0       	rjmp	.+58     	; 0x4b0 <_fpadd_parts+0x20e>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	81 83       	std	Z+1, r24	; 0x01
     47a:	33 82       	std	Z+3, r3	; 0x03
     47c:	22 82       	std	Z+2, r2	; 0x02
     47e:	88 27       	eor	r24, r24
     480:	99 27       	eor	r25, r25
     482:	dc 01       	movw	r26, r24
     484:	82 1b       	sub	r24, r18
     486:	93 0b       	sbc	r25, r19
     488:	a4 0b       	sbc	r26, r20
     48a:	b5 0b       	sbc	r27, r21
     48c:	84 83       	std	Z+4, r24	; 0x04
     48e:	95 83       	std	Z+5, r25	; 0x05
     490:	a6 83       	std	Z+6, r26	; 0x06
     492:	b7 83       	std	Z+7, r27	; 0x07
     494:	0d c0       	rjmp	.+26     	; 0x4b0 <_fpadd_parts+0x20e>
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	44 1f       	adc	r20, r20
     49c:	55 1f       	adc	r21, r21
     49e:	24 83       	std	Z+4, r18	; 0x04
     4a0:	35 83       	std	Z+5, r19	; 0x05
     4a2:	46 83       	std	Z+6, r20	; 0x06
     4a4:	57 83       	std	Z+7, r21	; 0x07
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	93 81       	ldd	r25, Z+3	; 0x03
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	93 83       	std	Z+3, r25	; 0x03
     4ae:	82 83       	std	Z+2, r24	; 0x02
     4b0:	24 81       	ldd	r18, Z+4	; 0x04
     4b2:	35 81       	ldd	r19, Z+5	; 0x05
     4b4:	46 81       	ldd	r20, Z+6	; 0x06
     4b6:	57 81       	ldd	r21, Z+7	; 0x07
     4b8:	da 01       	movw	r26, r20
     4ba:	c9 01       	movw	r24, r18
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	a1 09       	sbc	r26, r1
     4c0:	b1 09       	sbc	r27, r1
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	9f 4f       	sbci	r25, 0xFF	; 255
     4c6:	af 4f       	sbci	r26, 0xFF	; 255
     4c8:	bf 43       	sbci	r27, 0x3F	; 63
     4ca:	28 f3       	brcs	.-54     	; 0x496 <_fpadd_parts+0x1f4>
     4cc:	0b c0       	rjmp	.+22     	; 0x4e4 <_fpadd_parts+0x242>
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	33 82       	std	Z+3, r3	; 0x03
     4d2:	22 82       	std	Z+2, r2	; 0x02
     4d4:	ea 0c       	add	r14, r10
     4d6:	fb 1c       	adc	r15, r11
     4d8:	0c 1d       	adc	r16, r12
     4da:	1d 1d       	adc	r17, r13
     4dc:	e4 82       	std	Z+4, r14	; 0x04
     4de:	f5 82       	std	Z+5, r15	; 0x05
     4e0:	06 83       	std	Z+6, r16	; 0x06
     4e2:	17 83       	std	Z+7, r17	; 0x07
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	80 83       	st	Z, r24
     4e8:	24 81       	ldd	r18, Z+4	; 0x04
     4ea:	35 81       	ldd	r19, Z+5	; 0x05
     4ec:	46 81       	ldd	r20, Z+6	; 0x06
     4ee:	57 81       	ldd	r21, Z+7	; 0x07
     4f0:	57 ff       	sbrs	r21, 7
     4f2:	1a c0       	rjmp	.+52     	; 0x528 <_fpadd_parts+0x286>
     4f4:	c9 01       	movw	r24, r18
     4f6:	aa 27       	eor	r26, r26
     4f8:	97 fd       	sbrc	r25, 7
     4fa:	a0 95       	com	r26
     4fc:	ba 2f       	mov	r27, r26
     4fe:	81 70       	andi	r24, 0x01	; 1
     500:	90 70       	andi	r25, 0x00	; 0
     502:	a0 70       	andi	r26, 0x00	; 0
     504:	b0 70       	andi	r27, 0x00	; 0
     506:	56 95       	lsr	r21
     508:	47 95       	ror	r20
     50a:	37 95       	ror	r19
     50c:	27 95       	ror	r18
     50e:	82 2b       	or	r24, r18
     510:	93 2b       	or	r25, r19
     512:	a4 2b       	or	r26, r20
     514:	b5 2b       	or	r27, r21
     516:	84 83       	std	Z+4, r24	; 0x04
     518:	95 83       	std	Z+5, r25	; 0x05
     51a:	a6 83       	std	Z+6, r26	; 0x06
     51c:	b7 83       	std	Z+7, r27	; 0x07
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	93 83       	std	Z+3, r25	; 0x03
     526:	82 83       	std	Z+2, r24	; 0x02
     528:	df 01       	movw	r26, r30
     52a:	01 c0       	rjmp	.+2      	; 0x52e <_fpadd_parts+0x28c>
     52c:	d2 01       	movw	r26, r4
     52e:	cd 01       	movw	r24, r26
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	e2 e1       	ldi	r30, 0x12	; 18
     536:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__epilogue_restores__>

0000053a <__subsf3>:
     53a:	a0 e2       	ldi	r26, 0x20	; 32
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	e3 ea       	ldi	r30, 0xA3	; 163
     540:	f2 e0       	ldi	r31, 0x02	; 2
     542:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__+0x18>
     546:	69 83       	std	Y+1, r22	; 0x01
     548:	7a 83       	std	Y+2, r23	; 0x02
     54a:	8b 83       	std	Y+3, r24	; 0x03
     54c:	9c 83       	std	Y+4, r25	; 0x04
     54e:	2d 83       	std	Y+5, r18	; 0x05
     550:	3e 83       	std	Y+6, r19	; 0x06
     552:	4f 83       	std	Y+7, r20	; 0x07
     554:	58 87       	std	Y+8, r21	; 0x08
     556:	e9 e0       	ldi	r30, 0x09	; 9
     558:	ee 2e       	mov	r14, r30
     55a:	f1 2c       	mov	r15, r1
     55c:	ec 0e       	add	r14, r28
     55e:	fd 1e       	adc	r15, r29
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	b7 01       	movw	r22, r14
     566:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     56a:	8e 01       	movw	r16, r28
     56c:	0f 5e       	subi	r16, 0xEF	; 239
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	ce 01       	movw	r24, r28
     572:	05 96       	adiw	r24, 0x05	; 5
     574:	b8 01       	movw	r22, r16
     576:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     57a:	8a 89       	ldd	r24, Y+18	; 0x12
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	89 27       	eor	r24, r25
     580:	8a 8b       	std	Y+18, r24	; 0x12
     582:	c7 01       	movw	r24, r14
     584:	b8 01       	movw	r22, r16
     586:	ae 01       	movw	r20, r28
     588:	47 5e       	subi	r20, 0xE7	; 231
     58a:	5f 4f       	sbci	r21, 0xFF	; 255
     58c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_fpadd_parts>
     590:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     594:	a0 96       	adiw	r28, 0x20	; 32
     596:	e6 e0       	ldi	r30, 0x06	; 6
     598:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__+0x18>

0000059c <__addsf3>:
     59c:	a0 e2       	ldi	r26, 0x20	; 32
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	e4 ed       	ldi	r30, 0xD4	; 212
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__+0x18>
     5a8:	69 83       	std	Y+1, r22	; 0x01
     5aa:	7a 83       	std	Y+2, r23	; 0x02
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	9c 83       	std	Y+4, r25	; 0x04
     5b0:	2d 83       	std	Y+5, r18	; 0x05
     5b2:	3e 83       	std	Y+6, r19	; 0x06
     5b4:	4f 83       	std	Y+7, r20	; 0x07
     5b6:	58 87       	std	Y+8, r21	; 0x08
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	ef 2e       	mov	r14, r31
     5bc:	f1 2c       	mov	r15, r1
     5be:	ec 0e       	add	r14, r28
     5c0:	fd 1e       	adc	r15, r29
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	b7 01       	movw	r22, r14
     5c8:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     5cc:	8e 01       	movw	r16, r28
     5ce:	0f 5e       	subi	r16, 0xEF	; 239
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	ce 01       	movw	r24, r28
     5d4:	05 96       	adiw	r24, 0x05	; 5
     5d6:	b8 01       	movw	r22, r16
     5d8:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     5dc:	c7 01       	movw	r24, r14
     5de:	b8 01       	movw	r22, r16
     5e0:	ae 01       	movw	r20, r28
     5e2:	47 5e       	subi	r20, 0xE7	; 231
     5e4:	5f 4f       	sbci	r21, 0xFF	; 255
     5e6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_fpadd_parts>
     5ea:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     5ee:	a0 96       	adiw	r28, 0x20	; 32
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__+0x18>

000005f6 <__mulsf3>:
     5f6:	a0 e2       	ldi	r26, 0x20	; 32
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__prologue_saves__>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	2d 83       	std	Y+5, r18	; 0x05
     60c:	3e 83       	std	Y+6, r19	; 0x06
     60e:	4f 83       	std	Y+7, r20	; 0x07
     610:	58 87       	std	Y+8, r21	; 0x08
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	be 01       	movw	r22, r28
     618:	67 5f       	subi	r22, 0xF7	; 247
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     620:	ce 01       	movw	r24, r28
     622:	05 96       	adiw	r24, 0x05	; 5
     624:	be 01       	movw	r22, r28
     626:	6f 5e       	subi	r22, 0xEF	; 239
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     62e:	99 85       	ldd	r25, Y+9	; 0x09
     630:	92 30       	cpi	r25, 0x02	; 2
     632:	88 f0       	brcs	.+34     	; 0x656 <__mulsf3+0x60>
     634:	89 89       	ldd	r24, Y+17	; 0x11
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	c8 f0       	brcs	.+50     	; 0x66c <__mulsf3+0x76>
     63a:	94 30       	cpi	r25, 0x04	; 4
     63c:	19 f4       	brne	.+6      	; 0x644 <__mulsf3+0x4e>
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	51 f4       	brne	.+20     	; 0x656 <__mulsf3+0x60>
     642:	04 c0       	rjmp	.+8      	; 0x64c <__mulsf3+0x56>
     644:	84 30       	cpi	r24, 0x04	; 4
     646:	29 f4       	brne	.+10     	; 0x652 <__mulsf3+0x5c>
     648:	92 30       	cpi	r25, 0x02	; 2
     64a:	81 f4       	brne	.+32     	; 0x66c <__mulsf3+0x76>
     64c:	80 ec       	ldi	r24, 0xC0	; 192
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	c6 c0       	rjmp	.+396    	; 0x7de <__mulsf3+0x1e8>
     652:	92 30       	cpi	r25, 0x02	; 2
     654:	49 f4       	brne	.+18     	; 0x668 <__mulsf3+0x72>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	9a 85       	ldd	r25, Y+10	; 0x0a
     65a:	8a 89       	ldd	r24, Y+18	; 0x12
     65c:	98 13       	cpse	r25, r24
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	2a 87       	std	Y+10, r18	; 0x0a
     662:	ce 01       	movw	r24, r28
     664:	09 96       	adiw	r24, 0x09	; 9
     666:	bb c0       	rjmp	.+374    	; 0x7de <__mulsf3+0x1e8>
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	49 f4       	brne	.+18     	; 0x67e <__mulsf3+0x88>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	9a 85       	ldd	r25, Y+10	; 0x0a
     670:	8a 89       	ldd	r24, Y+18	; 0x12
     672:	98 13       	cpse	r25, r24
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	2a 8b       	std	Y+18, r18	; 0x12
     678:	ce 01       	movw	r24, r28
     67a:	41 96       	adiw	r24, 0x11	; 17
     67c:	b0 c0       	rjmp	.+352    	; 0x7de <__mulsf3+0x1e8>
     67e:	2d 84       	ldd	r2, Y+13	; 0x0d
     680:	3e 84       	ldd	r3, Y+14	; 0x0e
     682:	4f 84       	ldd	r4, Y+15	; 0x0f
     684:	58 88       	ldd	r5, Y+16	; 0x10
     686:	6d 88       	ldd	r6, Y+21	; 0x15
     688:	7e 88       	ldd	r7, Y+22	; 0x16
     68a:	8f 88       	ldd	r8, Y+23	; 0x17
     68c:	98 8c       	ldd	r9, Y+24	; 0x18
     68e:	ee 24       	eor	r14, r14
     690:	ff 24       	eor	r15, r15
     692:	87 01       	movw	r16, r14
     694:	aa 24       	eor	r10, r10
     696:	bb 24       	eor	r11, r11
     698:	65 01       	movw	r12, r10
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	e0 e0       	ldi	r30, 0x00	; 0
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	c1 01       	movw	r24, r2
     6a8:	81 70       	andi	r24, 0x01	; 1
     6aa:	90 70       	andi	r25, 0x00	; 0
     6ac:	89 2b       	or	r24, r25
     6ae:	e9 f0       	breq	.+58     	; 0x6ea <__mulsf3+0xf4>
     6b0:	e6 0c       	add	r14, r6
     6b2:	f7 1c       	adc	r15, r7
     6b4:	08 1d       	adc	r16, r8
     6b6:	19 1d       	adc	r17, r9
     6b8:	9a 01       	movw	r18, r20
     6ba:	ab 01       	movw	r20, r22
     6bc:	2a 0d       	add	r18, r10
     6be:	3b 1d       	adc	r19, r11
     6c0:	4c 1d       	adc	r20, r12
     6c2:	5d 1d       	adc	r21, r13
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	a0 e0       	ldi	r26, 0x00	; 0
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	e6 14       	cp	r14, r6
     6ce:	f7 04       	cpc	r15, r7
     6d0:	08 05       	cpc	r16, r8
     6d2:	19 05       	cpc	r17, r9
     6d4:	20 f4       	brcc	.+8      	; 0x6de <__mulsf3+0xe8>
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	ba 01       	movw	r22, r20
     6e0:	a9 01       	movw	r20, r18
     6e2:	48 0f       	add	r20, r24
     6e4:	59 1f       	adc	r21, r25
     6e6:	6a 1f       	adc	r22, r26
     6e8:	7b 1f       	adc	r23, r27
     6ea:	aa 0c       	add	r10, r10
     6ec:	bb 1c       	adc	r11, r11
     6ee:	cc 1c       	adc	r12, r12
     6f0:	dd 1c       	adc	r13, r13
     6f2:	97 fe       	sbrs	r9, 7
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <__mulsf3+0x110>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	a0 e0       	ldi	r26, 0x00	; 0
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	a8 2a       	or	r10, r24
     700:	b9 2a       	or	r11, r25
     702:	ca 2a       	or	r12, r26
     704:	db 2a       	or	r13, r27
     706:	31 96       	adiw	r30, 0x01	; 1
     708:	e0 32       	cpi	r30, 0x20	; 32
     70a:	f1 05       	cpc	r31, r1
     70c:	49 f0       	breq	.+18     	; 0x720 <__mulsf3+0x12a>
     70e:	66 0c       	add	r6, r6
     710:	77 1c       	adc	r7, r7
     712:	88 1c       	adc	r8, r8
     714:	99 1c       	adc	r9, r9
     716:	56 94       	lsr	r5
     718:	47 94       	ror	r4
     71a:	37 94       	ror	r3
     71c:	27 94       	ror	r2
     71e:	c3 cf       	rjmp	.-122    	; 0x6a6 <__mulsf3+0xb0>
     720:	fa 85       	ldd	r31, Y+10	; 0x0a
     722:	ea 89       	ldd	r30, Y+18	; 0x12
     724:	2b 89       	ldd	r18, Y+19	; 0x13
     726:	3c 89       	ldd	r19, Y+20	; 0x14
     728:	8b 85       	ldd	r24, Y+11	; 0x0b
     72a:	9c 85       	ldd	r25, Y+12	; 0x0c
     72c:	28 0f       	add	r18, r24
     72e:	39 1f       	adc	r19, r25
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	17 c0       	rjmp	.+46     	; 0x764 <__mulsf3+0x16e>
     736:	ca 01       	movw	r24, r20
     738:	81 70       	andi	r24, 0x01	; 1
     73a:	90 70       	andi	r25, 0x00	; 0
     73c:	89 2b       	or	r24, r25
     73e:	61 f0       	breq	.+24     	; 0x758 <__mulsf3+0x162>
     740:	16 95       	lsr	r17
     742:	07 95       	ror	r16
     744:	f7 94       	ror	r15
     746:	e7 94       	ror	r14
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e8       	ldi	r27, 0x80	; 128
     750:	e8 2a       	or	r14, r24
     752:	f9 2a       	or	r15, r25
     754:	0a 2b       	or	r16, r26
     756:	1b 2b       	or	r17, r27
     758:	76 95       	lsr	r23
     75a:	67 95       	ror	r22
     75c:	57 95       	ror	r21
     75e:	47 95       	ror	r20
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	77 fd       	sbrc	r23, 7
     766:	e7 cf       	rjmp	.-50     	; 0x736 <__mulsf3+0x140>
     768:	0c c0       	rjmp	.+24     	; 0x782 <__mulsf3+0x18c>
     76a:	44 0f       	add	r20, r20
     76c:	55 1f       	adc	r21, r21
     76e:	66 1f       	adc	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	17 fd       	sbrc	r17, 7
     774:	41 60       	ori	r20, 0x01	; 1
     776:	ee 0c       	add	r14, r14
     778:	ff 1c       	adc	r15, r15
     77a:	00 1f       	adc	r16, r16
     77c:	11 1f       	adc	r17, r17
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	30 40       	sbci	r19, 0x00	; 0
     782:	40 30       	cpi	r20, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	59 07       	cpc	r21, r25
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	69 07       	cpc	r22, r25
     78c:	90 e4       	ldi	r25, 0x40	; 64
     78e:	79 07       	cpc	r23, r25
     790:	60 f3       	brcs	.-40     	; 0x76a <__mulsf3+0x174>
     792:	2b 8f       	std	Y+27, r18	; 0x1b
     794:	3c 8f       	std	Y+28, r19	; 0x1c
     796:	db 01       	movw	r26, r22
     798:	ca 01       	movw	r24, r20
     79a:	8f 77       	andi	r24, 0x7F	; 127
     79c:	90 70       	andi	r25, 0x00	; 0
     79e:	a0 70       	andi	r26, 0x00	; 0
     7a0:	b0 70       	andi	r27, 0x00	; 0
     7a2:	80 34       	cpi	r24, 0x40	; 64
     7a4:	91 05       	cpc	r25, r1
     7a6:	a1 05       	cpc	r26, r1
     7a8:	b1 05       	cpc	r27, r1
     7aa:	61 f4       	brne	.+24     	; 0x7c4 <__mulsf3+0x1ce>
     7ac:	47 fd       	sbrc	r20, 7
     7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <__mulsf3+0x1ce>
     7b0:	e1 14       	cp	r14, r1
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	29 f0       	breq	.+10     	; 0x7c4 <__mulsf3+0x1ce>
     7ba:	40 5c       	subi	r20, 0xC0	; 192
     7bc:	5f 4f       	sbci	r21, 0xFF	; 255
     7be:	6f 4f       	sbci	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	40 78       	andi	r20, 0x80	; 128
     7c4:	1a 8e       	std	Y+26, r1	; 0x1a
     7c6:	fe 17       	cp	r31, r30
     7c8:	11 f0       	breq	.+4      	; 0x7ce <__mulsf3+0x1d8>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	8a 8f       	std	Y+26, r24	; 0x1a
     7ce:	4d 8f       	std	Y+29, r20	; 0x1d
     7d0:	5e 8f       	std	Y+30, r21	; 0x1e
     7d2:	6f 8f       	std	Y+31, r22	; 0x1f
     7d4:	78 a3       	std	Y+32, r23	; 0x20
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	89 8f       	std	Y+25, r24	; 0x19
     7da:	ce 01       	movw	r24, r28
     7dc:	49 96       	adiw	r24, 0x19	; 25
     7de:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     7e2:	a0 96       	adiw	r28, 0x20	; 32
     7e4:	e2 e1       	ldi	r30, 0x12	; 18
     7e6:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__epilogue_restores__>

000007ea <__divsf3>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x10>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	b9 e0       	ldi	r27, 0x09	; 9
     808:	eb 2e       	mov	r14, r27
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     82a:	29 85       	ldd	r18, Y+9	; 0x09
     82c:	22 30       	cpi	r18, 0x02	; 2
     82e:	08 f4       	brcc	.+2      	; 0x832 <__divsf3+0x48>
     830:	7e c0       	rjmp	.+252    	; 0x92e <__stack+0xcf>
     832:	39 89       	ldd	r19, Y+17	; 0x11
     834:	32 30       	cpi	r19, 0x02	; 2
     836:	10 f4       	brcc	.+4      	; 0x83c <__divsf3+0x52>
     838:	b8 01       	movw	r22, r16
     83a:	7c c0       	rjmp	.+248    	; 0x934 <__stack+0xd5>
     83c:	8a 85       	ldd	r24, Y+10	; 0x0a
     83e:	9a 89       	ldd	r25, Y+18	; 0x12
     840:	89 27       	eor	r24, r25
     842:	8a 87       	std	Y+10, r24	; 0x0a
     844:	24 30       	cpi	r18, 0x04	; 4
     846:	11 f0       	breq	.+4      	; 0x84c <__divsf3+0x62>
     848:	22 30       	cpi	r18, 0x02	; 2
     84a:	31 f4       	brne	.+12     	; 0x858 <__divsf3+0x6e>
     84c:	23 17       	cp	r18, r19
     84e:	09 f0       	breq	.+2      	; 0x852 <__divsf3+0x68>
     850:	6e c0       	rjmp	.+220    	; 0x92e <__stack+0xcf>
     852:	60 ec       	ldi	r22, 0xC0	; 192
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	6e c0       	rjmp	.+220    	; 0x934 <__stack+0xd5>
     858:	34 30       	cpi	r19, 0x04	; 4
     85a:	39 f4       	brne	.+14     	; 0x86a <__stack+0xb>
     85c:	1d 86       	std	Y+13, r1	; 0x0d
     85e:	1e 86       	std	Y+14, r1	; 0x0e
     860:	1f 86       	std	Y+15, r1	; 0x0f
     862:	18 8a       	std	Y+16, r1	; 0x10
     864:	1c 86       	std	Y+12, r1	; 0x0c
     866:	1b 86       	std	Y+11, r1	; 0x0b
     868:	04 c0       	rjmp	.+8      	; 0x872 <__stack+0x13>
     86a:	32 30       	cpi	r19, 0x02	; 2
     86c:	21 f4       	brne	.+8      	; 0x876 <__stack+0x17>
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	89 87       	std	Y+9, r24	; 0x09
     872:	b7 01       	movw	r22, r14
     874:	5f c0       	rjmp	.+190    	; 0x934 <__stack+0xd5>
     876:	2b 85       	ldd	r18, Y+11	; 0x0b
     878:	3c 85       	ldd	r19, Y+12	; 0x0c
     87a:	8b 89       	ldd	r24, Y+19	; 0x13
     87c:	9c 89       	ldd	r25, Y+20	; 0x14
     87e:	28 1b       	sub	r18, r24
     880:	39 0b       	sbc	r19, r25
     882:	3c 87       	std	Y+12, r19	; 0x0c
     884:	2b 87       	std	Y+11, r18	; 0x0b
     886:	ed 84       	ldd	r14, Y+13	; 0x0d
     888:	fe 84       	ldd	r15, Y+14	; 0x0e
     88a:	0f 85       	ldd	r16, Y+15	; 0x0f
     88c:	18 89       	ldd	r17, Y+16	; 0x10
     88e:	ad 88       	ldd	r10, Y+21	; 0x15
     890:	be 88       	ldd	r11, Y+22	; 0x16
     892:	cf 88       	ldd	r12, Y+23	; 0x17
     894:	d8 8c       	ldd	r13, Y+24	; 0x18
     896:	ea 14       	cp	r14, r10
     898:	fb 04       	cpc	r15, r11
     89a:	0c 05       	cpc	r16, r12
     89c:	1d 05       	cpc	r17, r13
     89e:	40 f4       	brcc	.+16     	; 0x8b0 <__stack+0x51>
     8a0:	ee 0c       	add	r14, r14
     8a2:	ff 1c       	adc	r15, r15
     8a4:	00 1f       	adc	r16, r16
     8a6:	11 1f       	adc	r17, r17
     8a8:	21 50       	subi	r18, 0x01	; 1
     8aa:	30 40       	sbci	r19, 0x00	; 0
     8ac:	3c 87       	std	Y+12, r19	; 0x0c
     8ae:	2b 87       	std	Y+11, r18	; 0x0b
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e4       	ldi	r27, 0x40	; 64
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	ea 14       	cp	r14, r10
     8c6:	fb 04       	cpc	r15, r11
     8c8:	0c 05       	cpc	r16, r12
     8ca:	1d 05       	cpc	r17, r13
     8cc:	40 f0       	brcs	.+16     	; 0x8de <__stack+0x7f>
     8ce:	28 2b       	or	r18, r24
     8d0:	39 2b       	or	r19, r25
     8d2:	4a 2b       	or	r20, r26
     8d4:	5b 2b       	or	r21, r27
     8d6:	ea 18       	sub	r14, r10
     8d8:	fb 08       	sbc	r15, r11
     8da:	0c 09       	sbc	r16, r12
     8dc:	1d 09       	sbc	r17, r13
     8de:	b6 95       	lsr	r27
     8e0:	a7 95       	ror	r26
     8e2:	97 95       	ror	r25
     8e4:	87 95       	ror	r24
     8e6:	ee 0c       	add	r14, r14
     8e8:	ff 1c       	adc	r15, r15
     8ea:	00 1f       	adc	r16, r16
     8ec:	11 1f       	adc	r17, r17
     8ee:	6f 5f       	subi	r22, 0xFF	; 255
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	6f 31       	cpi	r22, 0x1F	; 31
     8f4:	71 05       	cpc	r23, r1
     8f6:	31 f7       	brne	.-52     	; 0x8c4 <__stack+0x65>
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	61 f4       	brne	.+24     	; 0x926 <__stack+0xc7>
     90e:	27 fd       	sbrc	r18, 7
     910:	0a c0       	rjmp	.+20     	; 0x926 <__stack+0xc7>
     912:	e1 14       	cp	r14, r1
     914:	f1 04       	cpc	r15, r1
     916:	01 05       	cpc	r16, r1
     918:	11 05       	cpc	r17, r1
     91a:	29 f0       	breq	.+10     	; 0x926 <__stack+0xc7>
     91c:	20 5c       	subi	r18, 0xC0	; 192
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	20 78       	andi	r18, 0x80	; 128
     926:	2d 87       	std	Y+13, r18	; 0x0d
     928:	3e 87       	std	Y+14, r19	; 0x0e
     92a:	4f 87       	std	Y+15, r20	; 0x0f
     92c:	58 8b       	std	Y+16, r21	; 0x10
     92e:	be 01       	movw	r22, r28
     930:	67 5f       	subi	r22, 0xF7	; 247
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	cb 01       	movw	r24, r22
     936:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     93a:	68 96       	adiw	r28, 0x18	; 24
     93c:	ea e0       	ldi	r30, 0x0A	; 10
     93e:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x10>

00000942 <__gtsf2>:
     942:	a8 e1       	ldi	r26, 0x18	; 24
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__+0x18>
     94e:	69 83       	std	Y+1, r22	; 0x01
     950:	7a 83       	std	Y+2, r23	; 0x02
     952:	8b 83       	std	Y+3, r24	; 0x03
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	2d 83       	std	Y+5, r18	; 0x05
     958:	3e 83       	std	Y+6, r19	; 0x06
     95a:	4f 83       	std	Y+7, r20	; 0x07
     95c:	58 87       	std	Y+8, r21	; 0x08
     95e:	89 e0       	ldi	r24, 0x09	; 9
     960:	e8 2e       	mov	r14, r24
     962:	f1 2c       	mov	r15, r1
     964:	ec 0e       	add	r14, r28
     966:	fd 1e       	adc	r15, r29
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	b7 01       	movw	r22, r14
     96e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     972:	8e 01       	movw	r16, r28
     974:	0f 5e       	subi	r16, 0xEF	; 239
     976:	1f 4f       	sbci	r17, 0xFF	; 255
     978:	ce 01       	movw	r24, r28
     97a:	05 96       	adiw	r24, 0x05	; 5
     97c:	b8 01       	movw	r22, r16
     97e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	40 f0       	brcs	.+16     	; 0x998 <__gtsf2+0x56>
     988:	89 89       	ldd	r24, Y+17	; 0x11
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	28 f0       	brcs	.+10     	; 0x998 <__gtsf2+0x56>
     98e:	c7 01       	movw	r24, r14
     990:	b8 01       	movw	r22, r16
     992:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     996:	01 c0       	rjmp	.+2      	; 0x99a <__gtsf2+0x58>
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	68 96       	adiw	r28, 0x18	; 24
     99c:	e6 e0       	ldi	r30, 0x06	; 6
     99e:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__+0x18>

000009a2 <__gesf2>:
     9a2:	a8 e1       	ldi	r26, 0x18	; 24
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__+0x18>
     9ae:	69 83       	std	Y+1, r22	; 0x01
     9b0:	7a 83       	std	Y+2, r23	; 0x02
     9b2:	8b 83       	std	Y+3, r24	; 0x03
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	2d 83       	std	Y+5, r18	; 0x05
     9b8:	3e 83       	std	Y+6, r19	; 0x06
     9ba:	4f 83       	std	Y+7, r20	; 0x07
     9bc:	58 87       	std	Y+8, r21	; 0x08
     9be:	89 e0       	ldi	r24, 0x09	; 9
     9c0:	e8 2e       	mov	r14, r24
     9c2:	f1 2c       	mov	r15, r1
     9c4:	ec 0e       	add	r14, r28
     9c6:	fd 1e       	adc	r15, r29
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	b7 01       	movw	r22, r14
     9ce:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     9d2:	8e 01       	movw	r16, r28
     9d4:	0f 5e       	subi	r16, 0xEF	; 239
     9d6:	1f 4f       	sbci	r17, 0xFF	; 255
     9d8:	ce 01       	movw	r24, r28
     9da:	05 96       	adiw	r24, 0x05	; 5
     9dc:	b8 01       	movw	r22, r16
     9de:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     9e2:	89 85       	ldd	r24, Y+9	; 0x09
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	40 f0       	brcs	.+16     	; 0x9f8 <__gesf2+0x56>
     9e8:	89 89       	ldd	r24, Y+17	; 0x11
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	28 f0       	brcs	.+10     	; 0x9f8 <__gesf2+0x56>
     9ee:	c7 01       	movw	r24, r14
     9f0:	b8 01       	movw	r22, r16
     9f2:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__gesf2+0x58>
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	68 96       	adiw	r28, 0x18	; 24
     9fc:	e6 e0       	ldi	r30, 0x06	; 6
     9fe:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__+0x18>

00000a02 <__ltsf2>:
     a02:	a8 e1       	ldi	r26, 0x18	; 24
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e7 e0       	ldi	r30, 0x07	; 7
     a08:	f5 e0       	ldi	r31, 0x05	; 5
     a0a:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__+0x18>
     a0e:	69 83       	std	Y+1, r22	; 0x01
     a10:	7a 83       	std	Y+2, r23	; 0x02
     a12:	8b 83       	std	Y+3, r24	; 0x03
     a14:	9c 83       	std	Y+4, r25	; 0x04
     a16:	2d 83       	std	Y+5, r18	; 0x05
     a18:	3e 83       	std	Y+6, r19	; 0x06
     a1a:	4f 83       	std	Y+7, r20	; 0x07
     a1c:	58 87       	std	Y+8, r21	; 0x08
     a1e:	89 e0       	ldi	r24, 0x09	; 9
     a20:	e8 2e       	mov	r14, r24
     a22:	f1 2c       	mov	r15, r1
     a24:	ec 0e       	add	r14, r28
     a26:	fd 1e       	adc	r15, r29
     a28:	ce 01       	movw	r24, r28
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	b7 01       	movw	r22, r14
     a2e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     a32:	8e 01       	movw	r16, r28
     a34:	0f 5e       	subi	r16, 0xEF	; 239
     a36:	1f 4f       	sbci	r17, 0xFF	; 255
     a38:	ce 01       	movw	r24, r28
     a3a:	05 96       	adiw	r24, 0x05	; 5
     a3c:	b8 01       	movw	r22, r16
     a3e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     a42:	89 85       	ldd	r24, Y+9	; 0x09
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	40 f0       	brcs	.+16     	; 0xa58 <__ltsf2+0x56>
     a48:	89 89       	ldd	r24, Y+17	; 0x11
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	28 f0       	brcs	.+10     	; 0xa58 <__ltsf2+0x56>
     a4e:	c7 01       	movw	r24, r14
     a50:	b8 01       	movw	r22, r16
     a52:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <__ltsf2+0x58>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	68 96       	adiw	r28, 0x18	; 24
     a5c:	e6 e0       	ldi	r30, 0x06	; 6
     a5e:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__+0x18>

00000a62 <__floatsisf>:
     a62:	a8 e0       	ldi	r26, 0x08	; 8
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e7 e3       	ldi	r30, 0x37	; 55
     a68:	f5 e0       	ldi	r31, 0x05	; 5
     a6a:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <__prologue_saves__+0x12>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	da 01       	movw	r26, r20
     a78:	c9 01       	movw	r24, r18
     a7a:	88 27       	eor	r24, r24
     a7c:	b7 fd       	sbrc	r27, 7
     a7e:	83 95       	inc	r24
     a80:	99 27       	eor	r25, r25
     a82:	aa 27       	eor	r26, r26
     a84:	bb 27       	eor	r27, r27
     a86:	b8 2e       	mov	r11, r24
     a88:	21 15       	cp	r18, r1
     a8a:	31 05       	cpc	r19, r1
     a8c:	41 05       	cpc	r20, r1
     a8e:	51 05       	cpc	r21, r1
     a90:	19 f4       	brne	.+6      	; 0xa98 <__floatsisf+0x36>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	3a c0       	rjmp	.+116    	; 0xb0c <__floatsisf+0xaa>
     a98:	88 23       	and	r24, r24
     a9a:	a9 f0       	breq	.+42     	; 0xac6 <__floatsisf+0x64>
     a9c:	20 30       	cpi	r18, 0x00	; 0
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	38 07       	cpc	r19, r24
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	48 07       	cpc	r20, r24
     aa6:	80 e8       	ldi	r24, 0x80	; 128
     aa8:	58 07       	cpc	r21, r24
     aaa:	29 f4       	brne	.+10     	; 0xab6 <__floatsisf+0x54>
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	9f ec       	ldi	r25, 0xCF	; 207
     ab4:	30 c0       	rjmp	.+96     	; 0xb16 <__floatsisf+0xb4>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	e2 1a       	sub	r14, r18
     abe:	f3 0a       	sbc	r15, r19
     ac0:	04 0b       	sbc	r16, r20
     ac2:	15 0b       	sbc	r17, r21
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <__floatsisf+0x68>
     ac6:	79 01       	movw	r14, r18
     ac8:	8a 01       	movw	r16, r20
     aca:	8e e1       	ldi	r24, 0x1E	; 30
     acc:	c8 2e       	mov	r12, r24
     ace:	d1 2c       	mov	r13, r1
     ad0:	dc 82       	std	Y+4, r13	; 0x04
     ad2:	cb 82       	std	Y+3, r12	; 0x03
     ad4:	ed 82       	std	Y+5, r14	; 0x05
     ad6:	fe 82       	std	Y+6, r15	; 0x06
     ad8:	0f 83       	std	Y+7, r16	; 0x07
     ada:	18 87       	std	Y+8, r17	; 0x08
     adc:	c8 01       	movw	r24, r16
     ade:	b7 01       	movw	r22, r14
     ae0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__clzsi2>
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	18 16       	cp	r1, r24
     ae8:	19 06       	cpc	r1, r25
     aea:	84 f4       	brge	.+32     	; 0xb0c <__floatsisf+0xaa>
     aec:	08 2e       	mov	r0, r24
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__floatsisf+0x96>
     af0:	ee 0c       	add	r14, r14
     af2:	ff 1c       	adc	r15, r15
     af4:	00 1f       	adc	r16, r16
     af6:	11 1f       	adc	r17, r17
     af8:	0a 94       	dec	r0
     afa:	d2 f7       	brpl	.-12     	; 0xaf0 <__floatsisf+0x8e>
     afc:	ed 82       	std	Y+5, r14	; 0x05
     afe:	fe 82       	std	Y+6, r15	; 0x06
     b00:	0f 83       	std	Y+7, r16	; 0x07
     b02:	18 87       	std	Y+8, r17	; 0x08
     b04:	c8 1a       	sub	r12, r24
     b06:	d9 0a       	sbc	r13, r25
     b08:	dc 82       	std	Y+4, r13	; 0x04
     b0a:	cb 82       	std	Y+3, r12	; 0x03
     b0c:	ba 82       	std	Y+2, r11	; 0x02
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     b16:	28 96       	adiw	r28, 0x08	; 8
     b18:	e9 e0       	ldi	r30, 0x09	; 9
     b1a:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__epilogue_restores__+0x12>

00000b1e <__fixsfsi>:
     b1e:	ac e0       	ldi	r26, 0x0C	; 12
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	e5 e9       	ldi	r30, 0x95	; 149
     b24:	f5 e0       	ldi	r31, 0x05	; 5
     b26:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__prologue_saves__+0x20>
     b2a:	69 83       	std	Y+1, r22	; 0x01
     b2c:	7a 83       	std	Y+2, r23	; 0x02
     b2e:	8b 83       	std	Y+3, r24	; 0x03
     b30:	9c 83       	std	Y+4, r25	; 0x04
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	be 01       	movw	r22, r28
     b38:	6b 5f       	subi	r22, 0xFB	; 251
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     b40:	8d 81       	ldd	r24, Y+5	; 0x05
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	61 f1       	breq	.+88     	; 0xb9e <__fixsfsi+0x80>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	50 f1       	brcs	.+84     	; 0xb9e <__fixsfsi+0x80>
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	21 f4       	brne	.+8      	; 0xb56 <__fixsfsi+0x38>
     b4e:	8e 81       	ldd	r24, Y+6	; 0x06
     b50:	88 23       	and	r24, r24
     b52:	51 f1       	breq	.+84     	; 0xba8 <__fixsfsi+0x8a>
     b54:	2e c0       	rjmp	.+92     	; 0xbb2 <__fixsfsi+0x94>
     b56:	2f 81       	ldd	r18, Y+7	; 0x07
     b58:	38 85       	ldd	r19, Y+8	; 0x08
     b5a:	37 fd       	sbrc	r19, 7
     b5c:	20 c0       	rjmp	.+64     	; 0xb9e <__fixsfsi+0x80>
     b5e:	6e 81       	ldd	r22, Y+6	; 0x06
     b60:	2f 31       	cpi	r18, 0x1F	; 31
     b62:	31 05       	cpc	r19, r1
     b64:	1c f0       	brlt	.+6      	; 0xb6c <__fixsfsi+0x4e>
     b66:	66 23       	and	r22, r22
     b68:	f9 f0       	breq	.+62     	; 0xba8 <__fixsfsi+0x8a>
     b6a:	23 c0       	rjmp	.+70     	; 0xbb2 <__fixsfsi+0x94>
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	82 1b       	sub	r24, r18
     b72:	93 0b       	sbc	r25, r19
     b74:	29 85       	ldd	r18, Y+9	; 0x09
     b76:	3a 85       	ldd	r19, Y+10	; 0x0a
     b78:	4b 85       	ldd	r20, Y+11	; 0x0b
     b7a:	5c 85       	ldd	r21, Y+12	; 0x0c
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__fixsfsi+0x68>
     b7e:	56 95       	lsr	r21
     b80:	47 95       	ror	r20
     b82:	37 95       	ror	r19
     b84:	27 95       	ror	r18
     b86:	8a 95       	dec	r24
     b88:	d2 f7       	brpl	.-12     	; 0xb7e <__fixsfsi+0x60>
     b8a:	66 23       	and	r22, r22
     b8c:	b1 f0       	breq	.+44     	; 0xbba <__fixsfsi+0x9c>
     b8e:	50 95       	com	r21
     b90:	40 95       	com	r20
     b92:	30 95       	com	r19
     b94:	21 95       	neg	r18
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	4f 4f       	sbci	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	0e c0       	rjmp	.+28     	; 0xbba <__fixsfsi+0x9c>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	09 c0       	rjmp	.+18     	; 0xbba <__fixsfsi+0x9c>
     ba8:	2f ef       	ldi	r18, 0xFF	; 255
     baa:	3f ef       	ldi	r19, 0xFF	; 255
     bac:	4f ef       	ldi	r20, 0xFF	; 255
     bae:	5f e7       	ldi	r21, 0x7F	; 127
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <__fixsfsi+0x9c>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e8       	ldi	r21, 0x80	; 128
     bba:	b9 01       	movw	r22, r18
     bbc:	ca 01       	movw	r24, r20
     bbe:	2c 96       	adiw	r28, 0x0c	; 12
     bc0:	e2 e0       	ldi	r30, 0x02	; 2
     bc2:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__epilogue_restores__+0x20>

00000bc6 <__floatunsisf>:
     bc6:	a8 e0       	ldi	r26, 0x08	; 8
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e9 ee       	ldi	r30, 0xE9	; 233
     bcc:	f5 e0       	ldi	r31, 0x05	; 5
     bce:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x10>
     bd2:	7b 01       	movw	r14, r22
     bd4:	8c 01       	movw	r16, r24
     bd6:	61 15       	cp	r22, r1
     bd8:	71 05       	cpc	r23, r1
     bda:	81 05       	cpc	r24, r1
     bdc:	91 05       	cpc	r25, r1
     bde:	19 f4       	brne	.+6      	; 0xbe6 <__floatunsisf+0x20>
     be0:	82 e0       	ldi	r24, 0x02	; 2
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	60 c0       	rjmp	.+192    	; 0xca6 <__floatunsisf+0xe0>
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	8e e1       	ldi	r24, 0x1E	; 30
     bec:	c8 2e       	mov	r12, r24
     bee:	d1 2c       	mov	r13, r1
     bf0:	dc 82       	std	Y+4, r13	; 0x04
     bf2:	cb 82       	std	Y+3, r12	; 0x03
     bf4:	ed 82       	std	Y+5, r14	; 0x05
     bf6:	fe 82       	std	Y+6, r15	; 0x06
     bf8:	0f 83       	std	Y+7, r16	; 0x07
     bfa:	18 87       	std	Y+8, r17	; 0x08
     bfc:	c8 01       	movw	r24, r16
     bfe:	b7 01       	movw	r22, r14
     c00:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__clzsi2>
     c04:	fc 01       	movw	r30, r24
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	f7 ff       	sbrs	r31, 7
     c0a:	3b c0       	rjmp	.+118    	; 0xc82 <__floatunsisf+0xbc>
     c0c:	22 27       	eor	r18, r18
     c0e:	33 27       	eor	r19, r19
     c10:	2e 1b       	sub	r18, r30
     c12:	3f 0b       	sbc	r19, r31
     c14:	57 01       	movw	r10, r14
     c16:	68 01       	movw	r12, r16
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__floatunsisf+0x5e>
     c1c:	d6 94       	lsr	r13
     c1e:	c7 94       	ror	r12
     c20:	b7 94       	ror	r11
     c22:	a7 94       	ror	r10
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__floatunsisf+0x56>
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <__floatunsisf+0x7c>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	aa 1f       	adc	r26, r26
     c40:	bb 1f       	adc	r27, r27
     c42:	2a 95       	dec	r18
     c44:	d2 f7       	brpl	.-12     	; 0xc3a <__floatunsisf+0x74>
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	a1 09       	sbc	r26, r1
     c4a:	b1 09       	sbc	r27, r1
     c4c:	8e 21       	and	r24, r14
     c4e:	9f 21       	and	r25, r15
     c50:	a0 23       	and	r26, r16
     c52:	b1 23       	and	r27, r17
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	a1 05       	cpc	r26, r1
     c58:	b1 05       	cpc	r27, r1
     c5a:	21 f0       	breq	.+8      	; 0xc64 <__floatunsisf+0x9e>
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	4a 29       	or	r20, r10
     c66:	5b 29       	or	r21, r11
     c68:	6c 29       	or	r22, r12
     c6a:	7d 29       	or	r23, r13
     c6c:	4d 83       	std	Y+5, r20	; 0x05
     c6e:	5e 83       	std	Y+6, r21	; 0x06
     c70:	6f 83       	std	Y+7, r22	; 0x07
     c72:	78 87       	std	Y+8, r23	; 0x08
     c74:	8e e1       	ldi	r24, 0x1E	; 30
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	8e 1b       	sub	r24, r30
     c7a:	9f 0b       	sbc	r25, r31
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
     c80:	12 c0       	rjmp	.+36     	; 0xca6 <__floatunsisf+0xe0>
     c82:	30 97       	sbiw	r30, 0x00	; 0
     c84:	81 f0       	breq	.+32     	; 0xca6 <__floatunsisf+0xe0>
     c86:	0e 2e       	mov	r0, r30
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <__floatunsisf+0xcc>
     c8a:	ee 0c       	add	r14, r14
     c8c:	ff 1c       	adc	r15, r15
     c8e:	00 1f       	adc	r16, r16
     c90:	11 1f       	adc	r17, r17
     c92:	0a 94       	dec	r0
     c94:	d2 f7       	brpl	.-12     	; 0xc8a <__floatunsisf+0xc4>
     c96:	ed 82       	std	Y+5, r14	; 0x05
     c98:	fe 82       	std	Y+6, r15	; 0x06
     c9a:	0f 83       	std	Y+7, r16	; 0x07
     c9c:	18 87       	std	Y+8, r17	; 0x08
     c9e:	ce 1a       	sub	r12, r30
     ca0:	df 0a       	sbc	r13, r31
     ca2:	dc 82       	std	Y+4, r13	; 0x04
     ca4:	cb 82       	std	Y+3, r12	; 0x03
     ca6:	1a 82       	std	Y+2, r1	; 0x02
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     cb0:	28 96       	adiw	r28, 0x08	; 8
     cb2:	ea e0       	ldi	r30, 0x0A	; 10
     cb4:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x10>

00000cb8 <__lshrdi3>:
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	60 97       	sbiw	r28, 0x10	; 16
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	a8 2f       	mov	r26, r24
     cd4:	00 23       	and	r16, r16
     cd6:	09 f4       	brne	.+2      	; 0xcda <__lshrdi3+0x22>
     cd8:	61 c0       	rjmp	.+194    	; 0xd9c <__lshrdi3+0xe4>
     cda:	7e 01       	movw	r14, r28
     cdc:	08 94       	sec
     cde:	e1 1c       	adc	r14, r1
     ce0:	f1 1c       	adc	r15, r1
     ce2:	88 e0       	ldi	r24, 0x08	; 8
     ce4:	f7 01       	movw	r30, r14
     ce6:	11 92       	st	Z+, r1
     ce8:	8a 95       	dec	r24
     cea:	e9 f7       	brne	.-6      	; 0xce6 <__lshrdi3+0x2e>
     cec:	29 83       	std	Y+1, r18	; 0x01
     cee:	3a 83       	std	Y+2, r19	; 0x02
     cf0:	4b 83       	std	Y+3, r20	; 0x03
     cf2:	5c 83       	std	Y+4, r21	; 0x04
     cf4:	6d 83       	std	Y+5, r22	; 0x05
     cf6:	7e 83       	std	Y+6, r23	; 0x06
     cf8:	af 83       	std	Y+7, r26	; 0x07
     cfa:	98 87       	std	Y+8, r25	; 0x08
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	80 1b       	sub	r24, r16
     d00:	e8 2f       	mov	r30, r24
     d02:	ff 27       	eor	r31, r31
     d04:	e7 fd       	sbrc	r30, 7
     d06:	f0 95       	com	r31
     d08:	4d 81       	ldd	r20, Y+5	; 0x05
     d0a:	5e 81       	ldd	r21, Y+6	; 0x06
     d0c:	6f 81       	ldd	r22, Y+7	; 0x07
     d0e:	78 85       	ldd	r23, Y+8	; 0x08
     d10:	18 16       	cp	r1, r24
     d12:	84 f0       	brlt	.+32     	; 0xd34 <__lshrdi3+0x7c>
     d14:	1d 86       	std	Y+13, r1	; 0x0d
     d16:	1e 86       	std	Y+14, r1	; 0x0e
     d18:	1f 86       	std	Y+15, r1	; 0x0f
     d1a:	18 8a       	std	Y+16, r1	; 0x10
     d1c:	88 27       	eor	r24, r24
     d1e:	99 27       	eor	r25, r25
     d20:	8e 1b       	sub	r24, r30
     d22:	9f 0b       	sbc	r25, r31
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <__lshrdi3+0x76>
     d26:	76 95       	lsr	r23
     d28:	67 95       	ror	r22
     d2a:	57 95       	ror	r21
     d2c:	47 95       	ror	r20
     d2e:	8a 95       	dec	r24
     d30:	d2 f7       	brpl	.-12     	; 0xd26 <__lshrdi3+0x6e>
     d32:	28 c0       	rjmp	.+80     	; 0xd84 <__lshrdi3+0xcc>
     d34:	20 2f       	mov	r18, r16
     d36:	33 27       	eor	r19, r19
     d38:	27 fd       	sbrc	r18, 7
     d3a:	30 95       	com	r19
     d3c:	db 01       	movw	r26, r22
     d3e:	ca 01       	movw	r24, r20
     d40:	02 2e       	mov	r0, r18
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <__lshrdi3+0x94>
     d44:	b6 95       	lsr	r27
     d46:	a7 95       	ror	r26
     d48:	97 95       	ror	r25
     d4a:	87 95       	ror	r24
     d4c:	0a 94       	dec	r0
     d4e:	d2 f7       	brpl	.-12     	; 0xd44 <__lshrdi3+0x8c>
     d50:	8d 87       	std	Y+13, r24	; 0x0d
     d52:	9e 87       	std	Y+14, r25	; 0x0e
     d54:	af 87       	std	Y+15, r26	; 0x0f
     d56:	b8 8b       	std	Y+16, r27	; 0x10
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <__lshrdi3+0xaa>
     d5a:	44 0f       	add	r20, r20
     d5c:	55 1f       	adc	r21, r21
     d5e:	66 1f       	adc	r22, r22
     d60:	77 1f       	adc	r23, r23
     d62:	ea 95       	dec	r30
     d64:	d2 f7       	brpl	.-12     	; 0xd5a <__lshrdi3+0xa2>
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	ab 81       	ldd	r26, Y+3	; 0x03
     d6c:	bc 81       	ldd	r27, Y+4	; 0x04
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <__lshrdi3+0xc0>
     d70:	b6 95       	lsr	r27
     d72:	a7 95       	ror	r26
     d74:	97 95       	ror	r25
     d76:	87 95       	ror	r24
     d78:	2a 95       	dec	r18
     d7a:	d2 f7       	brpl	.-12     	; 0xd70 <__lshrdi3+0xb8>
     d7c:	48 2b       	or	r20, r24
     d7e:	59 2b       	or	r21, r25
     d80:	6a 2b       	or	r22, r26
     d82:	7b 2b       	or	r23, r27
     d84:	49 87       	std	Y+9, r20	; 0x09
     d86:	5a 87       	std	Y+10, r21	; 0x0a
     d88:	6b 87       	std	Y+11, r22	; 0x0b
     d8a:	7c 87       	std	Y+12, r23	; 0x0c
     d8c:	29 85       	ldd	r18, Y+9	; 0x09
     d8e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d90:	4b 85       	ldd	r20, Y+11	; 0x0b
     d92:	5c 85       	ldd	r21, Y+12	; 0x0c
     d94:	6d 85       	ldd	r22, Y+13	; 0x0d
     d96:	7e 85       	ldd	r23, Y+14	; 0x0e
     d98:	af 85       	ldd	r26, Y+15	; 0x0f
     d9a:	98 89       	ldd	r25, Y+16	; 0x10
     d9c:	8a 2f       	mov	r24, r26
     d9e:	60 96       	adiw	r28, 0x10	; 16
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	08 95       	ret

00000db6 <__clzsi2>:
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	7b 01       	movw	r14, r22
     dc0:	8c 01       	movw	r16, r24
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	e8 16       	cp	r14, r24
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	f8 06       	cpc	r15, r24
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	08 07       	cpc	r16, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	18 07       	cpc	r17, r24
     dd2:	88 f4       	brcc	.+34     	; 0xdf6 <__clzsi2+0x40>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	e8 16       	cp	r14, r24
     dd8:	f1 04       	cpc	r15, r1
     dda:	01 05       	cpc	r16, r1
     ddc:	11 05       	cpc	r17, r1
     dde:	31 f0       	breq	.+12     	; 0xdec <__clzsi2+0x36>
     de0:	28 f0       	brcs	.+10     	; 0xdec <__clzsi2+0x36>
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	17 c0       	rjmp	.+46     	; 0xe1a <__clzsi2+0x64>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__clzsi2+0x64>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	e8 16       	cp	r14, r24
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	f8 06       	cpc	r15, r24
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	08 07       	cpc	r16, r24
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	18 07       	cpc	r17, r24
     e06:	28 f0       	brcs	.+10     	; 0xe12 <__clzsi2+0x5c>
     e08:	88 e1       	ldi	r24, 0x18	; 24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <__clzsi2+0x64>
     e12:	80 e1       	ldi	r24, 0x10	; 16
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a0 e0       	ldi	r26, 0x00	; 0
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	20 e2       	ldi	r18, 0x20	; 32
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	28 1b       	sub	r18, r24
     e24:	39 0b       	sbc	r19, r25
     e26:	4a 0b       	sbc	r20, r26
     e28:	5b 0b       	sbc	r21, r27
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <__clzsi2+0x7e>
     e2c:	16 95       	lsr	r17
     e2e:	07 95       	ror	r16
     e30:	f7 94       	ror	r15
     e32:	e7 94       	ror	r14
     e34:	8a 95       	dec	r24
     e36:	d2 f7       	brpl	.-12     	; 0xe2c <__clzsi2+0x76>
     e38:	f7 01       	movw	r30, r14
     e3a:	e8 53       	subi	r30, 0x38	; 56
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	80 81       	ld	r24, Z
     e40:	28 1b       	sub	r18, r24
     e42:	31 09       	sbc	r19, r1
     e44:	41 09       	sbc	r20, r1
     e46:	51 09       	sbc	r21, r1
     e48:	c9 01       	movw	r24, r18
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	08 95       	ret

00000e54 <__pack_f>:
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	fc 01       	movw	r30, r24
     e60:	e4 80       	ldd	r14, Z+4	; 0x04
     e62:	f5 80       	ldd	r15, Z+5	; 0x05
     e64:	06 81       	ldd	r16, Z+6	; 0x06
     e66:	17 81       	ldd	r17, Z+7	; 0x07
     e68:	d1 80       	ldd	r13, Z+1	; 0x01
     e6a:	80 81       	ld	r24, Z
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	48 f4       	brcc	.+18     	; 0xe82 <__pack_f+0x2e>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 e1       	ldi	r26, 0x10	; 16
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 2a       	or	r14, r24
     e7a:	f9 2a       	or	r15, r25
     e7c:	0a 2b       	or	r16, r26
     e7e:	1b 2b       	or	r17, r27
     e80:	a5 c0       	rjmp	.+330    	; 0xfcc <__pack_f+0x178>
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	09 f4       	brne	.+2      	; 0xe88 <__pack_f+0x34>
     e86:	9f c0       	rjmp	.+318    	; 0xfc6 <__pack_f+0x172>
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	21 f4       	brne	.+8      	; 0xe94 <__pack_f+0x40>
     e8c:	ee 24       	eor	r14, r14
     e8e:	ff 24       	eor	r15, r15
     e90:	87 01       	movw	r16, r14
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <__pack_f+0x4a>
     e94:	e1 14       	cp	r14, r1
     e96:	f1 04       	cpc	r15, r1
     e98:	01 05       	cpc	r16, r1
     e9a:	11 05       	cpc	r17, r1
     e9c:	19 f4       	brne	.+6      	; 0xea4 <__pack_f+0x50>
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	96 c0       	rjmp	.+300    	; 0xfd0 <__pack_f+0x17c>
     ea4:	62 81       	ldd	r22, Z+2	; 0x02
     ea6:	73 81       	ldd	r23, Z+3	; 0x03
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	62 38       	cpi	r22, 0x82	; 130
     eac:	79 07       	cpc	r23, r25
     eae:	0c f0       	brlt	.+2      	; 0xeb2 <__pack_f+0x5e>
     eb0:	5b c0       	rjmp	.+182    	; 0xf68 <__pack_f+0x114>
     eb2:	22 e8       	ldi	r18, 0x82	; 130
     eb4:	3f ef       	ldi	r19, 0xFF	; 255
     eb6:	26 1b       	sub	r18, r22
     eb8:	37 0b       	sbc	r19, r23
     eba:	2a 31       	cpi	r18, 0x1A	; 26
     ebc:	31 05       	cpc	r19, r1
     ebe:	2c f0       	brlt	.+10     	; 0xeca <__pack_f+0x76>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	2a c0       	rjmp	.+84     	; 0xf1e <__pack_f+0xca>
     eca:	b8 01       	movw	r22, r16
     ecc:	a7 01       	movw	r20, r14
     ece:	02 2e       	mov	r0, r18
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <__pack_f+0x86>
     ed2:	76 95       	lsr	r23
     ed4:	67 95       	ror	r22
     ed6:	57 95       	ror	r21
     ed8:	47 95       	ror	r20
     eda:	0a 94       	dec	r0
     edc:	d2 f7       	brpl	.-12     	; 0xed2 <__pack_f+0x7e>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <__pack_f+0x9c>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	aa 1f       	adc	r26, r26
     eee:	bb 1f       	adc	r27, r27
     ef0:	2a 95       	dec	r18
     ef2:	d2 f7       	brpl	.-12     	; 0xee8 <__pack_f+0x94>
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	a1 09       	sbc	r26, r1
     ef8:	b1 09       	sbc	r27, r1
     efa:	8e 21       	and	r24, r14
     efc:	9f 21       	and	r25, r15
     efe:	a0 23       	and	r26, r16
     f00:	b1 23       	and	r27, r17
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	a1 05       	cpc	r26, r1
     f06:	b1 05       	cpc	r27, r1
     f08:	21 f0       	breq	.+8      	; 0xf12 <__pack_f+0xbe>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	a0 e0       	ldi	r26, 0x00	; 0
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	9a 01       	movw	r18, r20
     f14:	ab 01       	movw	r20, r22
     f16:	28 2b       	or	r18, r24
     f18:	39 2b       	or	r19, r25
     f1a:	4a 2b       	or	r20, r26
     f1c:	5b 2b       	or	r21, r27
     f1e:	da 01       	movw	r26, r20
     f20:	c9 01       	movw	r24, r18
     f22:	8f 77       	andi	r24, 0x7F	; 127
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	a0 70       	andi	r26, 0x00	; 0
     f28:	b0 70       	andi	r27, 0x00	; 0
     f2a:	80 34       	cpi	r24, 0x40	; 64
     f2c:	91 05       	cpc	r25, r1
     f2e:	a1 05       	cpc	r26, r1
     f30:	b1 05       	cpc	r27, r1
     f32:	39 f4       	brne	.+14     	; 0xf42 <__pack_f+0xee>
     f34:	27 ff       	sbrs	r18, 7
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <__pack_f+0xf6>
     f38:	20 5c       	subi	r18, 0xC0	; 192
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	4f 4f       	sbci	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <__pack_f+0xf6>
     f42:	21 5c       	subi	r18, 0xC1	; 193
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	4f 4f       	sbci	r20, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	e0 e0       	ldi	r30, 0x00	; 0
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	20 30       	cpi	r18, 0x00	; 0
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	3a 07       	cpc	r19, r26
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	4a 07       	cpc	r20, r26
     f58:	a0 e4       	ldi	r26, 0x40	; 64
     f5a:	5a 07       	cpc	r21, r26
     f5c:	10 f0       	brcs	.+4      	; 0xf62 <__pack_f+0x10e>
     f5e:	e1 e0       	ldi	r30, 0x01	; 1
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	79 01       	movw	r14, r18
     f64:	8a 01       	movw	r16, r20
     f66:	27 c0       	rjmp	.+78     	; 0xfb6 <__pack_f+0x162>
     f68:	60 38       	cpi	r22, 0x80	; 128
     f6a:	71 05       	cpc	r23, r1
     f6c:	64 f5       	brge	.+88     	; 0xfc6 <__pack_f+0x172>
     f6e:	fb 01       	movw	r30, r22
     f70:	e1 58       	subi	r30, 0x81	; 129
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	d8 01       	movw	r26, r16
     f76:	c7 01       	movw	r24, r14
     f78:	8f 77       	andi	r24, 0x7F	; 127
     f7a:	90 70       	andi	r25, 0x00	; 0
     f7c:	a0 70       	andi	r26, 0x00	; 0
     f7e:	b0 70       	andi	r27, 0x00	; 0
     f80:	80 34       	cpi	r24, 0x40	; 64
     f82:	91 05       	cpc	r25, r1
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	39 f4       	brne	.+14     	; 0xf98 <__pack_f+0x144>
     f8a:	e7 fe       	sbrs	r14, 7
     f8c:	0d c0       	rjmp	.+26     	; 0xfa8 <__pack_f+0x154>
     f8e:	80 e4       	ldi	r24, 0x40	; 64
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a0 e0       	ldi	r26, 0x00	; 0
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <__pack_f+0x14c>
     f98:	8f e3       	ldi	r24, 0x3F	; 63
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e8 0e       	add	r14, r24
     fa2:	f9 1e       	adc	r15, r25
     fa4:	0a 1f       	adc	r16, r26
     fa6:	1b 1f       	adc	r17, r27
     fa8:	17 ff       	sbrs	r17, 7
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <__pack_f+0x162>
     fac:	16 95       	lsr	r17
     fae:	07 95       	ror	r16
     fb0:	f7 94       	ror	r15
     fb2:	e7 94       	ror	r14
     fb4:	31 96       	adiw	r30, 0x01	; 1
     fb6:	87 e0       	ldi	r24, 0x07	; 7
     fb8:	16 95       	lsr	r17
     fba:	07 95       	ror	r16
     fbc:	f7 94       	ror	r15
     fbe:	e7 94       	ror	r14
     fc0:	8a 95       	dec	r24
     fc2:	d1 f7       	brne	.-12     	; 0xfb8 <__pack_f+0x164>
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <__pack_f+0x17c>
     fc6:	ee 24       	eor	r14, r14
     fc8:	ff 24       	eor	r15, r15
     fca:	87 01       	movw	r16, r14
     fcc:	ef ef       	ldi	r30, 0xFF	; 255
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	6e 2f       	mov	r22, r30
     fd2:	67 95       	ror	r22
     fd4:	66 27       	eor	r22, r22
     fd6:	67 95       	ror	r22
     fd8:	90 2f       	mov	r25, r16
     fda:	9f 77       	andi	r25, 0x7F	; 127
     fdc:	d7 94       	ror	r13
     fde:	dd 24       	eor	r13, r13
     fe0:	d7 94       	ror	r13
     fe2:	8e 2f       	mov	r24, r30
     fe4:	86 95       	lsr	r24
     fe6:	49 2f       	mov	r20, r25
     fe8:	46 2b       	or	r20, r22
     fea:	58 2f       	mov	r21, r24
     fec:	5d 29       	or	r21, r13
     fee:	b7 01       	movw	r22, r14
     ff0:	ca 01       	movw	r24, r20
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	08 95       	ret

00000ffe <__unpack_f>:
     ffe:	fc 01       	movw	r30, r24
    1000:	db 01       	movw	r26, r22
    1002:	40 81       	ld	r20, Z
    1004:	51 81       	ldd	r21, Z+1	; 0x01
    1006:	22 81       	ldd	r18, Z+2	; 0x02
    1008:	62 2f       	mov	r22, r18
    100a:	6f 77       	andi	r22, 0x7F	; 127
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	22 1f       	adc	r18, r18
    1010:	22 27       	eor	r18, r18
    1012:	22 1f       	adc	r18, r18
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	89 2f       	mov	r24, r25
    1018:	88 0f       	add	r24, r24
    101a:	82 2b       	or	r24, r18
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	99 1f       	adc	r25, r25
    1022:	99 27       	eor	r25, r25
    1024:	99 1f       	adc	r25, r25
    1026:	11 96       	adiw	r26, 0x01	; 1
    1028:	9c 93       	st	X, r25
    102a:	11 97       	sbiw	r26, 0x01	; 1
    102c:	21 15       	cp	r18, r1
    102e:	31 05       	cpc	r19, r1
    1030:	a9 f5       	brne	.+106    	; 0x109c <__unpack_f+0x9e>
    1032:	41 15       	cp	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	61 05       	cpc	r22, r1
    1038:	71 05       	cpc	r23, r1
    103a:	11 f4       	brne	.+4      	; 0x1040 <__unpack_f+0x42>
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	37 c0       	rjmp	.+110    	; 0x10ae <__unpack_f+0xb0>
    1040:	82 e8       	ldi	r24, 0x82	; 130
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	13 96       	adiw	r26, 0x03	; 3
    1046:	9c 93       	st	X, r25
    1048:	8e 93       	st	-X, r24
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	9a 01       	movw	r18, r20
    104e:	ab 01       	movw	r20, r22
    1050:	67 e0       	ldi	r22, 0x07	; 7
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	44 1f       	adc	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	6a 95       	dec	r22
    105c:	d1 f7       	brne	.-12     	; 0x1052 <__unpack_f+0x54>
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	8c 93       	st	X, r24
    1062:	0d c0       	rjmp	.+26     	; 0x107e <__unpack_f+0x80>
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	44 1f       	adc	r20, r20
    106a:	55 1f       	adc	r21, r21
    106c:	12 96       	adiw	r26, 0x02	; 2
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	13 97       	sbiw	r26, 0x03	; 3
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	13 96       	adiw	r26, 0x03	; 3
    1078:	9c 93       	st	X, r25
    107a:	8e 93       	st	-X, r24
    107c:	12 97       	sbiw	r26, 0x02	; 2
    107e:	20 30       	cpi	r18, 0x00	; 0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	38 07       	cpc	r19, r24
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	48 07       	cpc	r20, r24
    1088:	80 e4       	ldi	r24, 0x40	; 64
    108a:	58 07       	cpc	r21, r24
    108c:	58 f3       	brcs	.-42     	; 0x1064 <__unpack_f+0x66>
    108e:	14 96       	adiw	r26, 0x04	; 4
    1090:	2d 93       	st	X+, r18
    1092:	3d 93       	st	X+, r19
    1094:	4d 93       	st	X+, r20
    1096:	5c 93       	st	X, r21
    1098:	17 97       	sbiw	r26, 0x07	; 7
    109a:	08 95       	ret
    109c:	2f 3f       	cpi	r18, 0xFF	; 255
    109e:	31 05       	cpc	r19, r1
    10a0:	79 f4       	brne	.+30     	; 0x10c0 <__unpack_f+0xc2>
    10a2:	41 15       	cp	r20, r1
    10a4:	51 05       	cpc	r21, r1
    10a6:	61 05       	cpc	r22, r1
    10a8:	71 05       	cpc	r23, r1
    10aa:	19 f4       	brne	.+6      	; 0x10b2 <__unpack_f+0xb4>
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	8c 93       	st	X, r24
    10b0:	08 95       	ret
    10b2:	64 ff       	sbrs	r22, 4
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <__unpack_f+0xbe>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	8c 93       	st	X, r24
    10ba:	12 c0       	rjmp	.+36     	; 0x10e0 <__unpack_f+0xe2>
    10bc:	1c 92       	st	X, r1
    10be:	10 c0       	rjmp	.+32     	; 0x10e0 <__unpack_f+0xe2>
    10c0:	2f 57       	subi	r18, 0x7F	; 127
    10c2:	30 40       	sbci	r19, 0x00	; 0
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	3c 93       	st	X, r19
    10c8:	2e 93       	st	-X, r18
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	8c 93       	st	X, r24
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	44 0f       	add	r20, r20
    10d4:	55 1f       	adc	r21, r21
    10d6:	66 1f       	adc	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	8a 95       	dec	r24
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0xd4>
    10de:	70 64       	ori	r23, 0x40	; 64
    10e0:	14 96       	adiw	r26, 0x04	; 4
    10e2:	4d 93       	st	X+, r20
    10e4:	5d 93       	st	X+, r21
    10e6:	6d 93       	st	X+, r22
    10e8:	7c 93       	st	X, r23
    10ea:	17 97       	sbiw	r26, 0x07	; 7
    10ec:	08 95       	ret

000010ee <__fpcmp_parts_f>:
    10ee:	1f 93       	push	r17
    10f0:	dc 01       	movw	r26, r24
    10f2:	fb 01       	movw	r30, r22
    10f4:	9c 91       	ld	r25, X
    10f6:	92 30       	cpi	r25, 0x02	; 2
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <__fpcmp_parts_f+0xe>
    10fa:	47 c0       	rjmp	.+142    	; 0x118a <__fpcmp_parts_f+0x9c>
    10fc:	80 81       	ld	r24, Z
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	08 f4       	brcc	.+2      	; 0x1104 <__fpcmp_parts_f+0x16>
    1102:	43 c0       	rjmp	.+134    	; 0x118a <__fpcmp_parts_f+0x9c>
    1104:	94 30       	cpi	r25, 0x04	; 4
    1106:	51 f4       	brne	.+20     	; 0x111c <__fpcmp_parts_f+0x2e>
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	1c 91       	ld	r17, X
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	99 f5       	brne	.+102    	; 0x1176 <__fpcmp_parts_f+0x88>
    1110:	81 81       	ldd	r24, Z+1	; 0x01
    1112:	68 2f       	mov	r22, r24
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	61 1b       	sub	r22, r17
    1118:	71 09       	sbc	r23, r1
    111a:	3f c0       	rjmp	.+126    	; 0x119a <__fpcmp_parts_f+0xac>
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	21 f0       	breq	.+8      	; 0x1128 <__fpcmp_parts_f+0x3a>
    1120:	92 30       	cpi	r25, 0x02	; 2
    1122:	31 f4       	brne	.+12     	; 0x1130 <__fpcmp_parts_f+0x42>
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	b9 f1       	breq	.+110    	; 0x1196 <__fpcmp_parts_f+0xa8>
    1128:	81 81       	ldd	r24, Z+1	; 0x01
    112a:	88 23       	and	r24, r24
    112c:	89 f1       	breq	.+98     	; 0x1190 <__fpcmp_parts_f+0xa2>
    112e:	2d c0       	rjmp	.+90     	; 0x118a <__fpcmp_parts_f+0x9c>
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	1c 91       	ld	r17, X
    1134:	11 97       	sbiw	r26, 0x01	; 1
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	f1 f0       	breq	.+60     	; 0x1176 <__fpcmp_parts_f+0x88>
    113a:	81 81       	ldd	r24, Z+1	; 0x01
    113c:	18 17       	cp	r17, r24
    113e:	d9 f4       	brne	.+54     	; 0x1176 <__fpcmp_parts_f+0x88>
    1140:	12 96       	adiw	r26, 0x02	; 2
    1142:	2d 91       	ld	r18, X+
    1144:	3c 91       	ld	r19, X
    1146:	13 97       	sbiw	r26, 0x03	; 3
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	82 17       	cp	r24, r18
    114e:	93 07       	cpc	r25, r19
    1150:	94 f0       	brlt	.+36     	; 0x1176 <__fpcmp_parts_f+0x88>
    1152:	28 17       	cp	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	bc f0       	brlt	.+46     	; 0x1186 <__fpcmp_parts_f+0x98>
    1158:	14 96       	adiw	r26, 0x04	; 4
    115a:	8d 91       	ld	r24, X+
    115c:	9d 91       	ld	r25, X+
    115e:	0d 90       	ld	r0, X+
    1160:	bc 91       	ld	r27, X
    1162:	a0 2d       	mov	r26, r0
    1164:	24 81       	ldd	r18, Z+4	; 0x04
    1166:	35 81       	ldd	r19, Z+5	; 0x05
    1168:	46 81       	ldd	r20, Z+6	; 0x06
    116a:	57 81       	ldd	r21, Z+7	; 0x07
    116c:	28 17       	cp	r18, r24
    116e:	39 07       	cpc	r19, r25
    1170:	4a 07       	cpc	r20, r26
    1172:	5b 07       	cpc	r21, r27
    1174:	18 f4       	brcc	.+6      	; 0x117c <__fpcmp_parts_f+0x8e>
    1176:	11 23       	and	r17, r17
    1178:	41 f0       	breq	.+16     	; 0x118a <__fpcmp_parts_f+0x9c>
    117a:	0a c0       	rjmp	.+20     	; 0x1190 <__fpcmp_parts_f+0xa2>
    117c:	82 17       	cp	r24, r18
    117e:	93 07       	cpc	r25, r19
    1180:	a4 07       	cpc	r26, r20
    1182:	b5 07       	cpc	r27, r21
    1184:	40 f4       	brcc	.+16     	; 0x1196 <__fpcmp_parts_f+0xa8>
    1186:	11 23       	and	r17, r17
    1188:	19 f0       	breq	.+6      	; 0x1190 <__fpcmp_parts_f+0xa2>
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	05 c0       	rjmp	.+10     	; 0x119a <__fpcmp_parts_f+0xac>
    1190:	6f ef       	ldi	r22, 0xFF	; 255
    1192:	7f ef       	ldi	r23, 0xFF	; 255
    1194:	02 c0       	rjmp	.+4      	; 0x119a <__fpcmp_parts_f+0xac>
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	cb 01       	movw	r24, r22
    119c:	1f 91       	pop	r17
    119e:	08 95       	ret

000011a0 <App_GenerateRandom>:
uint8_t gRandomNumber = 10 ;
static uint8_t gInputNumber = 0;
static uint8_t gTimeOutFlag = 0;


void App_GenerateRandom(){
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62

	uint8_t LocalRandom;

	/*use timer to generate random number*/
	LocalRandom =TIMER0_ReadTimerReg();
    11aa:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <TIMER0_ReadTimerReg>
    11ae:	89 83       	std	Y+1, r24	; 0x01
	/*mapping the value to desired range*/

	gRandomNumber = ((sfloat32_t)LocalRandom * 14.0f)/255.0f;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	bc 01       	movw	r22, r24
    11bc:	cd 01       	movw	r24, r26
    11be:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e6       	ldi	r20, 0x60	; 96
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	53 e4       	ldi	r21, 0x43	; 67
    11e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	80 93 c8 01 	sts	0x01C8, r24


}
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <App_SetTimeOut>:

void App_SetTimeOut(){
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62

	static uint8_t counter= 0;
	/*increase counter*/
	counter++;
    120e:	80 91 e4 01 	lds	r24, 0x01E4
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	80 93 e4 01 	sts	0x01E4, r24

	if(counter == 220)
    1218:	80 91 e4 01 	lds	r24, 0x01E4
    121c:	8c 3d       	cpi	r24, 0xDC	; 220
    121e:	31 f4       	brne	.+12     	; 0x122c <App_SetTimeOut+0x26>
	{
		/*Set the flag for TimeOut*/
		gTimeOutFlag = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 e3 01 	sts	0x01E3, r24

		TIMER0_SetTimerValue(0);
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	0e 94 f6 17 	call	0x2fec	; 0x2fec <TIMER0_SetTimerValue>
	}



}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <App_GetNumber>:

void App_GetNumber(){
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62


	uint8_t PressedKey = 0;
    123c:	19 82       	std	Y+1, r1	; 0x01
	/*Enable the the interrupt*/
	TIMER0_SetInterrupt(NORMAL,ENABLED);
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	0e 94 76 15 	call	0x2aec	; 0x2aec <TIMER0_SetInterrupt>

	/*make the Timer to count from here*/
	TIMER0_SetTimerValue(0);
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	0e 94 f6 17 	call	0x2fec	; 0x2fec <TIMER0_SetTimerValue>
    124c:	2f c0       	rjmp	.+94     	; 0x12ac <App_GetNumber+0x7a>

		/*get the state of button */
		do {


			PressedKey= KPD_u8GetPressedKey();
    124e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <KPD_u8GetPressedKey>
    1252:	89 83       	std	Y+1, r24	; 0x01

			if(gTimeOutFlag ==1){
    1254:	80 91 e3 01 	lds	r24, 0x01E3
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	61 f1       	breq	.+88     	; 0x12b4 <App_GetNumber+0x82>
				return;
			}

		}
		while(PressedKey == KPD_NO_PRESSED_KEY );
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	8f 3f       	cpi	r24, 0xFF	; 255
    1260:	b1 f3       	breq	.-20     	; 0x124e <App_GetNumber+0x1c>



		/*check the status */
		if( PressedKey == '='){
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	8d 33       	cpi	r24, 0x3D	; 61
    1266:	29 f4       	brne	.+10     	; 0x1272 <App_GetNumber+0x40>

			/*prevent the interrupt and disabled timer*/
			TIMER0_SetInterrupt(NORMAL,DISABLED);
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	0e 94 76 15 	call	0x2aec	; 0x2aec <TIMER0_SetInterrupt>
    1270:	21 c0       	rjmp	.+66     	; 0x12b4 <App_GetNumber+0x82>


			return;
		}

		gInputNumber =gInputNumber*10+ PressedKey;
    1272:	80 91 e2 01 	lds	r24, 0x01E2
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9c 01       	movw	r18, r24
    127c:	22 0f       	add	r18, r18
    127e:	33 1f       	adc	r19, r19
    1280:	c9 01       	movw	r24, r18
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	82 0f       	add	r24, r18
    128c:	93 1f       	adc	r25, r19
    128e:	98 2f       	mov	r25, r24
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	89 0f       	add	r24, r25
    1294:	80 93 e2 01 	sts	0x01E2, r24

		CLCD_voidGoToXY(1,9);
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	69 e0       	ldi	r22, 0x09	; 9
    129c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <CLCD_voidGoToXY>

		CLCD_voidSendNumber(gInputNumber);
    12a0:	80 91 e2 01 	lds	r24, 0x01E2
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <CLCD_voidSendNumber>
	TIMER0_SetInterrupt(NORMAL,ENABLED);

	/*make the Timer to count from here*/
	TIMER0_SetTimerValue(0);

	while(gTimeOutFlag == 0 ){
    12ac:	80 91 e3 01 	lds	r24, 0x01E3
    12b0:	88 23       	and	r24, r24
    12b2:	69 f2       	breq	.-102    	; 0x124e <App_GetNumber+0x1c>

		CLCD_voidSendNumber(gInputNumber);

	}

}
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <App_Display>:





void App_Display(){
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	static uint8_t  LCD_flag = 0;

	if((gInputNumber == 0)&&(LCD_flag == 0)){
    12c4:	80 91 e2 01 	lds	r24, 0x01E2
    12c8:	88 23       	and	r24, r24
    12ca:	b1 f4       	brne	.+44     	; 0x12f8 <App_Display+0x3c>
    12cc:	80 91 e5 01 	lds	r24, 0x01E5
    12d0:	88 23       	and	r24, r24
    12d2:	91 f4       	brne	.+36     	; 0x12f8 <App_Display+0x3c>

		CLCD_voidSendString("Please Guess ");
    12d4:	80 e6       	ldi	r24, 0x60	; 96
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <CLCD_voidGoToXY>
		CLCD_voidSendString("number:");
    12e4:	8e e6       	ldi	r24, 0x6E	; 110
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidSendString>

		LCD_flag++;
    12ec:	80 91 e5 01 	lds	r24, 0x01E5
    12f0:	8f 5f       	subi	r24, 0xFF	; 255
    12f2:	80 93 e5 01 	sts	0x01E5, r24
    12f6:	49 c0       	rjmp	.+146    	; 0x138a <App_Display+0xce>

	}
	else if((gInputNumber == 0)||(gInputNumber == 255)){
    12f8:	80 91 e2 01 	lds	r24, 0x01E2
    12fc:	88 23       	and	r24, r24
    12fe:	21 f0       	breq	.+8      	; 0x1308 <App_Display+0x4c>
    1300:	80 91 e2 01 	lds	r24, 0x01E2
    1304:	8f 3f       	cpi	r24, 0xFF	; 255
    1306:	79 f4       	brne	.+30     	; 0x1326 <App_Display+0x6a>
		CLCD_Clear();
    1308:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <CLCD_Clear>
		CLCD_voidSendString("you don't press ");
    130c:	86 e7       	ldi	r24, 0x76	; 118
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <CLCD_voidGoToXY>
		CLCD_voidSendString("any numbers");
    131c:	87 e8       	ldi	r24, 0x87	; 135
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidSendString>
    1324:	32 c0       	rjmp	.+100    	; 0x138a <App_Display+0xce>
	}

	else if((gInputNumber > 15)){
    1326:	80 91 e2 01 	lds	r24, 0x01E2
    132a:	80 31       	cpi	r24, 0x10	; 16
    132c:	38 f0       	brcs	.+14     	; 0x133c <App_Display+0x80>
		CLCD_Clear();
    132e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <CLCD_Clear>
		CLCD_voidSendString("invalid range");
    1332:	83 e9       	ldi	r24, 0x93	; 147
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidSendString>
    133a:	27 c0       	rjmp	.+78     	; 0x138a <App_Display+0xce>
	}
	else if(gRandomNumber == gInputNumber){
    133c:	90 91 c8 01 	lds	r25, 0x01C8
    1340:	80 91 e2 01 	lds	r24, 0x01E2
    1344:	98 17       	cp	r25, r24
    1346:	39 f4       	brne	.+14     	; 0x1356 <App_Display+0x9a>
		CLCD_Clear();
    1348:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <CLCD_Clear>
		CLCD_voidSendString("YOU WIN");
    134c:	81 ea       	ldi	r24, 0xA1	; 161
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidSendString>
    1354:	1a c0       	rjmp	.+52     	; 0x138a <App_Display+0xce>
	}
	else if(gRandomNumber != gInputNumber)
    1356:	90 91 c8 01 	lds	r25, 0x01C8
    135a:	80 91 e2 01 	lds	r24, 0x01E2
    135e:	98 17       	cp	r25, r24
    1360:	a1 f0       	breq	.+40     	; 0x138a <App_Display+0xce>
	{
		CLCD_Clear();
    1362:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <CLCD_Clear>
		CLCD_voidSendString("YOU LOSE");
    1366:	89 ea       	ldi	r24, 0xA9	; 169
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <CLCD_voidGoToXY>
		CLCD_voidSendString("RIGHT GUESS: ");
    1376:	82 eb       	ldi	r24, 0xB2	; 178
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidSendString>
		CLCD_voidSendNumber(gRandomNumber);
    137e:	80 91 c8 01 	lds	r24, 0x01C8
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <CLCD_voidSendNumber>


	}


}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <App_Init>:


void App_Init(){
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62

	/*Initialize the components of Project*/
	PORT_voidInit();
    1398:	0e 94 76 14 	call	0x28ec	; 0x28ec <PORT_voidInit>




	/*Initialize the switch*/
	CLCD_voidInit();
    139c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <CLCD_voidInit>
	App_Display();
    13a0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <App_Display>

	/*Initialize the timer0*/
	TIMER0_Init();
    13a4:	0e 94 21 15 	call	0x2a42	; 0x2a42 <TIMER0_Init>

	/*Initialize Global interrupt*/
	GIE_voidEnable();
    13a8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <GIE_voidEnable>

	/*disable timer interrupt*/
	TIMER0_SetInterrupt(NORMAL,DISABLED);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	0e 94 76 15 	call	0x2aec	; 0x2aec <TIMER0_SetInterrupt>

	/*ISR Callback*/
	TIMER0_u8SetCallBack(App_SetTimeOut);
    13b4:	83 e0       	ldi	r24, 0x03	; 3
    13b6:	99 e0       	ldi	r25, 0x09	; 9
    13b8:	0e 94 1a 18 	call	0x3034	; 0x3034 <TIMER0_u8SetCallBack>

}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <App_Update>:


void App_Update(){
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
	//App_GenerateRandom();



	/*get the number from User*/
	App_GetNumber();
    13ca:	0e 94 19 09 	call	0x1232	; 0x1232 <App_GetNumber>

	/*display the content*/
	App_Display();
    13ce:	0e 94 5e 09 	call	0x12bc	; 0x12bc <App_Display>


}
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <CLCD_voidSend4BitCommand>:
#include "CLCD_private.h"




void CLCD_voidSend4BitCommand(uint8_t Copy_u8Command){
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	6e 97       	sbiw	r28, 0x1e	; 30
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	8e 8f       	std	Y+30, r24	; 0x1e

	/* store the 4 MSB to send first */
	uint8_t Local_Cmd = Copy_u8Command & MODE_4BIT_MASK;
    13ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13f0:	80 7f       	andi	r24, 0xF0	; 240
    13f2:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS pin to low for command */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_LOW);
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    13fe:	83 e0       	ldi	r24, 0x03	; 3
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Cmd);
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    140c:	0e 94 22 11 	call	0x2244	; 0x2244 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a0 e0       	ldi	r26, 0x00	; 0
    1420:	b0 e4       	ldi	r27, 0x40	; 64
    1422:	89 8f       	std	Y+25, r24	; 0x19
    1424:	9a 8f       	std	Y+26, r25	; 0x1a
    1426:	ab 8f       	std	Y+27, r26	; 0x1b
    1428:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142a:	69 8d       	ldd	r22, Y+25	; 0x19
    142c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    142e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	4a ef       	ldi	r20, 0xFA	; 250
    1438:	54 e4       	ldi	r21, 0x44	; 68
    143a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	8d 8b       	std	Y+21, r24	; 0x15
    1444:	9e 8b       	std	Y+22, r25	; 0x16
    1446:	af 8b       	std	Y+23, r26	; 0x17
    1448:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    144a:	6d 89       	ldd	r22, Y+21	; 0x15
    144c:	7e 89       	ldd	r23, Y+22	; 0x16
    144e:	8f 89       	ldd	r24, Y+23	; 0x17
    1450:	98 8d       	ldd	r25, Y+24	; 0x18
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e8       	ldi	r20, 0x80	; 128
    1458:	5f e3       	ldi	r21, 0x3F	; 63
    145a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    145e:	88 23       	and	r24, r24
    1460:	2c f4       	brge	.+10     	; 0x146c <CLCD_voidSend4BitCommand+0x94>
		__ticks = 1;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9c 8b       	std	Y+20, r25	; 0x14
    1468:	8b 8b       	std	Y+19, r24	; 0x13
    146a:	3f c0       	rjmp	.+126    	; 0x14ea <CLCD_voidSend4BitCommand+0x112>
	else if (__tmp > 65535)
    146c:	6d 89       	ldd	r22, Y+21	; 0x15
    146e:	7e 89       	ldd	r23, Y+22	; 0x16
    1470:	8f 89       	ldd	r24, Y+23	; 0x17
    1472:	98 8d       	ldd	r25, Y+24	; 0x18
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	4f e7       	ldi	r20, 0x7F	; 127
    147a:	57 e4       	ldi	r21, 0x47	; 71
    147c:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    1480:	18 16       	cp	r1, r24
    1482:	4c f5       	brge	.+82     	; 0x14d6 <CLCD_voidSend4BitCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1484:	69 8d       	ldd	r22, Y+25	; 0x19
    1486:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e2       	ldi	r20, 0x20	; 32
    1492:	51 e4       	ldi	r21, 0x41	; 65
    1494:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9c 8b       	std	Y+20, r25	; 0x14
    14aa:	8b 8b       	std	Y+19, r24	; 0x13
    14ac:	0f c0       	rjmp	.+30     	; 0x14cc <CLCD_voidSend4BitCommand+0xf4>
    14ae:	88 ec       	ldi	r24, 0xC8	; 200
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9a 8b       	std	Y+18, r25	; 0x12
    14b4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14b6:	89 89       	ldd	r24, Y+17	; 0x11
    14b8:	9a 89       	ldd	r25, Y+18	; 0x12
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <CLCD_voidSend4BitCommand+0xe2>
    14be:	9a 8b       	std	Y+18, r25	; 0x12
    14c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c2:	8b 89       	ldd	r24, Y+19	; 0x13
    14c4:	9c 89       	ldd	r25, Y+20	; 0x14
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	9c 8b       	std	Y+20, r25	; 0x14
    14ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14cc:	8b 89       	ldd	r24, Y+19	; 0x13
    14ce:	9c 89       	ldd	r25, Y+20	; 0x14
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	69 f7       	brne	.-38     	; 0x14ae <CLCD_voidSend4BitCommand+0xd6>
    14d4:	14 c0       	rjmp	.+40     	; 0x14fe <CLCD_voidSend4BitCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d6:	6d 89       	ldd	r22, Y+21	; 0x15
    14d8:	7e 89       	ldd	r23, Y+22	; 0x16
    14da:	8f 89       	ldd	r24, Y+23	; 0x17
    14dc:	98 8d       	ldd	r25, Y+24	; 0x18
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9c 8b       	std	Y+20, r25	; 0x14
    14e8:	8b 8b       	std	Y+19, r24	; 0x13
    14ea:	8b 89       	ldd	r24, Y+19	; 0x13
    14ec:	9c 89       	ldd	r25, Y+20	; 0x14
    14ee:	98 8b       	std	Y+16, r25	; 0x10
    14f0:	8f 87       	std	Y+15, r24	; 0x0f
    14f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f4:	98 89       	ldd	r25, Y+16	; 0x10
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <CLCD_voidSend4BitCommand+0x11e>
    14fa:	98 8b       	std	Y+16, r25	; 0x10
    14fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	62 e0       	ldi	r22, 0x02	; 2
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

	/* store the 4 LSB to send second */
	Local_Cmd = Copy_u8Command << 4 ;
    1508:	8e 8d       	ldd	r24, Y+30	; 0x1e
    150a:	82 95       	swap	r24
    150c:	80 7f       	andi	r24, 0xF0	; 240
    150e:	8d 8f       	std	Y+29, r24	; 0x1d
	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Cmd);
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1514:	0e 94 22 11 	call	0x2244	; 0x2244 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	62 e0       	ldi	r22, 0x02	; 2
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e4       	ldi	r27, 0x40	; 64
    152a:	8b 87       	std	Y+11, r24	; 0x0b
    152c:	9c 87       	std	Y+12, r25	; 0x0c
    152e:	ad 87       	std	Y+13, r26	; 0x0d
    1530:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1532:	6b 85       	ldd	r22, Y+11	; 0x0b
    1534:	7c 85       	ldd	r23, Y+12	; 0x0c
    1536:	8d 85       	ldd	r24, Y+13	; 0x0d
    1538:	9e 85       	ldd	r25, Y+14	; 0x0e
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	4a ef       	ldi	r20, 0xFA	; 250
    1540:	54 e4       	ldi	r21, 0x44	; 68
    1542:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	8f 83       	std	Y+7, r24	; 0x07
    154c:	98 87       	std	Y+8, r25	; 0x08
    154e:	a9 87       	std	Y+9, r26	; 0x09
    1550:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1552:	6f 81       	ldd	r22, Y+7	; 0x07
    1554:	78 85       	ldd	r23, Y+8	; 0x08
    1556:	89 85       	ldd	r24, Y+9	; 0x09
    1558:	9a 85       	ldd	r25, Y+10	; 0x0a
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e8       	ldi	r20, 0x80	; 128
    1560:	5f e3       	ldi	r21, 0x3F	; 63
    1562:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    1566:	88 23       	and	r24, r24
    1568:	2c f4       	brge	.+10     	; 0x1574 <CLCD_voidSend4BitCommand+0x19c>
		__ticks = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9e 83       	std	Y+6, r25	; 0x06
    1570:	8d 83       	std	Y+5, r24	; 0x05
    1572:	3f c0       	rjmp	.+126    	; 0x15f2 <CLCD_voidSend4BitCommand+0x21a>
	else if (__tmp > 65535)
    1574:	6f 81       	ldd	r22, Y+7	; 0x07
    1576:	78 85       	ldd	r23, Y+8	; 0x08
    1578:	89 85       	ldd	r24, Y+9	; 0x09
    157a:	9a 85       	ldd	r25, Y+10	; 0x0a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	3f ef       	ldi	r19, 0xFF	; 255
    1580:	4f e7       	ldi	r20, 0x7F	; 127
    1582:	57 e4       	ldi	r21, 0x47	; 71
    1584:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    1588:	18 16       	cp	r1, r24
    158a:	4c f5       	brge	.+82     	; 0x15de <CLCD_voidSend4BitCommand+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158c:	6b 85       	ldd	r22, Y+11	; 0x0b
    158e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1590:	8d 85       	ldd	r24, Y+13	; 0x0d
    1592:	9e 85       	ldd	r25, Y+14	; 0x0e
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e2       	ldi	r20, 0x20	; 32
    159a:	51 e4       	ldi	r21, 0x41	; 65
    159c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8d 83       	std	Y+5, r24	; 0x05
    15b4:	0f c0       	rjmp	.+30     	; 0x15d4 <CLCD_voidSend4BitCommand+0x1fc>
    15b6:	88 ec       	ldi	r24, 0xC8	; 200
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <CLCD_voidSend4BitCommand+0x1ea>
    15c6:	9c 83       	std	Y+4, r25	; 0x04
    15c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	9e 83       	std	Y+6, r25	; 0x06
    15d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	69 f7       	brne	.-38     	; 0x15b6 <CLCD_voidSend4BitCommand+0x1de>
    15dc:	14 c0       	rjmp	.+40     	; 0x1606 <CLCD_voidSend4BitCommand+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15de:	6f 81       	ldd	r22, Y+7	; 0x07
    15e0:	78 85       	ldd	r23, Y+8	; 0x08
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <CLCD_voidSend4BitCommand+0x226>
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    1606:	83 e0       	ldi	r24, 0x03	; 3
    1608:	62 e0       	ldi	r22, 0x02	; 2
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>



}
    1610:	6e 96       	adiw	r28, 0x1e	; 30
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <CLCD_voidSend4BitData>:

void CLCD_voidSend4BitData(uint8_t Copy_u8Data){
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	6e 97       	sbiw	r28, 0x1e	; 30
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	8e 8f       	std	Y+30, r24	; 0x1e

	uint8_t Local_Data = Copy_u8Data & MODE_4BIT_MASK;
    1638:	8e 8d       	ldd	r24, Y+30	; 0x1e
    163a:	80 7f       	andi	r24, 0xF0	; 240
    163c:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS pin to HIGH for DATA */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_HIGH);
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    1648:	83 e0       	ldi	r24, 0x03	; 3
    164a:	61 e0       	ldi	r22, 0x01	; 1
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

	/* send data to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Data);
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1656:	0e 94 22 11 	call	0x2244	; 0x2244 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	62 e0       	ldi	r22, 0x02	; 2
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a0 e0       	ldi	r26, 0x00	; 0
    166a:	b0 e4       	ldi	r27, 0x40	; 64
    166c:	89 8f       	std	Y+25, r24	; 0x19
    166e:	9a 8f       	std	Y+26, r25	; 0x1a
    1670:	ab 8f       	std	Y+27, r26	; 0x1b
    1672:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1674:	69 8d       	ldd	r22, Y+25	; 0x19
    1676:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    167a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	4a ef       	ldi	r20, 0xFA	; 250
    1682:	54 e4       	ldi	r21, 0x44	; 68
    1684:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	8d 8b       	std	Y+21, r24	; 0x15
    168e:	9e 8b       	std	Y+22, r25	; 0x16
    1690:	af 8b       	std	Y+23, r26	; 0x17
    1692:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1694:	6d 89       	ldd	r22, Y+21	; 0x15
    1696:	7e 89       	ldd	r23, Y+22	; 0x16
    1698:	8f 89       	ldd	r24, Y+23	; 0x17
    169a:	98 8d       	ldd	r25, Y+24	; 0x18
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e8       	ldi	r20, 0x80	; 128
    16a2:	5f e3       	ldi	r21, 0x3F	; 63
    16a4:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    16a8:	88 23       	and	r24, r24
    16aa:	2c f4       	brge	.+10     	; 0x16b6 <CLCD_voidSend4BitData+0x94>
		__ticks = 1;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	9c 8b       	std	Y+20, r25	; 0x14
    16b2:	8b 8b       	std	Y+19, r24	; 0x13
    16b4:	3f c0       	rjmp	.+126    	; 0x1734 <CLCD_voidSend4BitData+0x112>
	else if (__tmp > 65535)
    16b6:	6d 89       	ldd	r22, Y+21	; 0x15
    16b8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ba:	8f 89       	ldd	r24, Y+23	; 0x17
    16bc:	98 8d       	ldd	r25, Y+24	; 0x18
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	3f ef       	ldi	r19, 0xFF	; 255
    16c2:	4f e7       	ldi	r20, 0x7F	; 127
    16c4:	57 e4       	ldi	r21, 0x47	; 71
    16c6:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    16ca:	18 16       	cp	r1, r24
    16cc:	4c f5       	brge	.+82     	; 0x1720 <CLCD_voidSend4BitData+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ce:	69 8d       	ldd	r22, Y+25	; 0x19
    16d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e2       	ldi	r20, 0x20	; 32
    16dc:	51 e4       	ldi	r21, 0x41	; 65
    16de:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	bc 01       	movw	r22, r24
    16e8:	cd 01       	movw	r24, r26
    16ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	9c 8b       	std	Y+20, r25	; 0x14
    16f4:	8b 8b       	std	Y+19, r24	; 0x13
    16f6:	0f c0       	rjmp	.+30     	; 0x1716 <CLCD_voidSend4BitData+0xf4>
    16f8:	88 ec       	ldi	r24, 0xC8	; 200
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9a 8b       	std	Y+18, r25	; 0x12
    16fe:	89 8b       	std	Y+17, r24	; 0x11
    1700:	89 89       	ldd	r24, Y+17	; 0x11
    1702:	9a 89       	ldd	r25, Y+18	; 0x12
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <CLCD_voidSend4BitData+0xe2>
    1708:	9a 8b       	std	Y+18, r25	; 0x12
    170a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170c:	8b 89       	ldd	r24, Y+19	; 0x13
    170e:	9c 89       	ldd	r25, Y+20	; 0x14
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	9c 8b       	std	Y+20, r25	; 0x14
    1714:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1716:	8b 89       	ldd	r24, Y+19	; 0x13
    1718:	9c 89       	ldd	r25, Y+20	; 0x14
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	69 f7       	brne	.-38     	; 0x16f8 <CLCD_voidSend4BitData+0xd6>
    171e:	14 c0       	rjmp	.+40     	; 0x1748 <CLCD_voidSend4BitData+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1720:	6d 89       	ldd	r22, Y+21	; 0x15
    1722:	7e 89       	ldd	r23, Y+22	; 0x16
    1724:	8f 89       	ldd	r24, Y+23	; 0x17
    1726:	98 8d       	ldd	r25, Y+24	; 0x18
    1728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	9c 8b       	std	Y+20, r25	; 0x14
    1732:	8b 8b       	std	Y+19, r24	; 0x13
    1734:	8b 89       	ldd	r24, Y+19	; 0x13
    1736:	9c 89       	ldd	r25, Y+20	; 0x14
    1738:	98 8b       	std	Y+16, r25	; 0x10
    173a:	8f 87       	std	Y+15, r24	; 0x0f
    173c:	8f 85       	ldd	r24, Y+15	; 0x0f
    173e:	98 89       	ldd	r25, Y+16	; 0x10
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <CLCD_voidSend4BitData+0x11e>
    1744:	98 8b       	std	Y+16, r25	; 0x10
    1746:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

	/* store the 4 LSB to send second */
	Local_Data = Copy_u8Data << 4 ;
    1752:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1754:	82 95       	swap	r24
    1756:	80 7f       	andi	r24, 0xF0	; 240
    1758:	8d 8f       	std	Y+29, r24	; 0x1d

	/* send data to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Data);
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    175e:	0e 94 22 11 	call	0x2244	; 0x2244 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    1762:	83 e0       	ldi	r24, 0x03	; 3
    1764:	62 e0       	ldi	r22, 0x02	; 2
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e0       	ldi	r26, 0x00	; 0
    1772:	b0 e4       	ldi	r27, 0x40	; 64
    1774:	8b 87       	std	Y+11, r24	; 0x0b
    1776:	9c 87       	std	Y+12, r25	; 0x0c
    1778:	ad 87       	std	Y+13, r26	; 0x0d
    177a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177c:	6b 85       	ldd	r22, Y+11	; 0x0b
    177e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a ef       	ldi	r20, 0xFA	; 250
    178a:	54 e4       	ldi	r21, 0x44	; 68
    178c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	8f 83       	std	Y+7, r24	; 0x07
    1796:	98 87       	std	Y+8, r25	; 0x08
    1798:	a9 87       	std	Y+9, r26	; 0x09
    179a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    179c:	6f 81       	ldd	r22, Y+7	; 0x07
    179e:	78 85       	ldd	r23, Y+8	; 0x08
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	2c f4       	brge	.+10     	; 0x17be <CLCD_voidSend4BitData+0x19c>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <CLCD_voidSend4BitData+0x21a>
	else if (__tmp > 65535)
    17be:	6f 81       	ldd	r22, Y+7	; 0x07
    17c0:	78 85       	ldd	r23, Y+8	; 0x08
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	57 e4       	ldi	r21, 0x47	; 71
    17ce:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	4c f5       	brge	.+82     	; 0x1828 <CLCD_voidSend4BitData+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17da:	8d 85       	ldd	r24, Y+13	; 0x0d
    17dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <CLCD_voidSend4BitData+0x1fc>
    1800:	88 ec       	ldi	r24, 0xC8	; 200
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <CLCD_voidSend4BitData+0x1ea>
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	69 f7       	brne	.-38     	; 0x1800 <CLCD_voidSend4BitData+0x1de>
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <CLCD_voidSend4BitData+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <CLCD_voidSend4BitData+0x226>
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	62 e0       	ldi	r22, 0x02	; 2
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>



}
    185a:	6e 96       	adiw	r28, 0x1e	; 30
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <CLCD_voidSend8BitCommand>:


void CLCD_voidSend8BitCommand(uint8_t Copy_u8Command){
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	2f 97       	sbiw	r28, 0x0f	; 15
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	8f 87       	std	Y+15, r24	; 0x0f

	/* Set RS pin to low for command */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_LOW);
    1882:	83 e0       	ldi	r24, 0x03	; 3
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	6f 85       	ldd	r22, Y+15	; 0x0f
    189a:	0e 94 22 11 	call	0x2244	; 0x2244 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	62 e0       	ldi	r22, 0x02	; 2
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e0       	ldi	r26, 0x00	; 0
    18ae:	b0 e4       	ldi	r27, 0x40	; 64
    18b0:	8b 87       	std	Y+11, r24	; 0x0b
    18b2:	9c 87       	std	Y+12, r25	; 0x0c
    18b4:	ad 87       	std	Y+13, r26	; 0x0d
    18b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    18bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18be:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a ef       	ldi	r20, 0xFA	; 250
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8f 83       	std	Y+7, r24	; 0x07
    18d2:	98 87       	std	Y+8, r25	; 0x08
    18d4:	a9 87       	std	Y+9, r26	; 0x09
    18d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d8:	6f 81       	ldd	r22, Y+7	; 0x07
    18da:	78 85       	ldd	r23, Y+8	; 0x08
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <CLCD_voidSend8BitCommand+0x8e>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9e 83       	std	Y+6, r25	; 0x06
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <CLCD_voidSend8BitCommand+0x10c>
	else if (__tmp > 65535)
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <CLCD_voidSend8BitCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	6b 85       	ldd	r22, Y+11	; 0x0b
    1914:	7c 85       	ldd	r23, Y+12	; 0x0c
    1916:	8d 85       	ldd	r24, Y+13	; 0x0d
    1918:	9e 85       	ldd	r25, Y+14	; 0x0e
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9e 83       	std	Y+6, r25	; 0x06
    1938:	8d 83       	std	Y+5, r24	; 0x05
    193a:	0f c0       	rjmp	.+30     	; 0x195a <CLCD_voidSend8BitCommand+0xee>
    193c:	88 ec       	ldi	r24, 0xC8	; 200
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9c 83       	std	Y+4, r25	; 0x04
    1942:	8b 83       	std	Y+3, r24	; 0x03
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <CLCD_voidSend8BitCommand+0xdc>
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <CLCD_voidSend8BitCommand+0xd0>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <CLCD_voidSend8BitCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	6f 81       	ldd	r22, Y+7	; 0x07
    1966:	78 85       	ldd	r23, Y+8	; 0x08
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <CLCD_voidSend8BitCommand+0x118>
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	62 e0       	ldi	r22, 0x02	; 2
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

}
    1996:	2f 96       	adiw	r28, 0x0f	; 15
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <CLCD_voidSend8BitData>:

void CLCD_voidSend8BitData(uint8_t Copy_u8Data){
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	2f 97       	sbiw	r28, 0x0f	; 15
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	8f 87       	std	Y+15, r24	; 0x0f

	/* Set RS pin to HIGH for DATA */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_HIGH);
    19be:	83 e0       	ldi	r24, 0x03	; 3
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    19c8:	83 e0       	ldi	r24, 0x03	; 3
    19ca:	61 e0       	ldi	r22, 0x01	; 1
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    19d6:	0e 94 22 11 	call	0x2244	; 0x2244 <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	62 e0       	ldi	r22, 0x02	; 2
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a0 e0       	ldi	r26, 0x00	; 0
    19ea:	b0 e4       	ldi	r27, 0x40	; 64
    19ec:	8b 87       	std	Y+11, r24	; 0x0b
    19ee:	9c 87       	std	Y+12, r25	; 0x0c
    19f0:	ad 87       	std	Y+13, r26	; 0x0d
    19f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	4a ef       	ldi	r20, 0xFA	; 250
    1a02:	54 e4       	ldi	r21, 0x44	; 68
    1a04:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	8f 83       	std	Y+7, r24	; 0x07
    1a0e:	98 87       	std	Y+8, r25	; 0x08
    1a10:	a9 87       	std	Y+9, r26	; 0x09
    1a12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a14:	6f 81       	ldd	r22, Y+7	; 0x07
    1a16:	78 85       	ldd	r23, Y+8	; 0x08
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <CLCD_voidSend8BitData+0x8e>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <CLCD_voidSend8BitData+0x10c>
	else if (__tmp > 65535)
    1a36:	6f 81       	ldd	r22, Y+7	; 0x07
    1a38:	78 85       	ldd	r23, Y+8	; 0x08
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	4c f5       	brge	.+82     	; 0x1aa0 <CLCD_voidSend8BitData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9e 83       	std	Y+6, r25	; 0x06
    1a74:	8d 83       	std	Y+5, r24	; 0x05
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <CLCD_voidSend8BitData+0xee>
    1a78:	88 ec       	ldi	r24, 0xC8	; 200
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <CLCD_voidSend8BitData+0xdc>
    1a88:	9c 83       	std	Y+4, r25	; 0x04
    1a8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <CLCD_voidSend8BitData+0xd0>
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <CLCD_voidSend8BitData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa2:	78 85       	ldd	r23, Y+8	; 0x08
    1aa4:	89 85       	ldd	r24, Y+9	; 0x09
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <CLCD_voidSend8BitData+0x118>
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	62 e0       	ldi	r22, 0x02	; 2
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

}
    1ad2:	2f 96       	adiw	r28, 0x0f	; 15
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8_t Copy_u8Data){
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	0f 92       	push	r0
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSend8BitData(Copy_u8Data);

#elif CLCD_MODE == CLCD_4BIT_MODE

	CLCD_voidSend4BitData(Copy_u8Data);
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	0e 94 11 0b 	call	0x1622	; 0x1622 <CLCD_voidSend4BitData>

#endif
}
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8_t Copy_u8Data){
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	0f 92       	push	r0
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSend8BitCommand(Copy_u8Data);

#elif CLCD_MODE == CLCD_4BIT_MODE

	CLCD_voidSend4BitCommand(Copy_u8Data);
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <CLCD_voidSend4BitCommand>

#endif
}
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <CLCD_Clear>:

void CLCD_Clear(){
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62

	/* Clear Display  */
	CLCD_voidSendCmd(ClEAR_LCD);
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CLCD_voidSendCmd>
}
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <CLCD_DispOff>:

void CLCD_DispOff(){
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(DISPLAY_OFF_CURSOR_OFF);
    1b34:	88 e0       	ldi	r24, 0x08	; 8
    1b36:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CLCD_voidSendCmd>
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <CLCD_DispOn>:

void CLCD_DispOn(){
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(DISPLAY_OFF_CURSOR_ON);
    1b48:	8a e0       	ldi	r24, 0x0A	; 10
    1b4a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CLCD_voidSendCmd>
}
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <CLCD_ShL>:

void CLCD_ShL()
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(SHIFT_CURSOR_POSITION_TO_LEFT);
    1b5c:	80 e1       	ldi	r24, 0x10	; 16
    1b5e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CLCD_voidSendCmd>

}
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <CLCD_ShR>:

void CLCD_ShR()
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(SHIFT_CURSOR_POSITION_TO_RIGHT);
    1b70:	84 e1       	ldi	r24, 0x14	; 20
    1b72:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CLCD_voidSendCmd>

}
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <CLCD_voidInit>:
void CLCD_voidInit(void){
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	2e 97       	sbiw	r28, 0x0e	; 14
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e2       	ldi	r26, 0x20	; 32
    1b96:	b2 e4       	ldi	r27, 0x42	; 66
    1b98:	8b 87       	std	Y+11, r24	; 0x0b
    1b9a:	9c 87       	std	Y+12, r25	; 0x0c
    1b9c:	ad 87       	std	Y+13, r26	; 0x0d
    1b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a ef       	ldi	r20, 0xFA	; 250
    1bae:	54 e4       	ldi	r21, 0x44	; 68
    1bb0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8f 83       	std	Y+7, r24	; 0x07
    1bba:	98 87       	std	Y+8, r25	; 0x08
    1bbc:	a9 87       	std	Y+9, r26	; 0x09
    1bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc2:	78 85       	ldd	r23, Y+8	; 0x08
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <CLCD_voidInit+0x66>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1be2:	6f 81       	ldd	r22, Y+7	; 0x07
    1be4:	78 85       	ldd	r23, Y+8	; 0x08
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <CLCD_voidInit+0xc6>
    1c24:	88 ec       	ldi	r24, 0xC8	; 200
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9c 83       	std	Y+4, r25	; 0x04
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <CLCD_voidInit+0xb4>
    1c34:	9c 83       	std	Y+4, r25	; 0x04
    1c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9e 83       	std	Y+6, r25	; 0x06
    1c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8d 81       	ldd	r24, Y+5	; 0x05
    1c44:	9e 81       	ldd	r25, Y+6	; 0x06
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <CLCD_voidInit+0xa8>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4e:	78 85       	ldd	r23, Y+8	; 0x08
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <CLCD_voidInit+0xf0>
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSend8BitCommand(ClEAR_LCD);

#elif CLCD_MODE == CLCD_4BIT_MODE

	/*Send command to set for 4 bit mode */
	CLCD_voidSend4BitCommand(CLCD_4BIT_MODE );
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <CLCD_voidSend4BitCommand>

	/* Function set command control lines and font size */
	CLCD_voidSend4BitCommand(CLCD_FUNC_SET);
    1c7a:	88 e2       	ldi	r24, 0x28	; 40
    1c7c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <CLCD_voidSend4BitCommand>

	/* Display on oFF control */
	CLCD_voidSend4BitCommand(CLCD_DISPLAY_CTRL);
    1c80:	8c e0       	ldi	r24, 0x0C	; 12
    1c82:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <CLCD_voidSend4BitCommand>

	/* Clear Display  */
	CLCD_voidSend4BitCommand(ClEAR_LCD);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <CLCD_voidSend4BitCommand>

#endif
}
    1c8c:	2e 96       	adiw	r28, 0x0e	; 14
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <CLCD_voidSendString>:


void CLCD_voidSendString(const char* Copy_pcString){
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <CLCD_voidSendString+0x6>
    1ca4:	0f 92       	push	r0
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	9b 83       	std	Y+3, r25	; 0x03
    1cac:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t Local_u8Iterator = 0;
    1cae:	19 82       	std	Y+1, r1	; 0x01
    1cb0:	0e c0       	rjmp	.+28     	; 0x1cce <CLCD_voidSendString+0x30>

	while(Copy_pcString[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Iterator]);
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	e2 0f       	add	r30, r18
    1cc0:	f3 1f       	adc	r31, r19
    1cc2:	80 81       	ld	r24, Z
    1cc4:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <CLCD_voidSendData>

		Local_u8Iterator++;
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char* Copy_pcString){

	uint8_t Local_u8Iterator = 0;

	while(Copy_pcString[Local_u8Iterator] != '\0')
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	fc 01       	movw	r30, r24
    1cda:	e2 0f       	add	r30, r18
    1cdc:	f3 1f       	adc	r31, r19
    1cde:	80 81       	ld	r24, Z
    1ce0:	88 23       	and	r24, r24
    1ce2:	39 f7       	brne	.-50     	; 0x1cb2 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[Local_u8Iterator]);

		Local_u8Iterator++;
	}

}
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(uint32  Copy_u8Data)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	a4 97       	sbiw	r28, 0x24	; 36
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	9c a3       	std	Y+36, r25	; 0x24
    1d06:	8b a3       	std	Y+35, r24	; 0x23
	 sint8_t Local_Index ;
	 uint8_t Local_Iterator = 0;
    1d08:	19 82       	std	Y+1, r1	; 0x01
    1d0a:	1d c0       	rjmp	.+58     	; 0x1d46 <CLCD_voidSendNumber+0x56>


	while (Copy_u8Data > 0) {

		// storing remainder in digit array
		arru8Digit[Local_Iterator] = Copy_u8Data % 10;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	e8 2f       	mov	r30, r24
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8b a1       	ldd	r24, Y+35	; 0x23
    1d14:	9c a1       	ldd	r25, Y+36	; 0x24
    1d16:	2a e0       	ldi	r18, 0x0A	; 10
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	b9 01       	movw	r22, r18
    1d1c:	0e 94 a7 18 	call	0x314e	; 0x314e <__udivmodhi4>
    1d20:	28 2f       	mov	r18, r24
    1d22:	ce 01       	movw	r24, r28
    1d24:	03 96       	adiw	r24, 0x03	; 3
    1d26:	e8 0f       	add	r30, r24
    1d28:	f9 1f       	adc	r31, r25
    1d2a:	20 83       	st	Z, r18
		Copy_u8Data =  Copy_u8Data / 10;
    1d2c:	8b a1       	ldd	r24, Y+35	; 0x23
    1d2e:	9c a1       	ldd	r25, Y+36	; 0x24
    1d30:	2a e0       	ldi	r18, 0x0A	; 10
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	b9 01       	movw	r22, r18
    1d36:	0e 94 a7 18 	call	0x314e	; 0x314e <__udivmodhi4>
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9c a3       	std	Y+36, r25	; 0x24
    1d3e:	8b a3       	std	Y+35, r24	; 0x23
		Local_Iterator++;
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	8f 5f       	subi	r24, 0xFF	; 255
    1d44:	89 83       	std	Y+1, r24	; 0x01
	 uint8_t Local_Iterator = 0;
	char arru8Digit [32];



	while (Copy_u8Data > 0) {
    1d46:	8b a1       	ldd	r24, Y+35	; 0x23
    1d48:	9c a1       	ldd	r25, Y+36	; 0x24
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	f9 f6       	brne	.-66     	; 0x1d0c <CLCD_voidSendNumber+0x1c>
		// storing remainder in digit array
		arru8Digit[Local_Iterator] = Copy_u8Data % 10;
		Copy_u8Data =  Copy_u8Data / 10;
		Local_Iterator++;
	}
	for(Local_Index = Local_Iterator-1 ; Local_Index >= 0 ; Local_Index--)
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	81 50       	subi	r24, 0x01	; 1
    1d52:	8a 83       	std	Y+2, r24	; 0x02
    1d54:	11 c0       	rjmp	.+34     	; 0x1d78 <CLCD_voidSendNumber+0x88>
	{
		CLCD_voidSendData(arru8Digit[Local_Index]+ '0') ;
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	28 2f       	mov	r18, r24
    1d5a:	33 27       	eor	r19, r19
    1d5c:	27 fd       	sbrc	r18, 7
    1d5e:	30 95       	com	r19
    1d60:	ce 01       	movw	r24, r28
    1d62:	03 96       	adiw	r24, 0x03	; 3
    1d64:	fc 01       	movw	r30, r24
    1d66:	e2 0f       	add	r30, r18
    1d68:	f3 1f       	adc	r31, r19
    1d6a:	80 81       	ld	r24, Z
    1d6c:	80 5d       	subi	r24, 0xD0	; 208
    1d6e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <CLCD_voidSendData>
		// storing remainder in digit array
		arru8Digit[Local_Iterator] = Copy_u8Data % 10;
		Copy_u8Data =  Copy_u8Data / 10;
		Local_Iterator++;
	}
	for(Local_Index = Local_Iterator-1 ; Local_Index >= 0 ; Local_Index--)
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	81 50       	subi	r24, 0x01	; 1
    1d76:	8a 83       	std	Y+2, r24	; 0x02
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	88 23       	and	r24, r24
    1d7c:	64 f7       	brge	.-40     	; 0x1d56 <CLCD_voidSendNumber+0x66>
	{
		CLCD_voidSendData(arru8Digit[Local_Index]+ '0') ;
	}


}
    1d7e:	a4 96       	adiw	r28, 0x24	; 36
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8_t Copy_u8XPos,uint8_t Copy_u8YPos){
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <CLCD_voidGoToXY+0x6>
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t Local_u8Address;
	if(Copy_u8XPos == 0)
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	88 23       	and	r24, r24
    1da4:	19 f4       	brne	.+6      	; 0x1dac <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	06 c0       	rjmp	.+12     	; 0x1db8 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos == 1)
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	19 f4       	brne	.+6      	; 0x1db8 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8YPos + 0x40;
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	80 5c       	subi	r24, 0xC0	; 192
    1db6:	89 83       	std	Y+1, r24	; 0x01
	 ************************************************
	 * 1 * adresss               ********************
	 ************************************************
	 */

	CLCD_voidSendCmd(Local_u8Address+128);
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	80 58       	subi	r24, 0x80	; 128
    1dbc:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CLCD_voidSendCmd>
}
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <DIO_SetPinDirection>:
* @endcode
***************************************************************/


ErrorState_t DIO_SetPinDirection(DioPort_t Port,DioPin_t Pin, DioMode_t Mode)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	2a 97       	sbiw	r28, 0x0a	; 10
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	8a 83       	std	Y+2, r24	; 0x02
    1de2:	6b 83       	std	Y+3, r22	; 0x03
    1de4:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState_t Local_u8ErrorState = DONE;
    1de6:	8a e0       	ldi	r24, 0x0A	; 10
    1de8:	89 83       	std	Y+1, r24	; 0x01

	if(Pin<= PIN7)
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	88 30       	cpi	r24, 0x08	; 8
    1dee:	08 f0       	brcs	.+2      	; 0x1df2 <DIO_SetPinDirection+0x26>
    1df0:	d5 c1       	rjmp	.+938    	; 0x219c <DIO_SetPinDirection+0x3d0>
	{
		if(Mode==DIO_INPUT)
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <DIO_SetPinDirection+0x2e>
    1df8:	7e c0       	rjmp	.+252    	; 0x1ef6 <DIO_SetPinDirection+0x12a>
		{
			switch(Port)
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	3a 87       	std	Y+10, r19	; 0x0a
    1e02:	29 87       	std	Y+9, r18	; 0x09
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	69 f1       	breq	.+90     	; 0x1e68 <DIO_SetPinDirection+0x9c>
    1e0e:	29 85       	ldd	r18, Y+9	; 0x09
    1e10:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	31 05       	cpc	r19, r1
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <DIO_SetPinDirection+0x56>
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	69 f0       	breq	.+26     	; 0x1e3a <DIO_SetPinDirection+0x6e>
    1e20:	68 c0       	rjmp	.+208    	; 0x1ef2 <DIO_SetPinDirection+0x126>
    1e22:	29 85       	ldd	r18, Y+9	; 0x09
    1e24:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e26:	22 30       	cpi	r18, 0x02	; 2
    1e28:	31 05       	cpc	r19, r1
    1e2a:	a9 f1       	breq	.+106    	; 0x1e96 <DIO_SetPinDirection+0xca>
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	83 30       	cpi	r24, 0x03	; 3
    1e32:	91 05       	cpc	r25, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <DIO_SetPinDirection+0x6c>
    1e36:	46 c0       	rjmp	.+140    	; 0x1ec4 <DIO_SetPinDirection+0xf8>
    1e38:	5c c0       	rjmp	.+184    	; 0x1ef2 <DIO_SetPinDirection+0x126>
			{
			case PORTA: CLR_BIT( PORTA_BASE_PTR->DDR,Pin); break;
    1e3a:	a9 e3       	ldi	r26, 0x39	; 57
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e9 e3       	ldi	r30, 0x39	; 57
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	81 81       	ldd	r24, Z+1	; 0x01
    1e44:	48 2f       	mov	r20, r24
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	02 2e       	mov	r0, r18
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <DIO_SetPinDirection+0x8c>
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	0a 94       	dec	r0
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <DIO_SetPinDirection+0x88>
    1e5c:	80 95       	com	r24
    1e5e:	84 23       	and	r24, r20
    1e60:	11 96       	adiw	r26, 0x01	; 1
    1e62:	8c 93       	st	X, r24
    1e64:	11 97       	sbiw	r26, 0x01	; 1
    1e66:	47 c0       	rjmp	.+142    	; 0x1ef6 <DIO_SetPinDirection+0x12a>
			case PORTB: CLR_BIT( PORTB_BASE_PTR->DDR,Pin); break;
    1e68:	a6 e3       	ldi	r26, 0x36	; 54
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e6 e3       	ldi	r30, 0x36	; 54
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	81 81       	ldd	r24, Z+1	; 0x01
    1e72:	48 2f       	mov	r20, r24
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <DIO_SetPinDirection+0xba>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <DIO_SetPinDirection+0xb6>
    1e8a:	80 95       	com	r24
    1e8c:	84 23       	and	r24, r20
    1e8e:	11 96       	adiw	r26, 0x01	; 1
    1e90:	8c 93       	st	X, r24
    1e92:	11 97       	sbiw	r26, 0x01	; 1
    1e94:	30 c0       	rjmp	.+96     	; 0x1ef6 <DIO_SetPinDirection+0x12a>
			case PORTC: CLR_BIT( PORTC_BASE_PTR->DDR,Pin); break;
    1e96:	a3 e3       	ldi	r26, 0x33	; 51
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e3 e3       	ldi	r30, 0x33	; 51
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 2e       	mov	r0, r18
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <DIO_SetPinDirection+0xe8>
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	0a 94       	dec	r0
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <DIO_SetPinDirection+0xe4>
    1eb8:	80 95       	com	r24
    1eba:	84 23       	and	r24, r20
    1ebc:	11 96       	adiw	r26, 0x01	; 1
    1ebe:	8c 93       	st	X, r24
    1ec0:	11 97       	sbiw	r26, 0x01	; 1
    1ec2:	19 c0       	rjmp	.+50     	; 0x1ef6 <DIO_SetPinDirection+0x12a>
			case PORTD: CLR_BIT( PORTD_BASE_PTR->DDR,Pin); break;
    1ec4:	a0 e3       	ldi	r26, 0x30	; 48
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e0 e3       	ldi	r30, 0x30	; 48
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	81 81       	ldd	r24, Z+1	; 0x01
    1ece:	48 2f       	mov	r20, r24
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 2e       	mov	r0, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <DIO_SetPinDirection+0x116>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <DIO_SetPinDirection+0x112>
    1ee6:	80 95       	com	r24
    1ee8:	84 23       	and	r24, r20
    1eea:	11 96       	adiw	r26, 0x01	; 1
    1eec:	8c 93       	st	X, r24
    1eee:	11 97       	sbiw	r26, 0x01	; 1
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <DIO_SetPinDirection+0x12a>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		if(Mode==DIO_INPUT_PULLUP)
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	09 f0       	breq	.+2      	; 0x1efe <DIO_SetPinDirection+0x132>
    1efc:	cd c0       	rjmp	.+410    	; 0x2098 <DIO_SetPinDirection+0x2cc>
		{
			switch(Port)
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	38 87       	std	Y+8, r19	; 0x08
    1f06:	2f 83       	std	Y+7, r18	; 0x07
    1f08:	8f 81       	ldd	r24, Y+7	; 0x07
    1f0a:	98 85       	ldd	r25, Y+8	; 0x08
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	91 05       	cpc	r25, r1
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <DIO_SetPinDirection+0x148>
    1f12:	41 c0       	rjmp	.+130    	; 0x1f96 <DIO_SetPinDirection+0x1ca>
    1f14:	2f 81       	ldd	r18, Y+7	; 0x07
    1f16:	38 85       	ldd	r19, Y+8	; 0x08
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	2c f4       	brge	.+10     	; 0x1f28 <DIO_SetPinDirection+0x15c>
    1f1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f20:	98 85       	ldd	r25, Y+8	; 0x08
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	71 f0       	breq	.+28     	; 0x1f42 <DIO_SetPinDirection+0x176>
    1f26:	b5 c0       	rjmp	.+362    	; 0x2092 <DIO_SetPinDirection+0x2c6>
    1f28:	2f 81       	ldd	r18, Y+7	; 0x07
    1f2a:	38 85       	ldd	r19, Y+8	; 0x08
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	31 05       	cpc	r19, r1
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <DIO_SetPinDirection+0x168>
    1f32:	5b c0       	rjmp	.+182    	; 0x1fea <DIO_SetPinDirection+0x21e>
    1f34:	8f 81       	ldd	r24, Y+7	; 0x07
    1f36:	98 85       	ldd	r25, Y+8	; 0x08
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <DIO_SetPinDirection+0x174>
    1f3e:	7f c0       	rjmp	.+254    	; 0x203e <DIO_SetPinDirection+0x272>
    1f40:	a8 c0       	rjmp	.+336    	; 0x2092 <DIO_SetPinDirection+0x2c6>
			{
			case PORTA: CLR_BIT( PORTA_BASE_PTR->DDR,Pin);SET_BIT( PORTA_BASE_PTR->PORT,Pin); break;
    1f42:	a9 e3       	ldi	r26, 0x39	; 57
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e9 e3       	ldi	r30, 0x39	; 57
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	81 81       	ldd	r24, Z+1	; 0x01
    1f4c:	48 2f       	mov	r20, r24
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <DIO_SetPinDirection+0x192>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	2a 95       	dec	r18
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <DIO_SetPinDirection+0x18e>
    1f62:	80 95       	com	r24
    1f64:	84 23       	and	r24, r20
    1f66:	11 96       	adiw	r26, 0x01	; 1
    1f68:	8c 93       	st	X, r24
    1f6a:	a9 e3       	ldi	r26, 0x39	; 57
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e9 e3       	ldi	r30, 0x39	; 57
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	48 2f       	mov	r20, r24
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	02 2e       	mov	r0, r18
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <DIO_SetPinDirection+0x1bc>
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	0a 94       	dec	r0
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <DIO_SetPinDirection+0x1b8>
    1f8c:	84 2b       	or	r24, r20
    1f8e:	12 96       	adiw	r26, 0x02	; 2
    1f90:	8c 93       	st	X, r24
    1f92:	12 97       	sbiw	r26, 0x02	; 2
    1f94:	04 c1       	rjmp	.+520    	; 0x219e <DIO_SetPinDirection+0x3d2>
			case PORTB: CLR_BIT( PORTB_BASE_PTR->DDR,Pin);SET_BIT( PORTB_BASE_PTR->PORT,Pin); break;
    1f96:	a6 e3       	ldi	r26, 0x36	; 54
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e6 e3       	ldi	r30, 0x36	; 54
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	81 81       	ldd	r24, Z+1	; 0x01
    1fa0:	48 2f       	mov	r20, r24
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <DIO_SetPinDirection+0x1e6>
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	2a 95       	dec	r18
    1fb4:	e2 f7       	brpl	.-8      	; 0x1fae <DIO_SetPinDirection+0x1e2>
    1fb6:	80 95       	com	r24
    1fb8:	84 23       	and	r24, r20
    1fba:	11 96       	adiw	r26, 0x01	; 1
    1fbc:	8c 93       	st	X, r24
    1fbe:	a6 e3       	ldi	r26, 0x36	; 54
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e6 e3       	ldi	r30, 0x36	; 54
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	48 2f       	mov	r20, r24
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	02 2e       	mov	r0, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <DIO_SetPinDirection+0x210>
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	0a 94       	dec	r0
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <DIO_SetPinDirection+0x20c>
    1fe0:	84 2b       	or	r24, r20
    1fe2:	12 96       	adiw	r26, 0x02	; 2
    1fe4:	8c 93       	st	X, r24
    1fe6:	12 97       	sbiw	r26, 0x02	; 2
    1fe8:	da c0       	rjmp	.+436    	; 0x219e <DIO_SetPinDirection+0x3d2>
			case PORTC: CLR_BIT( PORTC_BASE_PTR->DDR,Pin);SET_BIT( PORTC_BASE_PTR->PORT,Pin); break;
    1fea:	a3 e3       	ldi	r26, 0x33	; 51
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e3 e3       	ldi	r30, 0x33	; 51
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	81 81       	ldd	r24, Z+1	; 0x01
    1ff4:	48 2f       	mov	r20, r24
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_SetPinDirection+0x23a>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	2a 95       	dec	r18
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <DIO_SetPinDirection+0x236>
    200a:	80 95       	com	r24
    200c:	84 23       	and	r24, r20
    200e:	11 96       	adiw	r26, 0x01	; 1
    2010:	8c 93       	st	X, r24
    2012:	a3 e3       	ldi	r26, 0x33	; 51
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e3 e3       	ldi	r30, 0x33	; 51
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	48 2f       	mov	r20, r24
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	02 2e       	mov	r0, r18
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <DIO_SetPinDirection+0x264>
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	0a 94       	dec	r0
    2032:	e2 f7       	brpl	.-8      	; 0x202c <DIO_SetPinDirection+0x260>
    2034:	84 2b       	or	r24, r20
    2036:	12 96       	adiw	r26, 0x02	; 2
    2038:	8c 93       	st	X, r24
    203a:	12 97       	sbiw	r26, 0x02	; 2
    203c:	b0 c0       	rjmp	.+352    	; 0x219e <DIO_SetPinDirection+0x3d2>
			case PORTD: CLR_BIT( PORTD_BASE_PTR->DDR,Pin);SET_BIT( PORTD_BASE_PTR->PORT,Pin); break;
    203e:	a0 e3       	ldi	r26, 0x30	; 48
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e0 e3       	ldi	r30, 0x30	; 48
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	81 81       	ldd	r24, Z+1	; 0x01
    2048:	48 2f       	mov	r20, r24
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	02 c0       	rjmp	.+4      	; 0x205a <DIO_SetPinDirection+0x28e>
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	2a 95       	dec	r18
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <DIO_SetPinDirection+0x28a>
    205e:	80 95       	com	r24
    2060:	84 23       	and	r24, r20
    2062:	11 96       	adiw	r26, 0x01	; 1
    2064:	8c 93       	st	X, r24
    2066:	a0 e3       	ldi	r26, 0x30	; 48
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e0 e3       	ldi	r30, 0x30	; 48
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	82 81       	ldd	r24, Z+2	; 0x02
    2070:	48 2f       	mov	r20, r24
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	02 2e       	mov	r0, r18
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <DIO_SetPinDirection+0x2b8>
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	0a 94       	dec	r0
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <DIO_SetPinDirection+0x2b4>
    2088:	84 2b       	or	r24, r20
    208a:	12 96       	adiw	r26, 0x02	; 2
    208c:	8c 93       	st	X, r24
    208e:	12 97       	sbiw	r26, 0x02	; 2
    2090:	86 c0       	rjmp	.+268    	; 0x219e <DIO_SetPinDirection+0x3d2>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	83 c0       	rjmp	.+262    	; 0x219e <DIO_SetPinDirection+0x3d2>
			}
		}
		else if (Mode==DIO_OUTPUT)
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	88 23       	and	r24, r24
    209c:	09 f0       	breq	.+2      	; 0x20a0 <DIO_SetPinDirection+0x2d4>
    209e:	7b c0       	rjmp	.+246    	; 0x2196 <DIO_SetPinDirection+0x3ca>
		{
			switch(Port)
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	3e 83       	std	Y+6, r19	; 0x06
    20a8:	2d 83       	std	Y+5, r18	; 0x05
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	61 f1       	breq	.+88     	; 0x210c <DIO_SetPinDirection+0x340>
    20b4:	2d 81       	ldd	r18, Y+5	; 0x05
    20b6:	3e 81       	ldd	r19, Y+6	; 0x06
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <DIO_SetPinDirection+0x2fc>
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f0       	breq	.+26     	; 0x20e0 <DIO_SetPinDirection+0x314>
    20c6:	64 c0       	rjmp	.+200    	; 0x2190 <DIO_SetPinDirection+0x3c4>
    20c8:	2d 81       	ldd	r18, Y+5	; 0x05
    20ca:	3e 81       	ldd	r19, Y+6	; 0x06
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	99 f1       	breq	.+102    	; 0x2138 <DIO_SetPinDirection+0x36c>
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	83 30       	cpi	r24, 0x03	; 3
    20d8:	91 05       	cpc	r25, r1
    20da:	09 f4       	brne	.+2      	; 0x20de <DIO_SetPinDirection+0x312>
    20dc:	43 c0       	rjmp	.+134    	; 0x2164 <DIO_SetPinDirection+0x398>
    20de:	58 c0       	rjmp	.+176    	; 0x2190 <DIO_SetPinDirection+0x3c4>
			{
			case PORTA: SET_BIT( PORTA_BASE_PTR->DDR,Pin); break;
    20e0:	a9 e3       	ldi	r26, 0x39	; 57
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e9 e3       	ldi	r30, 0x39	; 57
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	81 81       	ldd	r24, Z+1	; 0x01
    20ea:	48 2f       	mov	r20, r24
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	02 2e       	mov	r0, r18
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <DIO_SetPinDirection+0x332>
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	0a 94       	dec	r0
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <DIO_SetPinDirection+0x32e>
    2102:	84 2b       	or	r24, r20
    2104:	11 96       	adiw	r26, 0x01	; 1
    2106:	8c 93       	st	X, r24
    2108:	11 97       	sbiw	r26, 0x01	; 1
    210a:	49 c0       	rjmp	.+146    	; 0x219e <DIO_SetPinDirection+0x3d2>
			case PORTB: SET_BIT( PORTB_BASE_PTR->DDR,Pin); break;
    210c:	a6 e3       	ldi	r26, 0x36	; 54
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e6 e3       	ldi	r30, 0x36	; 54
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	81 81       	ldd	r24, Z+1	; 0x01
    2116:	48 2f       	mov	r20, r24
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 2e       	mov	r0, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <DIO_SetPinDirection+0x35e>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	0a 94       	dec	r0
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <DIO_SetPinDirection+0x35a>
    212e:	84 2b       	or	r24, r20
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	8c 93       	st	X, r24
    2134:	11 97       	sbiw	r26, 0x01	; 1
    2136:	33 c0       	rjmp	.+102    	; 0x219e <DIO_SetPinDirection+0x3d2>
			case PORTC: SET_BIT( PORTC_BASE_PTR->DDR,Pin); break;
    2138:	a3 e3       	ldi	r26, 0x33	; 51
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e3 e3       	ldi	r30, 0x33	; 51
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	81 81       	ldd	r24, Z+1	; 0x01
    2142:	48 2f       	mov	r20, r24
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 2e       	mov	r0, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <DIO_SetPinDirection+0x38a>
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	0a 94       	dec	r0
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <DIO_SetPinDirection+0x386>
    215a:	84 2b       	or	r24, r20
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	8c 93       	st	X, r24
    2160:	11 97       	sbiw	r26, 0x01	; 1
    2162:	1d c0       	rjmp	.+58     	; 0x219e <DIO_SetPinDirection+0x3d2>
			case PORTD: SET_BIT( PORTD_BASE_PTR->DDR,Pin); break;
    2164:	a0 e3       	ldi	r26, 0x30	; 48
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e0 e3       	ldi	r30, 0x30	; 48
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	81 81       	ldd	r24, Z+1	; 0x01
    216e:	48 2f       	mov	r20, r24
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 2e       	mov	r0, r18
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <DIO_SetPinDirection+0x3b6>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	0a 94       	dec	r0
    2184:	e2 f7       	brpl	.-8      	; 0x217e <DIO_SetPinDirection+0x3b2>
    2186:	84 2b       	or	r24, r20
    2188:	11 96       	adiw	r26, 0x01	; 1
    218a:	8c 93       	st	X, r24
    218c:	11 97       	sbiw	r26, 0x01	; 1
    218e:	07 c0       	rjmp	.+14     	; 0x219e <DIO_SetPinDirection+0x3d2>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	04 c0       	rjmp	.+8      	; 0x219e <DIO_SetPinDirection+0x3d2>
			}
		}
		else
		{
			Local_u8ErrorState = MODE_NOT_AVALIABLE;
    2196:	83 e0       	ldi	r24, 0x03	; 3
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	01 c0       	rjmp	.+2      	; 0x219e <DIO_SetPinDirection+0x3d2>
		}
	}
	else
	{
		Local_u8ErrorState = PIN_NOT_FOUND;
    219c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    219e:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a0:	2a 96       	adiw	r28, 0x0a	; 10
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <DIO_SetPortDirection>:
* DIO_SetPortDirection(PORTA,15);
* @endcode
***************************************************************************/

ErrorState_t DIO_SetPortDirection(DioPort_t Port, uint8_t u8Value)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <DIO_SetPortDirection+0x6>
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <DIO_SetPortDirection+0x8>
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	8a 83       	std	Y+2, r24	; 0x02
    21c2:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_u8ErrorState = DONE;
    21c4:	8a e0       	ldi	r24, 0x0A	; 10
    21c6:	89 83       	std	Y+1, r24	; 0x01

	switch(Port)
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	3d 83       	std	Y+5, r19	; 0x05
    21d0:	2c 83       	std	Y+4, r18	; 0x04
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	9d 81       	ldd	r25, Y+5	; 0x05
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	91 05       	cpc	r25, r1
    21da:	d1 f0       	breq	.+52     	; 0x2210 <DIO_SetPortDirection+0x5e>
    21dc:	2c 81       	ldd	r18, Y+4	; 0x04
    21de:	3d 81       	ldd	r19, Y+5	; 0x05
    21e0:	22 30       	cpi	r18, 0x02	; 2
    21e2:	31 05       	cpc	r19, r1
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <DIO_SetPortDirection+0x3e>
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	61 f0       	breq	.+24     	; 0x2206 <DIO_SetPortDirection+0x54>
    21ee:	1f c0       	rjmp	.+62     	; 0x222e <DIO_SetPortDirection+0x7c>
    21f0:	2c 81       	ldd	r18, Y+4	; 0x04
    21f2:	3d 81       	ldd	r19, Y+5	; 0x05
    21f4:	22 30       	cpi	r18, 0x02	; 2
    21f6:	31 05       	cpc	r19, r1
    21f8:	81 f0       	breq	.+32     	; 0x221a <DIO_SetPortDirection+0x68>
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	9d 81       	ldd	r25, Y+5	; 0x05
    21fe:	83 30       	cpi	r24, 0x03	; 3
    2200:	91 05       	cpc	r25, r1
    2202:	81 f0       	breq	.+32     	; 0x2224 <DIO_SetPortDirection+0x72>
    2204:	14 c0       	rjmp	.+40     	; 0x222e <DIO_SetPortDirection+0x7c>
	{
	case PORTA : PORTA_BASE_PTR->DDR = u8Value; break;
    2206:	e9 e3       	ldi	r30, 0x39	; 57
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	81 83       	std	Z+1, r24	; 0x01
    220e:	11 c0       	rjmp	.+34     	; 0x2232 <DIO_SetPortDirection+0x80>
	case PORTB : PORTB_BASE_PTR->DDR = u8Value; break;
    2210:	e6 e3       	ldi	r30, 0x36	; 54
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	81 83       	std	Z+1, r24	; 0x01
    2218:	0c c0       	rjmp	.+24     	; 0x2232 <DIO_SetPortDirection+0x80>
	case PORTC : PORTC_BASE_PTR->DDR = u8Value; break;
    221a:	e3 e3       	ldi	r30, 0x33	; 51
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	81 83       	std	Z+1, r24	; 0x01
    2222:	07 c0       	rjmp	.+14     	; 0x2232 <DIO_SetPortDirection+0x80>
	case PORTD : PORTD_BASE_PTR->DDR = u8Value; break;
    2224:	e0 e3       	ldi	r30, 0x30	; 48
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	81 83       	std	Z+1, r24	; 0x01
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <DIO_SetPortDirection+0x80>
	default: Local_u8ErrorState = PORT_NOT_FOUND;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2232:	89 81       	ldd	r24, Y+1	; 0x01
}
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <DIO_SetPortValue>:
* @endcode
***************************************************************************/


ErrorState_t DIO_SetPortValue(DioPort_t Port, uint8_t u8Value)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <DIO_SetPortValue+0x6>
    224a:	00 d0       	rcall	.+0      	; 0x224c <DIO_SetPortValue+0x8>
    224c:	0f 92       	push	r0
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	8a 83       	std	Y+2, r24	; 0x02
    2254:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_u8ErrorState = DONE;
    2256:	8a e0       	ldi	r24, 0x0A	; 10
    2258:	89 83       	std	Y+1, r24	; 0x01

	switch(Port)
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	3d 83       	std	Y+5, r19	; 0x05
    2262:	2c 83       	std	Y+4, r18	; 0x04
    2264:	8c 81       	ldd	r24, Y+4	; 0x04
    2266:	9d 81       	ldd	r25, Y+5	; 0x05
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	91 05       	cpc	r25, r1
    226c:	d1 f0       	breq	.+52     	; 0x22a2 <DIO_SetPortValue+0x5e>
    226e:	2c 81       	ldd	r18, Y+4	; 0x04
    2270:	3d 81       	ldd	r19, Y+5	; 0x05
    2272:	22 30       	cpi	r18, 0x02	; 2
    2274:	31 05       	cpc	r19, r1
    2276:	2c f4       	brge	.+10     	; 0x2282 <DIO_SetPortValue+0x3e>
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	9d 81       	ldd	r25, Y+5	; 0x05
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	61 f0       	breq	.+24     	; 0x2298 <DIO_SetPortValue+0x54>
    2280:	1f c0       	rjmp	.+62     	; 0x22c0 <DIO_SetPortValue+0x7c>
    2282:	2c 81       	ldd	r18, Y+4	; 0x04
    2284:	3d 81       	ldd	r19, Y+5	; 0x05
    2286:	22 30       	cpi	r18, 0x02	; 2
    2288:	31 05       	cpc	r19, r1
    228a:	81 f0       	breq	.+32     	; 0x22ac <DIO_SetPortValue+0x68>
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	9d 81       	ldd	r25, Y+5	; 0x05
    2290:	83 30       	cpi	r24, 0x03	; 3
    2292:	91 05       	cpc	r25, r1
    2294:	81 f0       	breq	.+32     	; 0x22b6 <DIO_SetPortValue+0x72>
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <DIO_SetPortValue+0x7c>
	{
	case PORTA : PORTA_BASE_PTR->PORT = u8Value; break;
    2298:	e9 e3       	ldi	r30, 0x39	; 57
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	82 83       	std	Z+2, r24	; 0x02
    22a0:	11 c0       	rjmp	.+34     	; 0x22c4 <DIO_SetPortValue+0x80>
	case PORTB : PORTB_BASE_PTR->PORT = u8Value; break;
    22a2:	e6 e3       	ldi	r30, 0x36	; 54
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	82 83       	std	Z+2, r24	; 0x02
    22aa:	0c c0       	rjmp	.+24     	; 0x22c4 <DIO_SetPortValue+0x80>
	case PORTC : PORTC_BASE_PTR->PORT = u8Value; break;
    22ac:	e3 e3       	ldi	r30, 0x33	; 51
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	82 83       	std	Z+2, r24	; 0x02
    22b4:	07 c0       	rjmp	.+14     	; 0x22c4 <DIO_SetPortValue+0x80>
	case PORTD : PORTD_BASE_PTR->PORT = u8Value; break;
    22b6:	e0 e3       	ldi	r30, 0x30	; 48
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	82 83       	std	Z+2, r24	; 0x02
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <DIO_SetPortValue+0x80>
	default: Local_u8ErrorState= PORT_NOT_FOUND;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <DIO_SetPinValue>:
* DIO_SetPinValue(PORTB, PIN1 , HIGH);
* @endcode
**********************************************************************/

ErrorState_t DIO_SetPinValue(DioPort_t Port,DioPin_t Pin, DioState_t State)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	28 97       	sbiw	r28, 0x08	; 8
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	8a 83       	std	Y+2, r24	; 0x02
    22ec:	6b 83       	std	Y+3, r22	; 0x03
    22ee:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState_t Local_u8ErrorState = DONE;
    22f0:	8a e0       	ldi	r24, 0x0A	; 10
    22f2:	89 83       	std	Y+1, r24	; 0x01

	if(Pin<= PIN7)
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	88 30       	cpi	r24, 0x08	; 8
    22f8:	08 f0       	brcs	.+2      	; 0x22fc <DIO_SetPinValue+0x26>
    22fa:	05 c1       	rjmp	.+522    	; 0x2506 <DIO_SetPinValue+0x230>
	{
		if(State==DIO_LOW)
    22fc:	8c 81       	ldd	r24, Y+4	; 0x04
    22fe:	88 23       	and	r24, r24
    2300:	09 f0       	breq	.+2      	; 0x2304 <DIO_SetPinValue+0x2e>
    2302:	7f c0       	rjmp	.+254    	; 0x2402 <DIO_SetPinValue+0x12c>
		{
			switch(Port)
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	38 87       	std	Y+8, r19	; 0x08
    230c:	2f 83       	std	Y+7, r18	; 0x07
    230e:	8f 81       	ldd	r24, Y+7	; 0x07
    2310:	98 85       	ldd	r25, Y+8	; 0x08
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	91 05       	cpc	r25, r1
    2316:	69 f1       	breq	.+90     	; 0x2372 <DIO_SetPinValue+0x9c>
    2318:	2f 81       	ldd	r18, Y+7	; 0x07
    231a:	38 85       	ldd	r19, Y+8	; 0x08
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	2c f4       	brge	.+10     	; 0x232c <DIO_SetPinValue+0x56>
    2322:	8f 81       	ldd	r24, Y+7	; 0x07
    2324:	98 85       	ldd	r25, Y+8	; 0x08
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f0       	breq	.+26     	; 0x2344 <DIO_SetPinValue+0x6e>
    232a:	68 c0       	rjmp	.+208    	; 0x23fc <DIO_SetPinValue+0x126>
    232c:	2f 81       	ldd	r18, Y+7	; 0x07
    232e:	38 85       	ldd	r19, Y+8	; 0x08
    2330:	22 30       	cpi	r18, 0x02	; 2
    2332:	31 05       	cpc	r19, r1
    2334:	a9 f1       	breq	.+106    	; 0x23a0 <DIO_SetPinValue+0xca>
    2336:	8f 81       	ldd	r24, Y+7	; 0x07
    2338:	98 85       	ldd	r25, Y+8	; 0x08
    233a:	83 30       	cpi	r24, 0x03	; 3
    233c:	91 05       	cpc	r25, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <DIO_SetPinValue+0x6c>
    2340:	46 c0       	rjmp	.+140    	; 0x23ce <DIO_SetPinValue+0xf8>
    2342:	5c c0       	rjmp	.+184    	; 0x23fc <DIO_SetPinValue+0x126>
			{
			case PORTA: CLR_BIT(PORTA_BASE_PTR->PORT,Pin); break;
    2344:	a9 e3       	ldi	r26, 0x39	; 57
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e9 e3       	ldi	r30, 0x39	; 57
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	48 2f       	mov	r20, r24
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 2e       	mov	r0, r18
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <DIO_SetPinValue+0x8c>
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	0a 94       	dec	r0
    2364:	e2 f7       	brpl	.-8      	; 0x235e <DIO_SetPinValue+0x88>
    2366:	80 95       	com	r24
    2368:	84 23       	and	r24, r20
    236a:	12 96       	adiw	r26, 0x02	; 2
    236c:	8c 93       	st	X, r24
    236e:	12 97       	sbiw	r26, 0x02	; 2
    2370:	cb c0       	rjmp	.+406    	; 0x2508 <DIO_SetPinValue+0x232>
			case PORTB: CLR_BIT(PORTB_BASE_PTR->PORT,Pin); break;
    2372:	a6 e3       	ldi	r26, 0x36	; 54
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e6 e3       	ldi	r30, 0x36	; 54
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	48 2f       	mov	r20, r24
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	02 2e       	mov	r0, r18
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <DIO_SetPinValue+0xba>
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <DIO_SetPinValue+0xb6>
    2394:	80 95       	com	r24
    2396:	84 23       	and	r24, r20
    2398:	12 96       	adiw	r26, 0x02	; 2
    239a:	8c 93       	st	X, r24
    239c:	12 97       	sbiw	r26, 0x02	; 2
    239e:	b4 c0       	rjmp	.+360    	; 0x2508 <DIO_SetPinValue+0x232>
			case PORTC: CLR_BIT(PORTC_BASE_PTR->PORT,Pin); break;
    23a0:	a3 e3       	ldi	r26, 0x33	; 51
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e3 e3       	ldi	r30, 0x33	; 51
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	48 2f       	mov	r20, r24
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	02 2e       	mov	r0, r18
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <DIO_SetPinValue+0xe8>
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	0a 94       	dec	r0
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <DIO_SetPinValue+0xe4>
    23c2:	80 95       	com	r24
    23c4:	84 23       	and	r24, r20
    23c6:	12 96       	adiw	r26, 0x02	; 2
    23c8:	8c 93       	st	X, r24
    23ca:	12 97       	sbiw	r26, 0x02	; 2
    23cc:	9d c0       	rjmp	.+314    	; 0x2508 <DIO_SetPinValue+0x232>
			case PORTD: CLR_BIT(PORTD_BASE_PTR->PORT,Pin); break;
    23ce:	a0 e3       	ldi	r26, 0x30	; 48
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e0 e3       	ldi	r30, 0x30	; 48
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	48 2f       	mov	r20, r24
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	02 2e       	mov	r0, r18
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <DIO_SetPinValue+0x116>
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	0a 94       	dec	r0
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <DIO_SetPinValue+0x112>
    23f0:	80 95       	com	r24
    23f2:	84 23       	and	r24, r20
    23f4:	12 96       	adiw	r26, 0x02	; 2
    23f6:	8c 93       	st	X, r24
    23f8:	12 97       	sbiw	r26, 0x02	; 2
    23fa:	86 c0       	rjmp	.+268    	; 0x2508 <DIO_SetPinValue+0x232>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	83 c0       	rjmp	.+262    	; 0x2508 <DIO_SetPinValue+0x232>
			}
		}
		else if (State==DIO_HIGH)
    2402:	8c 81       	ldd	r24, Y+4	; 0x04
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	09 f0       	breq	.+2      	; 0x240a <DIO_SetPinValue+0x134>
    2408:	7b c0       	rjmp	.+246    	; 0x2500 <DIO_SetPinValue+0x22a>
		{
			switch(Port)
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	3e 83       	std	Y+6, r19	; 0x06
    2412:	2d 83       	std	Y+5, r18	; 0x05
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	91 05       	cpc	r25, r1
    241c:	61 f1       	breq	.+88     	; 0x2476 <DIO_SetPinValue+0x1a0>
    241e:	2d 81       	ldd	r18, Y+5	; 0x05
    2420:	3e 81       	ldd	r19, Y+6	; 0x06
    2422:	22 30       	cpi	r18, 0x02	; 2
    2424:	31 05       	cpc	r19, r1
    2426:	2c f4       	brge	.+10     	; 0x2432 <DIO_SetPinValue+0x15c>
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	69 f0       	breq	.+26     	; 0x244a <DIO_SetPinValue+0x174>
    2430:	64 c0       	rjmp	.+200    	; 0x24fa <DIO_SetPinValue+0x224>
    2432:	2d 81       	ldd	r18, Y+5	; 0x05
    2434:	3e 81       	ldd	r19, Y+6	; 0x06
    2436:	22 30       	cpi	r18, 0x02	; 2
    2438:	31 05       	cpc	r19, r1
    243a:	99 f1       	breq	.+102    	; 0x24a2 <DIO_SetPinValue+0x1cc>
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	83 30       	cpi	r24, 0x03	; 3
    2442:	91 05       	cpc	r25, r1
    2444:	09 f4       	brne	.+2      	; 0x2448 <DIO_SetPinValue+0x172>
    2446:	43 c0       	rjmp	.+134    	; 0x24ce <DIO_SetPinValue+0x1f8>
    2448:	58 c0       	rjmp	.+176    	; 0x24fa <DIO_SetPinValue+0x224>
			{
			case PORTA: SET_BIT(PORTA_BASE_PTR->PORT,Pin); break;
    244a:	a9 e3       	ldi	r26, 0x39	; 57
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e9 e3       	ldi	r30, 0x39	; 57
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	48 2f       	mov	r20, r24
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	02 2e       	mov	r0, r18
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <DIO_SetPinValue+0x192>
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	0a 94       	dec	r0
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <DIO_SetPinValue+0x18e>
    246c:	84 2b       	or	r24, r20
    246e:	12 96       	adiw	r26, 0x02	; 2
    2470:	8c 93       	st	X, r24
    2472:	12 97       	sbiw	r26, 0x02	; 2
    2474:	49 c0       	rjmp	.+146    	; 0x2508 <DIO_SetPinValue+0x232>
			case PORTB: SET_BIT(PORTB_BASE_PTR->PORT,Pin); break;
    2476:	a6 e3       	ldi	r26, 0x36	; 54
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e6 e3       	ldi	r30, 0x36	; 54
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	48 2f       	mov	r20, r24
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	02 2e       	mov	r0, r18
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <DIO_SetPinValue+0x1be>
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	0a 94       	dec	r0
    2496:	e2 f7       	brpl	.-8      	; 0x2490 <DIO_SetPinValue+0x1ba>
    2498:	84 2b       	or	r24, r20
    249a:	12 96       	adiw	r26, 0x02	; 2
    249c:	8c 93       	st	X, r24
    249e:	12 97       	sbiw	r26, 0x02	; 2
    24a0:	33 c0       	rjmp	.+102    	; 0x2508 <DIO_SetPinValue+0x232>
			case PORTC: SET_BIT(PORTC_BASE_PTR->PORT,Pin); break;
    24a2:	a3 e3       	ldi	r26, 0x33	; 51
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e3 e3       	ldi	r30, 0x33	; 51
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	48 2f       	mov	r20, r24
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 2e       	mov	r0, r18
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <DIO_SetPinValue+0x1ea>
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	0a 94       	dec	r0
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <DIO_SetPinValue+0x1e6>
    24c4:	84 2b       	or	r24, r20
    24c6:	12 96       	adiw	r26, 0x02	; 2
    24c8:	8c 93       	st	X, r24
    24ca:	12 97       	sbiw	r26, 0x02	; 2
    24cc:	1d c0       	rjmp	.+58     	; 0x2508 <DIO_SetPinValue+0x232>
			case PORTD: SET_BIT(PORTD_BASE_PTR->PORT,Pin); break;
    24ce:	a0 e3       	ldi	r26, 0x30	; 48
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e0 e3       	ldi	r30, 0x30	; 48
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	48 2f       	mov	r20, r24
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	02 2e       	mov	r0, r18
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <DIO_SetPinValue+0x216>
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	0a 94       	dec	r0
    24ee:	e2 f7       	brpl	.-8      	; 0x24e8 <DIO_SetPinValue+0x212>
    24f0:	84 2b       	or	r24, r20
    24f2:	12 96       	adiw	r26, 0x02	; 2
    24f4:	8c 93       	st	X, r24
    24f6:	12 97       	sbiw	r26, 0x02	; 2
    24f8:	07 c0       	rjmp	.+14     	; 0x2508 <DIO_SetPinValue+0x232>
			default: Local_u8ErrorState = PORT_NOT_FOUND; break;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	04 c0       	rjmp	.+8      	; 0x2508 <DIO_SetPinValue+0x232>
			}
		}
		else
		{
			Local_u8ErrorState = STATE_NOT_AVALIABLE;
    2500:	84 e0       	ldi	r24, 0x04	; 4
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <DIO_SetPinValue+0x232>
		}
	}
	else
	{
		Local_u8ErrorState = PIN_NOT_FOUND;
    2506:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2508:	89 81       	ldd	r24, Y+1	; 0x01
}
    250a:	28 96       	adiw	r28, 0x08	; 8
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <DIO_TogglePinValue>:
* @endcode
***************************************************/


ErrorState_t DIO_TogglePinValue(DioPort_t Port,DioPin_t Pin)
{
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	00 d0       	rcall	.+0      	; 0x2522 <DIO_TogglePinValue+0x6>
    2522:	00 d0       	rcall	.+0      	; 0x2524 <DIO_TogglePinValue+0x8>
    2524:	0f 92       	push	r0
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	8a 83       	std	Y+2, r24	; 0x02
    252c:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_u8ErrorState= DONE ;
    252e:	8a e0       	ldi	r24, 0x0A	; 10
    2530:	89 83       	std	Y+1, r24	; 0x01
	if(Pin<= PIN7)
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	88 30       	cpi	r24, 0x08	; 8
    2536:	08 f0       	brcs	.+2      	; 0x253a <DIO_TogglePinValue+0x1e>
    2538:	7b c0       	rjmp	.+246    	; 0x2630 <DIO_TogglePinValue+0x114>
	{
		switch(Port)
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	3d 83       	std	Y+5, r19	; 0x05
    2542:	2c 83       	std	Y+4, r18	; 0x04
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	9d 81       	ldd	r25, Y+5	; 0x05
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	91 05       	cpc	r25, r1
    254c:	61 f1       	breq	.+88     	; 0x25a6 <DIO_TogglePinValue+0x8a>
    254e:	2c 81       	ldd	r18, Y+4	; 0x04
    2550:	3d 81       	ldd	r19, Y+5	; 0x05
    2552:	22 30       	cpi	r18, 0x02	; 2
    2554:	31 05       	cpc	r19, r1
    2556:	2c f4       	brge	.+10     	; 0x2562 <DIO_TogglePinValue+0x46>
    2558:	8c 81       	ldd	r24, Y+4	; 0x04
    255a:	9d 81       	ldd	r25, Y+5	; 0x05
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f0       	breq	.+26     	; 0x257a <DIO_TogglePinValue+0x5e>
    2560:	64 c0       	rjmp	.+200    	; 0x262a <DIO_TogglePinValue+0x10e>
    2562:	2c 81       	ldd	r18, Y+4	; 0x04
    2564:	3d 81       	ldd	r19, Y+5	; 0x05
    2566:	22 30       	cpi	r18, 0x02	; 2
    2568:	31 05       	cpc	r19, r1
    256a:	99 f1       	breq	.+102    	; 0x25d2 <DIO_TogglePinValue+0xb6>
    256c:	8c 81       	ldd	r24, Y+4	; 0x04
    256e:	9d 81       	ldd	r25, Y+5	; 0x05
    2570:	83 30       	cpi	r24, 0x03	; 3
    2572:	91 05       	cpc	r25, r1
    2574:	09 f4       	brne	.+2      	; 0x2578 <DIO_TogglePinValue+0x5c>
    2576:	43 c0       	rjmp	.+134    	; 0x25fe <DIO_TogglePinValue+0xe2>
    2578:	58 c0       	rjmp	.+176    	; 0x262a <DIO_TogglePinValue+0x10e>
		{
		case PORTA: TOG_BIT(PORTA_BASE_PTR->PORT,Pin); break;
    257a:	a9 e3       	ldi	r26, 0x39	; 57
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e9 e3       	ldi	r30, 0x39	; 57
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	48 2f       	mov	r20, r24
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 2e       	mov	r0, r18
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <DIO_TogglePinValue+0x7c>
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	0a 94       	dec	r0
    259a:	e2 f7       	brpl	.-8      	; 0x2594 <DIO_TogglePinValue+0x78>
    259c:	84 27       	eor	r24, r20
    259e:	12 96       	adiw	r26, 0x02	; 2
    25a0:	8c 93       	st	X, r24
    25a2:	12 97       	sbiw	r26, 0x02	; 2
    25a4:	46 c0       	rjmp	.+140    	; 0x2632 <DIO_TogglePinValue+0x116>
		case PORTB: TOG_BIT(PORTB_BASE_PTR->PORT,Pin); break;
    25a6:	a6 e3       	ldi	r26, 0x36	; 54
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e6 e3       	ldi	r30, 0x36	; 54
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	48 2f       	mov	r20, r24
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	02 2e       	mov	r0, r18
    25be:	02 c0       	rjmp	.+4      	; 0x25c4 <DIO_TogglePinValue+0xa8>
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	0a 94       	dec	r0
    25c6:	e2 f7       	brpl	.-8      	; 0x25c0 <DIO_TogglePinValue+0xa4>
    25c8:	84 27       	eor	r24, r20
    25ca:	12 96       	adiw	r26, 0x02	; 2
    25cc:	8c 93       	st	X, r24
    25ce:	12 97       	sbiw	r26, 0x02	; 2
    25d0:	30 c0       	rjmp	.+96     	; 0x2632 <DIO_TogglePinValue+0x116>
		case PORTC: TOG_BIT(PORTC_BASE_PTR->PORT,Pin); break;
    25d2:	a3 e3       	ldi	r26, 0x33	; 51
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e3 e3       	ldi	r30, 0x33	; 51
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	82 81       	ldd	r24, Z+2	; 0x02
    25dc:	48 2f       	mov	r20, r24
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <DIO_TogglePinValue+0xd4>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <DIO_TogglePinValue+0xd0>
    25f4:	84 27       	eor	r24, r20
    25f6:	12 96       	adiw	r26, 0x02	; 2
    25f8:	8c 93       	st	X, r24
    25fa:	12 97       	sbiw	r26, 0x02	; 2
    25fc:	1a c0       	rjmp	.+52     	; 0x2632 <DIO_TogglePinValue+0x116>
		case PORTD: TOG_BIT(PORTD_BASE_PTR->PORT,Pin); break;
    25fe:	a0 e3       	ldi	r26, 0x30	; 48
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e0 e3       	ldi	r30, 0x30	; 48
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	48 2f       	mov	r20, r24
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	02 2e       	mov	r0, r18
    2616:	02 c0       	rjmp	.+4      	; 0x261c <DIO_TogglePinValue+0x100>
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	0a 94       	dec	r0
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <DIO_TogglePinValue+0xfc>
    2620:	84 27       	eor	r24, r20
    2622:	12 96       	adiw	r26, 0x02	; 2
    2624:	8c 93       	st	X, r24
    2626:	12 97       	sbiw	r26, 0x02	; 2
    2628:	04 c0       	rjmp	.+8      	; 0x2632 <DIO_TogglePinValue+0x116>
		default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	01 c0       	rjmp	.+2      	; 0x2632 <DIO_TogglePinValue+0x116>
		}
	}
	else
	{
		Local_u8ErrorState = PIN_NOT_FOUND;
    2630:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2632:	89 81       	ldd	r24, Y+1	; 0x01

}
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <DIO_GetPinValue>:
* uint8_t value;
* uint8_t pinstate = DIO_GetPinValue(PORTA,PIN0,&value);
* @endcode
******************************************************************************/
ErrorState_t DIO_GetPinValue(DioPort_t Port,DioPin_t Pin, uint8_t* pu8Value)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	27 97       	sbiw	r28, 0x07	; 7
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	8a 83       	std	Y+2, r24	; 0x02
    265a:	6b 83       	std	Y+3, r22	; 0x03
    265c:	5d 83       	std	Y+5, r21	; 0x05
    265e:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState_t Local_u8ErrorState = DONE ;
    2660:	8a e0       	ldi	r24, 0x0A	; 10
    2662:	89 83       	std	Y+1, r24	; 0x01

	if(pu8Value!=NULL)
    2664:	8c 81       	ldd	r24, Y+4	; 0x04
    2666:	9d 81       	ldd	r25, Y+5	; 0x05
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	09 f4       	brne	.+2      	; 0x266e <DIO_GetPinValue+0x2a>
    266c:	7a c0       	rjmp	.+244    	; 0x2762 <DIO_GetPinValue+0x11e>
	{
		if( (Pin<=PIN7))
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	88 30       	cpi	r24, 0x08	; 8
    2672:	08 f0       	brcs	.+2      	; 0x2676 <DIO_GetPinValue+0x32>
    2674:	74 c0       	rjmp	.+232    	; 0x275e <DIO_GetPinValue+0x11a>
		{
			switch(Port)
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	3f 83       	std	Y+7, r19	; 0x07
    267e:	2e 83       	std	Y+6, r18	; 0x06
    2680:	4e 81       	ldd	r20, Y+6	; 0x06
    2682:	5f 81       	ldd	r21, Y+7	; 0x07
    2684:	41 30       	cpi	r20, 0x01	; 1
    2686:	51 05       	cpc	r21, r1
    2688:	59 f1       	breq	.+86     	; 0x26e0 <DIO_GetPinValue+0x9c>
    268a:	8e 81       	ldd	r24, Y+6	; 0x06
    268c:	9f 81       	ldd	r25, Y+7	; 0x07
    268e:	82 30       	cpi	r24, 0x02	; 2
    2690:	91 05       	cpc	r25, r1
    2692:	34 f4       	brge	.+12     	; 0x26a0 <DIO_GetPinValue+0x5c>
    2694:	2e 81       	ldd	r18, Y+6	; 0x06
    2696:	3f 81       	ldd	r19, Y+7	; 0x07
    2698:	21 15       	cp	r18, r1
    269a:	31 05       	cpc	r19, r1
    269c:	69 f0       	breq	.+26     	; 0x26b8 <DIO_GetPinValue+0x74>
    269e:	5c c0       	rjmp	.+184    	; 0x2758 <DIO_GetPinValue+0x114>
    26a0:	4e 81       	ldd	r20, Y+6	; 0x06
    26a2:	5f 81       	ldd	r21, Y+7	; 0x07
    26a4:	42 30       	cpi	r20, 0x02	; 2
    26a6:	51 05       	cpc	r21, r1
    26a8:	79 f1       	breq	.+94     	; 0x2708 <DIO_GetPinValue+0xc4>
    26aa:	8e 81       	ldd	r24, Y+6	; 0x06
    26ac:	9f 81       	ldd	r25, Y+7	; 0x07
    26ae:	83 30       	cpi	r24, 0x03	; 3
    26b0:	91 05       	cpc	r25, r1
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <DIO_GetPinValue+0x72>
    26b4:	3d c0       	rjmp	.+122    	; 0x2730 <DIO_GetPinValue+0xec>
    26b6:	50 c0       	rjmp	.+160    	; 0x2758 <DIO_GetPinValue+0x114>
			{
			case PORTA : *pu8Value= GET_BIT(PORTA_BASE_PTR->PIN ,Pin); break;
    26b8:	e9 e3       	ldi	r30, 0x39	; 57
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a9 01       	movw	r20, r18
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <DIO_GetPinValue+0x8c>
    26cc:	55 95       	asr	r21
    26ce:	47 95       	ror	r20
    26d0:	8a 95       	dec	r24
    26d2:	e2 f7       	brpl	.-8      	; 0x26cc <DIO_GetPinValue+0x88>
    26d4:	ca 01       	movw	r24, r20
    26d6:	81 70       	andi	r24, 0x01	; 1
    26d8:	ec 81       	ldd	r30, Y+4	; 0x04
    26da:	fd 81       	ldd	r31, Y+5	; 0x05
    26dc:	80 83       	st	Z, r24
    26de:	43 c0       	rjmp	.+134    	; 0x2766 <DIO_GetPinValue+0x122>
			case PORTB : *pu8Value= GET_BIT(PORTB_BASE_PTR->PIN ,Pin); break;
    26e0:	e6 e3       	ldi	r30, 0x36	; 54
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a9 01       	movw	r20, r18
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <DIO_GetPinValue+0xb4>
    26f4:	55 95       	asr	r21
    26f6:	47 95       	ror	r20
    26f8:	8a 95       	dec	r24
    26fa:	e2 f7       	brpl	.-8      	; 0x26f4 <DIO_GetPinValue+0xb0>
    26fc:	ca 01       	movw	r24, r20
    26fe:	81 70       	andi	r24, 0x01	; 1
    2700:	ec 81       	ldd	r30, Y+4	; 0x04
    2702:	fd 81       	ldd	r31, Y+5	; 0x05
    2704:	80 83       	st	Z, r24
    2706:	2f c0       	rjmp	.+94     	; 0x2766 <DIO_GetPinValue+0x122>
			case PORTC : *pu8Value= GET_BIT(PORTC_BASE_PTR->PIN ,Pin); break;
    2708:	e3 e3       	ldi	r30, 0x33	; 51
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	a9 01       	movw	r20, r18
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <DIO_GetPinValue+0xdc>
    271c:	55 95       	asr	r21
    271e:	47 95       	ror	r20
    2720:	8a 95       	dec	r24
    2722:	e2 f7       	brpl	.-8      	; 0x271c <DIO_GetPinValue+0xd8>
    2724:	ca 01       	movw	r24, r20
    2726:	81 70       	andi	r24, 0x01	; 1
    2728:	ec 81       	ldd	r30, Y+4	; 0x04
    272a:	fd 81       	ldd	r31, Y+5	; 0x05
    272c:	80 83       	st	Z, r24
    272e:	1b c0       	rjmp	.+54     	; 0x2766 <DIO_GetPinValue+0x122>
			case PORTD : *pu8Value= GET_BIT(PORTD_BASE_PTR->PIN ,Pin); break;
    2730:	e0 e3       	ldi	r30, 0x30	; 48
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a9 01       	movw	r20, r18
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <DIO_GetPinValue+0x104>
    2744:	55 95       	asr	r21
    2746:	47 95       	ror	r20
    2748:	8a 95       	dec	r24
    274a:	e2 f7       	brpl	.-8      	; 0x2744 <DIO_GetPinValue+0x100>
    274c:	ca 01       	movw	r24, r20
    274e:	81 70       	andi	r24, 0x01	; 1
    2750:	ec 81       	ldd	r30, Y+4	; 0x04
    2752:	fd 81       	ldd	r31, Y+5	; 0x05
    2754:	80 83       	st	Z, r24
    2756:	07 c0       	rjmp	.+14     	; 0x2766 <DIO_GetPinValue+0x122>
			default: Local_u8ErrorState = PORT_NOT_FOUND ;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	04 c0       	rjmp	.+8      	; 0x2766 <DIO_GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = PIN_NOT_FOUND ;
    275e:	19 82       	std	Y+1, r1	; 0x01
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <DIO_GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULLPTR;
    2762:	85 e0       	ldi	r24, 0x05	; 5
    2764:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    2766:	89 81       	ldd	r24, Y+1	; 0x01
}
    2768:	27 96       	adiw	r28, 0x07	; 7
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <DIO_Init>:
* @endcode
*
**************************************************************************************************************************/

ErrorState_t DIO_Init(const DioConfig_t * const  Config)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <DIO_Init+0x6>
    2780:	0f 92       	push	r0
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	9b 83       	std	Y+3, r25	; 0x03
    2788:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_u8ErrorState = 4;
    278a:	84 e0       	ldi	r24, 0x04	; 4
    278c:	89 83       	std	Y+1, r24	; 0x01


	if(Config != NULL)
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	9b 81       	ldd	r25, Y+3	; 0x03
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	71 f0       	breq	.+28     	; 0x27b2 <DIO_Init+0x38>
	{

		DIO_SetPinDirection(Config->Port,Config->Pin,Config->Mode);
    2796:	ea 81       	ldd	r30, Y+2	; 0x02
    2798:	fb 81       	ldd	r31, Y+3	; 0x03
    279a:	80 81       	ld	r24, Z
    279c:	ea 81       	ldd	r30, Y+2	; 0x02
    279e:	fb 81       	ldd	r31, Y+3	; 0x03
    27a0:	21 81       	ldd	r18, Z+1	; 0x01
    27a2:	ea 81       	ldd	r30, Y+2	; 0x02
    27a4:	fb 81       	ldd	r31, Y+3	; 0x03
    27a6:	92 81       	ldd	r25, Z+2	; 0x02
    27a8:	62 2f       	mov	r22, r18
    27aa:	49 2f       	mov	r20, r25
    27ac:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <DIO_SetPinDirection>
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <DIO_Init+0x3c>


	}
	else
	{
		Local_u8ErrorState = NULLPTR;
    27b2:	85 e0       	ldi	r24, 0x05	; 5
    27b4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    27b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    27cc:	af e5       	ldi	r26, 0x5F	; 95
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	ef e5       	ldi	r30, 0x5F	; 95
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	80 68       	ori	r24, 0x80	; 128
    27d8:	8c 93       	st	X, r24
}
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    27e8:	af e5       	ldi	r26, 0x5F	; 95
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ef e5       	ldi	r30, 0x5F	; 95
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	8f 77       	andi	r24, 0x7F	; 127
    27f4:	8c 93       	st	X, r24

}
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <KPD_u8GetPressedKey>:
#include "KPD_interface.h"
#include "KPD_private.h"


uint8_t  KPD_u8GetPressedKey(void)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <KPD_u8GetPressedKey+0x6>
    2802:	00 d0       	rcall	.+0      	; 0x2804 <KPD_u8GetPressedKey+0x8>
    2804:	0f 92       	push	r0
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
	/*Initialize the state of keys that not pressed */
	uint8_t Local_u8PressedKey = KPD_NO_PRESSED_KEY ,Local_u8PinState,Local_u8ColumnId,Local_u8RowId;
    280a:	8f ef       	ldi	r24, 0xFF	; 255
    280c:	8b 83       	std	Y+3, r24	; 0x03
			                                     KPD_ROW2_PIN,
			                                     KPD_ROW3_PIN};


	/*Scanning the keypad */
	for( Local_u8ColumnId = 0 ; Local_u8ColumnId < COLUMN_NUM ; Local_u8ColumnId++)
    280e:	1a 82       	std	Y+2, r1	; 0x02
    2810:	5e c0       	rjmp	.+188    	; 0x28ce <KPD_u8GetPressedKey+0xd2>
	{
		/* Activate current column */
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnId],DIO_LOW);
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	fc 01       	movw	r30, r24
    281a:	e3 53       	subi	r30, 0x33	; 51
    281c:	fe 4f       	sbci	r31, 0xFE	; 254
    281e:	90 81       	ld	r25, Z
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	69 2f       	mov	r22, r25
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>

		for( Local_u8RowId = 0 ; Local_u8RowId < ROW_NUM ; Local_u8RowId++)
    282a:	19 82       	std	Y+1, r1	; 0x01
    282c:	3d c0       	rjmp	.+122    	; 0x28a8 <KPD_u8GetPressedKey+0xac>
		{
			/* Read the current row */
			DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowId],&Local_u8PinState);
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	fc 01       	movw	r30, r24
    2836:	e7 53       	subi	r30, 0x37	; 55
    2838:	fe 4f       	sbci	r31, 0xFE	; 254
    283a:	90 81       	ld	r25, Z
    283c:	9e 01       	movw	r18, r28
    283e:	2c 5f       	subi	r18, 0xFC	; 252
    2840:	3f 4f       	sbci	r19, 0xFF	; 255
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	69 2f       	mov	r22, r25
    2846:	a9 01       	movw	r20, r18
    2848:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_GetPinValue>

			/* check if switch is pressed */
			if(DIO_LOW == Local_u8PinState)
    284c:	8c 81       	ldd	r24, Y+4	; 0x04
    284e:	88 23       	and	r24, r24
    2850:	41 f5       	brne	.+80     	; 0x28a2 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowId][ Local_u8ColumnId] ;
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	48 2f       	mov	r20, r24
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	ca 01       	movw	r24, r20
    2860:	88 0f       	add	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	82 0f       	add	r24, r18
    286a:	93 1f       	adc	r25, r19
    286c:	fc 01       	movw	r30, r24
    286e:	ef 52       	subi	r30, 0x2F	; 47
    2870:	fe 4f       	sbci	r31, 0xFE	; 254
    2872:	80 81       	ld	r24, Z
    2874:	8b 83       	std	Y+3, r24	; 0x03
    2876:	0f c0       	rjmp	.+30     	; 0x2896 <KPD_u8GetPressedKey+0x9a>

				/* polling (busy waiting ) until the key is released */
				while(DIO_LOW == Local_u8PinState)
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowId],&Local_u8PinState);
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	fc 01       	movw	r30, r24
    2880:	e7 53       	subi	r30, 0x37	; 55
    2882:	fe 4f       	sbci	r31, 0xFE	; 254
    2884:	90 81       	ld	r25, Z
    2886:	9e 01       	movw	r18, r28
    2888:	2c 5f       	subi	r18, 0xFC	; 252
    288a:	3f 4f       	sbci	r19, 0xFF	; 255
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	69 2f       	mov	r22, r25
    2890:	a9 01       	movw	r20, r18
    2892:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_GetPinValue>
			if(DIO_LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowId][ Local_u8ColumnId] ;

				/* polling (busy waiting ) until the key is released */
				while(DIO_LOW == Local_u8PinState)
    2896:	8c 81       	ldd	r24, Y+4	; 0x04
    2898:	88 23       	and	r24, r24
    289a:	71 f3       	breq	.-36     	; 0x2878 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowId],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	1c c0       	rjmp	.+56     	; 0x28da <KPD_u8GetPressedKey+0xde>
	for( Local_u8ColumnId = 0 ; Local_u8ColumnId < COLUMN_NUM ; Local_u8ColumnId++)
	{
		/* Activate current column */
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnId],DIO_LOW);

		for( Local_u8RowId = 0 ; Local_u8RowId < ROW_NUM ; Local_u8RowId++)
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	8f 5f       	subi	r24, 0xFF	; 255
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	84 30       	cpi	r24, 0x04	; 4
    28ac:	08 f4       	brcc	.+2      	; 0x28b0 <KPD_u8GetPressedKey+0xb4>
    28ae:	bf cf       	rjmp	.-130    	; 0x282e <KPD_u8GetPressedKey+0x32>
			}

		}

		/* Deactivate current column */
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnId],DIO_HIGH);
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	fc 01       	movw	r30, r24
    28b8:	e3 53       	subi	r30, 0x33	; 51
    28ba:	fe 4f       	sbci	r31, 0xFE	; 254
    28bc:	90 81       	ld	r25, Z
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	69 2f       	mov	r22, r25
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>
			                                     KPD_ROW2_PIN,
			                                     KPD_ROW3_PIN};


	/*Scanning the keypad */
	for( Local_u8ColumnId = 0 ; Local_u8ColumnId < COLUMN_NUM ; Local_u8ColumnId++)
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	8f 5f       	subi	r24, 0xFF	; 255
    28cc:	8a 83       	std	Y+2, r24	; 0x02
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	84 30       	cpi	r24, 0x04	; 4
    28d2:	08 f4       	brcc	.+2      	; 0x28d6 <KPD_u8GetPressedKey+0xda>
    28d4:	9e cf       	rjmp	.-196    	; 0x2812 <KPD_u8GetPressedKey+0x16>
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnId],DIO_HIGH);

	}


	return Local_u8PressedKey;
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	8d 83       	std	Y+5, r24	; 0x05
    28da:	8d 81       	ldd	r24, Y+5	; 0x05


}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <PORT_voidInit>:
#include "PORT_register.h"



void PORT_voidInit(void)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
	 DDRA = PORTA_DIR ;
    28f4:	ea e3       	ldi	r30, 0x3A	; 58
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	8f ef       	ldi	r24, 0xFF	; 255
    28fa:	80 83       	st	Z, r24
	 DDRB = PORTB_DIR ;
    28fc:	e7 e3       	ldi	r30, 0x37	; 55
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	8f e0       	ldi	r24, 0x0F	; 15
    2902:	80 83       	st	Z, r24
	 DDRC = PORTC_DIR ;
    2904:	e4 e3       	ldi	r30, 0x34	; 52
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	8f ef       	ldi	r24, 0xFF	; 255
    290a:	80 83       	st	Z, r24
	 DDRD = PORTD_DIR ;
    290c:	e1 e3       	ldi	r30, 0x31	; 49
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	80 83       	st	Z, r24
	 
	 
	PORTA = PORTA_INIT_VAL; 
    2914:	eb e3       	ldi	r30, 0x3B	; 59
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL; 
    291a:	e8 e3       	ldi	r30, 0x38	; 56
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	8f ef       	ldi	r24, 0xFF	; 255
    2920:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL; 
    2922:	e5 e3       	ldi	r30, 0x35	; 53
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL; 
    2928:	e2 e3       	ldi	r30, 0x32	; 50
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	10 82       	st	Z, r1
	
}
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <SW_Init>:
* uint8_t state = SW_Init(&SW1);
*
* @endcode
******************************************************************************/
ErrorState_t SW_Init(SwConfig_t * pstSW)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <SW_Init+0x6>
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	9b 83       	std	Y+3, r25	; 0x03
    2942:	8a 83       	std	Y+2, r24	; 0x02

	ErrorState_t Local_u8SwErrorState = DONE;
    2944:	8a e0       	ldi	r24, 0x0A	; 10
    2946:	89 83       	std	Y+1, r24	; 0x01
	if(pstSW != NULL)
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	9b 81       	ldd	r25, Y+3	; 0x03
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	d1 f0       	breq	.+52     	; 0x2984 <SW_Init+0x50>
	{
		DIO_SetPinDirection(pstSW->SwPort ,pstSW->SwPin , DIO_INPUT);
    2950:	ea 81       	ldd	r30, Y+2	; 0x02
    2952:	fb 81       	ldd	r31, Y+3	; 0x03
    2954:	81 81       	ldd	r24, Z+1	; 0x01
    2956:	ea 81       	ldd	r30, Y+2	; 0x02
    2958:	fb 81       	ldd	r31, Y+3	; 0x03
    295a:	92 81       	ldd	r25, Z+2	; 0x02
    295c:	69 2f       	mov	r22, r25
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <DIO_SetPinDirection>

		if(pstSW->SwConectionType == SW_IN_PULLUP)
    2964:	ea 81       	ldd	r30, Y+2	; 0x02
    2966:	fb 81       	ldd	r31, Y+3	; 0x03
    2968:	80 81       	ld	r24, Z
    296a:	88 23       	and	r24, r24
    296c:	69 f4       	brne	.+26     	; 0x2988 <SW_Init+0x54>
		{
			DIO_SetPinValue(pstSW->SwPort ,pstSW->SwPin , DIO_HIGH);
    296e:	ea 81       	ldd	r30, Y+2	; 0x02
    2970:	fb 81       	ldd	r31, Y+3	; 0x03
    2972:	81 81       	ldd	r24, Z+1	; 0x01
    2974:	ea 81       	ldd	r30, Y+2	; 0x02
    2976:	fb 81       	ldd	r31, Y+3	; 0x03
    2978:	92 81       	ldd	r25, Z+2	; 0x02
    297a:	69 2f       	mov	r22, r25
    297c:	41 e0       	ldi	r20, 0x01	; 1
    297e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_SetPinValue>
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <SW_Init+0x54>
		}
	}
	else
	{
		Local_u8SwErrorState = NULLPTR ;
    2984:	85 e0       	ldi	r24, 0x05	; 5
    2986:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8SwErrorState ;
    2988:	89 81       	ldd	r24, Y+1	; 0x01
}
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <SW_GetState>:
* @endcode
******************************************************************************/



ErrorState_t  SW_GetState(SwConfig_t * pstSW,volatile SwState_t * State){
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	00 d0       	rcall	.+0      	; 0x299c <SW_GetState+0x6>
    299c:	00 d0       	rcall	.+0      	; 0x299e <SW_GetState+0x8>
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <SW_GetState+0xa>
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	7e 83       	std	Y+6, r23	; 0x06
    29aa:	6d 83       	std	Y+5, r22	; 0x05

	ErrorState_t Local_u8SwErrorState = DONE;
    29ac:	8a e0       	ldi	r24, 0x0A	; 10
    29ae:	89 83       	std	Y+1, r24	; 0x01
	SwState_t Local_u8SwState;

	if((pstSW != NULL) && (State != NULL))
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	c9 f1       	breq	.+114    	; 0x2a2a <SW_GetState+0x94>
    29b8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ba:	9e 81       	ldd	r25, Y+6	; 0x06
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	a9 f1       	breq	.+106    	; 0x2a2a <SW_GetState+0x94>

	{
		DIO_GetPinValue(pstSW->SwPort ,pstSW->SwPin, &Local_u8SwState);
    29c0:	eb 81       	ldd	r30, Y+3	; 0x03
    29c2:	fc 81       	ldd	r31, Y+4	; 0x04
    29c4:	81 81       	ldd	r24, Z+1	; 0x01
    29c6:	eb 81       	ldd	r30, Y+3	; 0x03
    29c8:	fc 81       	ldd	r31, Y+4	; 0x04
    29ca:	92 81       	ldd	r25, Z+2	; 0x02
    29cc:	9e 01       	movw	r18, r28
    29ce:	2e 5f       	subi	r18, 0xFE	; 254
    29d0:	3f 4f       	sbci	r19, 0xFF	; 255
    29d2:	69 2f       	mov	r22, r25
    29d4:	a9 01       	movw	r20, r18
    29d6:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_GetPinValue>

		if(pstSW->SwConectionType == SW_IN_PULLUP)
    29da:	eb 81       	ldd	r30, Y+3	; 0x03
    29dc:	fc 81       	ldd	r31, Y+4	; 0x04
    29de:	80 81       	ld	r24, Z
    29e0:	88 23       	and	r24, r24
    29e2:	79 f4       	brne	.+30     	; 0x2a02 <SW_GetState+0x6c>
		{

			if(Local_u8SwState == 0)
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	88 23       	and	r24, r24
    29e8:	29 f4       	brne	.+10     	; 0x29f4 <SW_GetState+0x5e>
			{
				*State = SW_PRESSED;
    29ea:	ed 81       	ldd	r30, Y+5	; 0x05
    29ec:	fe 81       	ldd	r31, Y+6	; 0x06
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	80 83       	st	Z, r24
    29f2:	1d c0       	rjmp	.+58     	; 0x2a2e <SW_GetState+0x98>
			}

			else if(Local_u8SwState == 1)
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	d1 f4       	brne	.+52     	; 0x2a2e <SW_GetState+0x98>
			{
				*State = SW_NOT_PRESSED;
    29fa:	ed 81       	ldd	r30, Y+5	; 0x05
    29fc:	fe 81       	ldd	r31, Y+6	; 0x06
    29fe:	10 82       	st	Z, r1
    2a00:	16 c0       	rjmp	.+44     	; 0x2a2e <SW_GetState+0x98>
			}
		}

		else if(pstSW->SwConectionType == SW_IN_PULLDOWN)
    2a02:	eb 81       	ldd	r30, Y+3	; 0x03
    2a04:	fc 81       	ldd	r31, Y+4	; 0x04
    2a06:	80 81       	ld	r24, Z
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	89 f4       	brne	.+34     	; 0x2a2e <SW_GetState+0x98>
		{

			if(Local_u8SwState == 1)
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	29 f4       	brne	.+10     	; 0x2a1c <SW_GetState+0x86>
			{
				*State = SW_PRESSED;
    2a12:	ed 81       	ldd	r30, Y+5	; 0x05
    2a14:	fe 81       	ldd	r31, Y+6	; 0x06
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	80 83       	st	Z, r24
    2a1a:	09 c0       	rjmp	.+18     	; 0x2a2e <SW_GetState+0x98>
			}

			else if(Local_u8SwState == 0)
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	88 23       	and	r24, r24
    2a20:	31 f4       	brne	.+12     	; 0x2a2e <SW_GetState+0x98>
			{
				*State = SW_NOT_PRESSED;
    2a22:	ed 81       	ldd	r30, Y+5	; 0x05
    2a24:	fe 81       	ldd	r31, Y+6	; 0x06
    2a26:	10 82       	st	Z, r1
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <SW_GetState+0x98>
			}
		}
	}
	else
	{
		Local_u8SwErrorState = NULLPTR ;
    2a2a:	85 e0       	ldi	r24, 0x05	; 5
    2a2c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8SwErrorState;
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a30:	26 96       	adiw	r28, 0x06	; 6
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <TIMER0_Init>:
 *
 * @param none
 *
 * @return void
 */
void TIMER0_Init(void){
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62

	/**
	 * clear the bits that control clock source
	 */
	TCCR0 &= CLK_MASK;
    2a4a:	a3 e5       	ldi	r26, 0x53	; 83
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e3 e5       	ldi	r30, 0x53	; 83
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	88 7f       	andi	r24, 0xF8	; 248
    2a56:	8c 93       	st	X, r24

	/**
	 * Set the clock source
	 */
	TCCR0 |= CLOCK_SELECT;
    2a58:	a3 e5       	ldi	r26, 0x53	; 83
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	e3 e5       	ldi	r30, 0x53	; 83
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	85 60       	ori	r24, 0x05	; 5
    2a64:	8c 93       	st	X, r24

}
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <TIMER0_SetMode>:
 *
 * @param[IN]  Mode is type of TimerMode_t
 *
 * @return Error state
 ******************************************************************************/
ErrorState_t TIMER0_SetMode(TimerMode_t Mode){
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <TIMER0_SetMode+0x6>
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <TIMER0_SetMode+0x8>
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t state = DONE ;
    2a7a:	8a e0       	ldi	r24, 0x0A	; 10
    2a7c:	89 83       	std	Y+1, r24	; 0x01
	switch(Mode){
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	28 2f       	mov	r18, r24
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	3c 83       	std	Y+4, r19	; 0x04
    2a86:	2b 83       	std	Y+3, r18	; 0x03
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	31 f0       	breq	.+12     	; 0x2a9c <TIMER0_SetMode+0x30>
    2a90:	2b 81       	ldd	r18, Y+3	; 0x03
    2a92:	3c 81       	ldd	r19, Y+4	; 0x04
    2a94:	22 30       	cpi	r18, 0x02	; 2
    2a96:	31 05       	cpc	r19, r1
    2a98:	81 f0       	breq	.+32     	; 0x2aba <TIMER0_SetMode+0x4e>
    2a9a:	1e c0       	rjmp	.+60     	; 0x2ad8 <TIMER0_SetMode+0x6c>
	case NORMAL:
	{
		CLR_BIT(TCCR0,TCCR0_WGM00);
    2a9c:	a3 e5       	ldi	r26, 0x53	; 83
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e3 e5       	ldi	r30, 0x53	; 83
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8f 7b       	andi	r24, 0xBF	; 191
    2aa8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
    2aaa:	a3 e5       	ldi	r26, 0x53	; 83
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e3 e5       	ldi	r30, 0x53	; 83
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	87 7f       	andi	r24, 0xF7	; 247
    2ab6:	8c 93       	st	X, r24
    2ab8:	11 c0       	rjmp	.+34     	; 0x2adc <TIMER0_SetMode+0x70>
	}break;
	case CTC:
	{
		CLR_BIT(TCCR0,TCCR0_WGM00);
    2aba:	a3 e5       	ldi	r26, 0x53	; 83
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e3 e5       	ldi	r30, 0x53	; 83
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	8f 7b       	andi	r24, 0xBF	; 191
    2ac6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    2ac8:	a3 e5       	ldi	r26, 0x53	; 83
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e3 e5       	ldi	r30, 0x53	; 83
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	88 60       	ori	r24, 0x08	; 8
    2ad4:	8c 93       	st	X, r24
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <TIMER0_SetMode+0x70>
	}break;
	default:
		state = WRONG_MODE;
    2ad8:	88 e0       	ldi	r24, 0x08	; 8
    2ada:	89 83       	std	Y+1, r24	; 0x01

	}
	return state;
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <TIMER0_SetInterrupt>:
 * @param[IN]  state is type of InterruptStatus_t
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_SetInterrupt(TimerMode_t Mode,InterruptStatus_t State){
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	29 97       	sbiw	r28, 0x09	; 9
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	8a 83       	std	Y+2, r24	; 0x02
    2b02:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t state = DONE;
    2b04:	8a e0       	ldi	r24, 0x0A	; 10
    2b06:	89 83       	std	Y+1, r24	; 0x01

	switch(Mode){
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	39 87       	std	Y+9, r19	; 0x09
    2b10:	28 87       	std	Y+8, r18	; 0x08
    2b12:	88 85       	ldd	r24, Y+8	; 0x08
    2b14:	99 85       	ldd	r25, Y+9	; 0x09
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	31 f0       	breq	.+12     	; 0x2b26 <TIMER0_SetInterrupt+0x3a>
    2b1a:	28 85       	ldd	r18, Y+8	; 0x08
    2b1c:	39 85       	ldd	r19, Y+9	; 0x09
    2b1e:	22 30       	cpi	r18, 0x02	; 2
    2b20:	31 05       	cpc	r19, r1
    2b22:	11 f1       	breq	.+68     	; 0x2b68 <TIMER0_SetInterrupt+0x7c>
    2b24:	42 c0       	rjmp	.+132    	; 0x2baa <TIMER0_SetInterrupt+0xbe>
	case NORMAL:
	{
		switch(State){
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	28 2f       	mov	r18, r24
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	3f 83       	std	Y+7, r19	; 0x07
    2b2e:	2e 83       	std	Y+6, r18	; 0x06
    2b30:	8e 81       	ldd	r24, Y+6	; 0x06
    2b32:	9f 81       	ldd	r25, Y+7	; 0x07
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	69 f0       	breq	.+26     	; 0x2b52 <TIMER0_SetInterrupt+0x66>
    2b38:	2e 81       	ldd	r18, Y+6	; 0x06
    2b3a:	3f 81       	ldd	r19, Y+7	; 0x07
    2b3c:	21 30       	cpi	r18, 0x01	; 1
    2b3e:	31 05       	cpc	r19, r1
    2b40:	81 f4       	brne	.+32     	; 0x2b62 <TIMER0_SetInterrupt+0x76>
		case ENABLED:
		{
			SET_BIT(TIMSK,TIMSK_TOIE0);break;
    2b42:	a9 e5       	ldi	r26, 0x59	; 89
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e9 e5       	ldi	r30, 0x59	; 89
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	81 60       	ori	r24, 0x01	; 1
    2b4e:	8c 93       	st	X, r24
    2b50:	2e c0       	rjmp	.+92     	; 0x2bae <TIMER0_SetInterrupt+0xc2>
		}
		case DISABLED:
		{
			CLR_BIT(TIMSK,TIMSK_TOIE0);break;
    2b52:	a9 e5       	ldi	r26, 0x59	; 89
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	e9 e5       	ldi	r30, 0x59	; 89
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	8e 7f       	andi	r24, 0xFE	; 254
    2b5e:	8c 93       	st	X, r24
    2b60:	26 c0       	rjmp	.+76     	; 0x2bae <TIMER0_SetInterrupt+0xc2>
		}
		default:
			state = ERROR_STATE;
    2b62:	89 e0       	ldi	r24, 0x09	; 9
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	23 c0       	rjmp	.+70     	; 0x2bae <TIMER0_SetInterrupt+0xc2>
		}
		break;
	}
	case CTC:
	{
		switch(State){
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	3d 83       	std	Y+5, r19	; 0x05
    2b70:	2c 83       	std	Y+4, r18	; 0x04
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	9d 81       	ldd	r25, Y+5	; 0x05
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	69 f0       	breq	.+26     	; 0x2b94 <TIMER0_SetInterrupt+0xa8>
    2b7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b7e:	21 30       	cpi	r18, 0x01	; 1
    2b80:	31 05       	cpc	r19, r1
    2b82:	81 f4       	brne	.+32     	; 0x2ba4 <TIMER0_SetInterrupt+0xb8>
		case ENABLED:
		{
			SET_BIT(TIMSK,TIMSK_OCIE0);break;
    2b84:	a9 e5       	ldi	r26, 0x59	; 89
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e9 e5       	ldi	r30, 0x59	; 89
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	82 60       	ori	r24, 0x02	; 2
    2b90:	8c 93       	st	X, r24
    2b92:	0d c0       	rjmp	.+26     	; 0x2bae <TIMER0_SetInterrupt+0xc2>
		}
		case DISABLED:
		{
			CLR_BIT(TIMSK,TIMSK_OCIE0);break;
    2b94:	a9 e5       	ldi	r26, 0x59	; 89
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e9 e5       	ldi	r30, 0x59	; 89
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8d 7f       	andi	r24, 0xFD	; 253
    2ba0:	8c 93       	st	X, r24
    2ba2:	05 c0       	rjmp	.+10     	; 0x2bae <TIMER0_SetInterrupt+0xc2>
		}
		default:
			state = ERROR_STATE;
    2ba4:	89 e0       	ldi	r24, 0x09	; 9
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <TIMER0_SetInterrupt+0xc2>
		}
		break;
	}
	default:
		state = WRONG_MODE;
    2baa:	88 e0       	ldi	r24, 0x08	; 8
    2bac:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bb0:	29 96       	adiw	r28, 0x09	; 9
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <TIMER0_ReadFlag>:
 * @param[IN]  Mode is type of TimerMode_t
 * @param[OUT] Result
 *
 * @return Error state
 ******************************************************************************/
ErrorState_t TIMER0_ReadFlag(TimerMode_t Mode,FlagStatus_t *Result ){
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <TIMER0_ReadFlag+0x6>
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <TIMER0_ReadFlag+0x8>
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <TIMER0_ReadFlag+0xa>
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	8a 83       	std	Y+2, r24	; 0x02
    2bd2:	7c 83       	std	Y+4, r23	; 0x04
    2bd4:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t state = DONE;
    2bd6:	8a e0       	ldi	r24, 0x0A	; 10
    2bd8:	89 83       	std	Y+1, r24	; 0x01
	if(Result != NULL){
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	11 f1       	breq	.+68     	; 0x2c26 <TIMER0_ReadFlag+0x64>
		switch(Mode){
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	28 2f       	mov	r18, r24
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	3e 83       	std	Y+6, r19	; 0x06
    2bea:	2d 83       	std	Y+5, r18	; 0x05
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	31 f0       	breq	.+12     	; 0x2c00 <TIMER0_ReadFlag+0x3e>
    2bf4:	2d 81       	ldd	r18, Y+5	; 0x05
    2bf6:	3e 81       	ldd	r19, Y+6	; 0x06
    2bf8:	22 30       	cpi	r18, 0x02	; 2
    2bfa:	31 05       	cpc	r19, r1
    2bfc:	49 f0       	breq	.+18     	; 0x2c10 <TIMER0_ReadFlag+0x4e>
    2bfe:	11 c0       	rjmp	.+34     	; 0x2c22 <TIMER0_ReadFlag+0x60>
		case NORMAL: *Result = GET_BIT(TIFR,TIFR_TOV0); break;
    2c00:	e8 e5       	ldi	r30, 0x58	; 88
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	81 70       	andi	r24, 0x01	; 1
    2c08:	eb 81       	ldd	r30, Y+3	; 0x03
    2c0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c0c:	80 83       	st	Z, r24
    2c0e:	0b c0       	rjmp	.+22     	; 0x2c26 <TIMER0_ReadFlag+0x64>
		case CTC   : *Result = GET_BIT(TIFR,TIFR_OCF0); break;
    2c10:	e8 e5       	ldi	r30, 0x58	; 88
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	86 95       	lsr	r24
    2c18:	81 70       	andi	r24, 0x01	; 1
    2c1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c1e:	80 83       	st	Z, r24
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <TIMER0_ReadFlag+0x64>
		default : state = WRONG_MODE;
    2c22:	88 e0       	ldi	r24, 0x08	; 8
    2c24:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return state;
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c28:	26 96       	adiw	r28, 0x06	; 6
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	08 95       	ret

00002c3a <TIMER0_SetBusyWait>:
 * @param[IN]  period
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_SetBusyWait(uint64_t Period){
    2c3a:	ef 92       	push	r14
    2c3c:	ff 92       	push	r15
    2c3e:	0f 93       	push	r16
    2c40:	1f 93       	push	r17
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	69 97       	sbiw	r28, 0x19	; 25
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	2a 8b       	std	Y+18, r18	; 0x12
    2c58:	3b 8b       	std	Y+19, r19	; 0x13
    2c5a:	4c 8b       	std	Y+20, r20	; 0x14
    2c5c:	5d 8b       	std	Y+21, r21	; 0x15
    2c5e:	6e 8b       	std	Y+22, r22	; 0x16
    2c60:	7f 8b       	std	Y+23, r23	; 0x17
    2c62:	88 8f       	std	Y+24, r24	; 0x18
    2c64:	99 8f       	std	Y+25, r25	; 0x19

	ErrorState_t state = DONE;
    2c66:	8a e0       	ldi	r24, 0x0A	; 10
    2c68:	89 8b       	std	Y+17, r24	; 0x11
	sfloat32_t NO_ofOverflow;

	/*
	 * define the freq ,presacler, OverFlowTicks parameters
	 */
	Freq =SYS_CLK;
    2c6a:	88 e0       	ldi	r24, 0x08	; 8
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9c 87       	std	Y+12, r25	; 0x0c
    2c70:	8b 87       	std	Y+11, r24	; 0x0b
	Prescaler = TIMER_CLK_SRC ;
    2c72:	88 e0       	ldi	r24, 0x08	; 8
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	9a 87       	std	Y+10, r25	; 0x0a
    2c78:	89 87       	std	Y+9, r24	; 0x09
	OverFlowTicks= TIMER_TICKS;
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	91 e0       	ldi	r25, 0x01	; 1
    2c7e:	9e 87       	std	Y+14, r25	; 0x0e
    2c80:	8d 87       	std	Y+13, r24	; 0x0d
	/*
	 * calculate the Tick time of counter in microsecond
	 */
	TickTime = ( sfloat32_t)Prescaler / Freq;
    2c82:	89 85       	ldd	r24, Y+9	; 0x09
    2c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c86:	cc 01       	movw	r24, r24
    2c88:	a0 e0       	ldi	r26, 0x00	; 0
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2c94:	7b 01       	movw	r14, r22
    2c96:	8c 01       	movw	r16, r24
    2c98:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c9c:	cc 01       	movw	r24, r24
    2c9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2caa:	9b 01       	movw	r18, r22
    2cac:	ac 01       	movw	r20, r24
    2cae:	c8 01       	movw	r24, r16
    2cb0:	b7 01       	movw	r22, r14
    2cb2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	98 8b       	std	Y+16, r25	; 0x10
    2cc8:	8f 87       	std	Y+15, r24	; 0x0f

	/*
	 * calculate the desired ticks
	 */

	DesiredTicks = ( sfloat32_t)Period / TickTime;
    2cca:	2a 89       	ldd	r18, Y+18	; 0x12
    2ccc:	3b 89       	ldd	r19, Y+19	; 0x13
    2cce:	4c 89       	ldd	r20, Y+20	; 0x14
    2cd0:	5d 89       	ldd	r21, Y+21	; 0x15
    2cd2:	6e 89       	ldd	r22, Y+22	; 0x16
    2cd4:	7f 89       	ldd	r23, Y+23	; 0x17
    2cd6:	88 8d       	ldd	r24, Y+24	; 0x18
    2cd8:	99 8d       	ldd	r25, Y+25	; 0x19
    2cda:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    2cde:	7b 01       	movw	r14, r22
    2ce0:	8c 01       	movw	r16, r24
    2ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce4:	98 89       	ldd	r25, Y+16	; 0x10
    2ce6:	cc 01       	movw	r24, r24
    2ce8:	a0 e0       	ldi	r26, 0x00	; 0
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	bc 01       	movw	r22, r24
    2cee:	cd 01       	movw	r24, r26
    2cf0:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2cf4:	9b 01       	movw	r18, r22
    2cf6:	ac 01       	movw	r20, r24
    2cf8:	c8 01       	movw	r24, r16
    2cfa:	b7 01       	movw	r22, r14
    2cfc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	98 87       	std	Y+8, r25	; 0x08
    2d12:	8f 83       	std	Y+7, r24	; 0x07

	/**
	 * Check the relation between overflow ticks and desired ticks
	 */
	if(DesiredTicks > OverFlowTicks){
    2d14:	2f 81       	ldd	r18, Y+7	; 0x07
    2d16:	38 85       	ldd	r19, Y+8	; 0x08
    2d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1c:	82 17       	cp	r24, r18
    2d1e:	93 07       	cpc	r25, r19
    2d20:	08 f0       	brcs	.+2      	; 0x2d24 <TIMER0_SetBusyWait+0xea>
    2d22:	89 c0       	rjmp	.+274    	; 0x2e36 <TIMER0_SetBusyWait+0x1fc>

		NO_ofOverflow = (sfloat32_t)DesiredTicks /OverFlowTicks;
    2d24:	8f 81       	ldd	r24, Y+7	; 0x07
    2d26:	98 85       	ldd	r25, Y+8	; 0x08
    2d28:	cc 01       	movw	r24, r24
    2d2a:	a0 e0       	ldi	r26, 0x00	; 0
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2d36:	7b 01       	movw	r14, r22
    2d38:	8c 01       	movw	r16, r24
    2d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3e:	cc 01       	movw	r24, r24
    2d40:	a0 e0       	ldi	r26, 0x00	; 0
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2d4c:	9b 01       	movw	r18, r22
    2d4e:	ac 01       	movw	r20, r24
    2d50:	c8 01       	movw	r24, r16
    2d52:	b7 01       	movw	r22, r14
    2d54:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	9a 83       	std	Y+2, r25	; 0x02
    2d60:	ab 83       	std	Y+3, r26	; 0x03
    2d62:	bc 83       	std	Y+4, r27	; 0x04
		/*to get integer part */
		Flag = (uint32)NO_ofOverflow;
    2d64:	69 81       	ldd	r22, Y+1	; 0x01
    2d66:	7a 81       	ldd	r23, Y+2	; 0x02
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	8e 83       	std	Y+6, r24	; 0x06
		/*to get fraction part and calculate the preload value*/
		Preload = ((1-(NO_ofOverflow -Flag))*( sfloat32_t)OverFlowTicks);
    2d76:	8e 81       	ldd	r24, Y+6	; 0x06
    2d78:	88 2f       	mov	r24, r24
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	aa 27       	eor	r26, r26
    2d7e:	97 fd       	sbrc	r25, 7
    2d80:	a0 95       	com	r26
    2d82:	ba 2f       	mov	r27, r26
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
    2d8c:	9b 01       	movw	r18, r22
    2d8e:	ac 01       	movw	r20, r24
    2d90:	69 81       	ldd	r22, Y+1	; 0x01
    2d92:	7a 81       	ldd	r23, Y+2	; 0x02
    2d94:	8b 81       	ldd	r24, Y+3	; 0x03
    2d96:	9c 81       	ldd	r25, Y+4	; 0x04
    2d98:	0e 94 9d 02 	call	0x53a	; 0x53a <__subsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9c 01       	movw	r18, r24
    2da2:	ad 01       	movw	r20, r26
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	80 e8       	ldi	r24, 0x80	; 128
    2daa:	9f e3       	ldi	r25, 0x3F	; 63
    2dac:	0e 94 9d 02 	call	0x53a	; 0x53a <__subsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	7c 01       	movw	r14, r24
    2db6:	8d 01       	movw	r16, r26
    2db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dbc:	cc 01       	movw	r24, r24
    2dbe:	a0 e0       	ldi	r26, 0x00	; 0
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    2dca:	9b 01       	movw	r18, r22
    2dcc:	ac 01       	movw	r20, r24
    2dce:	c8 01       	movw	r24, r16
    2dd0:	b7 01       	movw	r22, r14
    2dd2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	bc 01       	movw	r22, r24
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	8d 83       	std	Y+5, r24	; 0x05
		if(Preload >0 ){
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	88 23       	and	r24, r24
    2dec:	19 f0       	breq	.+6      	; 0x2df4 <TIMER0_SetBusyWait+0x1ba>
			Flag ++;
    2dee:	8e 81       	ldd	r24, Y+6	; 0x06
    2df0:	8f 5f       	subi	r24, 0xFF	; 255
    2df2:	8e 83       	std	Y+6, r24	; 0x06
		}
		TCNT0 = Preload;
    2df4:	e2 e5       	ldi	r30, 0x52	; 82
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	80 83       	st	Z, r24
    2dfc:	16 c0       	rjmp	.+44     	; 0x2e2a <TIMER0_SetBusyWait+0x1f0>
		/*Stuck until during is elapsed */

		while(Flag > 0)
		{
			/*Decrement flag each time */
			Flag --;
    2dfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2e00:	81 50       	subi	r24, 0x01	; 1
    2e02:	8e 83       	std	Y+6, r24	; 0x06
			/*stay polling until flag is raised */
			while(GET_BIT(TIFR,TIFR_TOV0) != 1);
    2e04:	e8 e5       	ldi	r30, 0x58	; 88
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	81 70       	andi	r24, 0x01	; 1
    2e10:	90 70       	andi	r25, 0x00	; 0
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	b9 f3       	breq	.-18     	; 0x2e04 <TIMER0_SetBusyWait+0x1ca>
			/*CLEAR FLAG BY ST WITH LOGIC ONE*/
			SET_BIT(TIFR,TIFR_TOV0);
    2e16:	a8 e5       	ldi	r26, 0x58	; 88
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	e8 e5       	ldi	r30, 0x58	; 88
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	81 60       	ori	r24, 0x01	; 1
    2e22:	8c 93       	st	X, r24
			/*Set the timer register = 0*/

			TCNT0= 0;
    2e24:	e2 e5       	ldi	r30, 0x52	; 82
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	10 82       	st	Z, r1
		}
		TCNT0 = Preload;

		/*Stuck until during is elapsed */

		while(Flag > 0)
    2e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2c:	88 23       	and	r24, r24
    2e2e:	39 f7       	brne	.-50     	; 0x2dfe <TIMER0_SetBusyWait+0x1c4>
			TCNT0= 0;

		}


		state = STAT1;
    2e30:	85 e0       	ldi	r24, 0x05	; 5
    2e32:	89 8b       	std	Y+17, r24	; 0x11
    2e34:	43 c0       	rjmp	.+134    	; 0x2ebc <TIMER0_SetBusyWait+0x282>


	}
	else if(DesiredTicks < OverFlowTicks){
    2e36:	2f 81       	ldd	r18, Y+7	; 0x07
    2e38:	38 85       	ldd	r19, Y+8	; 0x08
    2e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3e:	28 17       	cp	r18, r24
    2e40:	39 07       	cpc	r19, r25
    2e42:	e8 f4       	brcc	.+58     	; 0x2e7e <TIMER0_SetBusyWait+0x244>
		/*
		 * we calculate the preload value and set to timer register
		 */
		Preload = OverFlowTicks -DesiredTicks;
    2e44:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e46:	8f 81       	ldd	r24, Y+7	; 0x07
    2e48:	29 2f       	mov	r18, r25
    2e4a:	28 1b       	sub	r18, r24
    2e4c:	82 2f       	mov	r24, r18
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0 = Preload;
    2e50:	e2 e5       	ldi	r30, 0x52	; 82
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	8d 81       	ldd	r24, Y+5	; 0x05
    2e56:	80 83       	st	Z, r24
		/*stay polling until flag is raised */
		while(GET_BIT(TIFR,TIFR_TOV0) != 1);
    2e58:	e8 e5       	ldi	r30, 0x58	; 88
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	88 2f       	mov	r24, r24
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	81 70       	andi	r24, 0x01	; 1
    2e64:	90 70       	andi	r25, 0x00	; 0
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	b9 f3       	breq	.-18     	; 0x2e58 <TIMER0_SetBusyWait+0x21e>
		/*CLEAR FLAG BY ST WITH LOGIC ONE*/
		SET_BIT(TIFR,TIFR_TOV0);
    2e6a:	a8 e5       	ldi	r26, 0x58	; 88
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	e8 e5       	ldi	r30, 0x58	; 88
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	81 60       	ori	r24, 0x01	; 1
    2e76:	8c 93       	st	X, r24
		state = STAT2;
    2e78:	86 e0       	ldi	r24, 0x06	; 6
    2e7a:	89 8b       	std	Y+17, r24	; 0x11
    2e7c:	1f c0       	rjmp	.+62     	; 0x2ebc <TIMER0_SetBusyWait+0x282>
	}
	else if(DesiredTicks == OverFlowTicks){
    2e7e:	2f 81       	ldd	r18, Y+7	; 0x07
    2e80:	38 85       	ldd	r19, Y+8	; 0x08
    2e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e86:	28 17       	cp	r18, r24
    2e88:	39 07       	cpc	r19, r25
    2e8a:	b1 f4       	brne	.+44     	; 0x2eb8 <TIMER0_SetBusyWait+0x27e>
		TCNT0 = 0;
    2e8c:	e2 e5       	ldi	r30, 0x52	; 82
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	10 82       	st	Z, r1

		/*stay polling until flag is raised */
		while(GET_BIT(TIFR,TIFR_TOV0) != 1);
    2e92:	e8 e5       	ldi	r30, 0x58	; 88
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	88 2f       	mov	r24, r24
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	81 70       	andi	r24, 0x01	; 1
    2e9e:	90 70       	andi	r25, 0x00	; 0
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	b9 f3       	breq	.-18     	; 0x2e92 <TIMER0_SetBusyWait+0x258>
		/*CLEAR FLAG BY ST WITH LOGIC ONE*/
		SET_BIT(TIFR,TIFR_TOV0);
    2ea4:	a8 e5       	ldi	r26, 0x58	; 88
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e8 e5       	ldi	r30, 0x58	; 88
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	81 60       	ori	r24, 0x01	; 1
    2eb0:	8c 93       	st	X, r24
		state = STAT3;
    2eb2:	87 e0       	ldi	r24, 0x07	; 7
    2eb4:	89 8b       	std	Y+17, r24	; 0x11
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <TIMER0_SetBusyWait+0x282>
	}

	else
	{
		state = NULLPTR;
    2eb8:	85 e0       	ldi	r24, 0x05	; 5
    2eba:	89 8b       	std	Y+17, r24	; 0x11
	}

	return state;
    2ebc:	89 89       	ldd	r24, Y+17	; 0x11



}
    2ebe:	69 96       	adiw	r28, 0x19	; 25
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	1f 91       	pop	r17
    2ed0:	0f 91       	pop	r16
    2ed2:	ff 90       	pop	r15
    2ed4:	ef 90       	pop	r14
    2ed6:	08 95       	ret

00002ed8 <TIMER0_Disabled>:
 * Description: used to disable the TIMER0
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_Disabled(void){
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	0f 92       	push	r0
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t state = DONE;
    2ee2:	8a e0       	ldi	r24, 0x0A	; 10
    2ee4:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 |=TIM_NO_CLK;
    2ee6:	a3 e5       	ldi	r26, 0x53	; 83
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e3 e5       	ldi	r30, 0x53	; 83
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	8c 93       	st	X, r24

	return state;
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ef4:	0f 90       	pop	r0
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	08 95       	ret

00002efc <TIMER0_SetModeOfOutputComparePin>:
 * @param[IN]  mode in CompareOutputMode_t enum
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_SetModeOfOutputComparePin(CompareOutputMode_t Mode){
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <TIMER0_SetModeOfOutputComparePin+0x6>
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <TIMER0_SetModeOfOutputComparePin+0x8>
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t state = DONE;
    2f0a:	8a e0       	ldi	r24, 0x0A	; 10
    2f0c:	89 83       	std	Y+1, r24	; 0x01

	switch(Mode){
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	3c 83       	std	Y+4, r19	; 0x04
    2f16:	2b 83       	std	Y+3, r18	; 0x03
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	81 30       	cpi	r24, 0x01	; 1
    2f1e:	91 05       	cpc	r25, r1
    2f20:	21 f1       	breq	.+72     	; 0x2f6a <TIMER0_SetModeOfOutputComparePin+0x6e>
    2f22:	2b 81       	ldd	r18, Y+3	; 0x03
    2f24:	3c 81       	ldd	r19, Y+4	; 0x04
    2f26:	22 30       	cpi	r18, 0x02	; 2
    2f28:	31 05       	cpc	r19, r1
    2f2a:	2c f4       	brge	.+10     	; 0x2f36 <TIMER0_SetModeOfOutputComparePin+0x3a>
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	61 f0       	breq	.+24     	; 0x2f4c <TIMER0_SetModeOfOutputComparePin+0x50>
    2f34:	47 c0       	rjmp	.+142    	; 0x2fc4 <TIMER0_SetModeOfOutputComparePin+0xc8>
    2f36:	2b 81       	ldd	r18, Y+3	; 0x03
    2f38:	3c 81       	ldd	r19, Y+4	; 0x04
    2f3a:	22 30       	cpi	r18, 0x02	; 2
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	21 f1       	breq	.+72     	; 0x2f88 <TIMER0_SetModeOfOutputComparePin+0x8c>
    2f40:	8b 81       	ldd	r24, Y+3	; 0x03
    2f42:	9c 81       	ldd	r25, Y+4	; 0x04
    2f44:	83 30       	cpi	r24, 0x03	; 3
    2f46:	91 05       	cpc	r25, r1
    2f48:	71 f1       	breq	.+92     	; 0x2fa6 <TIMER0_SetModeOfOutputComparePin+0xaa>
    2f4a:	3c c0       	rjmp	.+120    	; 0x2fc4 <TIMER0_SetModeOfOutputComparePin+0xc8>
	case DISCONNECTED_OC0:
	{
		CLR_BIT(TCCR0,TCCR0_COM00);
    2f4c:	a3 e5       	ldi	r26, 0x53	; 83
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	e3 e5       	ldi	r30, 0x53	; 83
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	8f 7e       	andi	r24, 0xEF	; 239
    2f58:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_COM01);
    2f5a:	a3 e5       	ldi	r26, 0x53	; 83
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	e3 e5       	ldi	r30, 0x53	; 83
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	8f 7d       	andi	r24, 0xDF	; 223
    2f66:	8c 93       	st	X, r24
    2f68:	2f c0       	rjmp	.+94     	; 0x2fc8 <TIMER0_SetModeOfOutputComparePin+0xcc>
		break;
	}
	case TOGGLE_OC0      :
	{
		SET_BIT(TCCR0,TCCR0_COM00);
    2f6a:	a3 e5       	ldi	r26, 0x53	; 83
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	e3 e5       	ldi	r30, 0x53	; 83
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	80 61       	ori	r24, 0x10	; 16
    2f76:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_COM01);
    2f78:	a3 e5       	ldi	r26, 0x53	; 83
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e3 e5       	ldi	r30, 0x53	; 83
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	8f 7d       	andi	r24, 0xDF	; 223
    2f84:	8c 93       	st	X, r24
    2f86:	20 c0       	rjmp	.+64     	; 0x2fc8 <TIMER0_SetModeOfOutputComparePin+0xcc>
		break;
	}
	case CLEAR_OC0       :
	{
		CLR_BIT(TCCR0,TCCR0_COM00);
    2f88:	a3 e5       	ldi	r26, 0x53	; 83
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e3 e5       	ldi	r30, 0x53	; 83
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	8f 7e       	andi	r24, 0xEF	; 239
    2f94:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    2f96:	a3 e5       	ldi	r26, 0x53	; 83
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	e3 e5       	ldi	r30, 0x53	; 83
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	80 62       	ori	r24, 0x20	; 32
    2fa2:	8c 93       	st	X, r24
    2fa4:	11 c0       	rjmp	.+34     	; 0x2fc8 <TIMER0_SetModeOfOutputComparePin+0xcc>
		break;
	}
	case SET_OC0         :
	{
		SET_BIT(TCCR0,TCCR0_COM00);
    2fa6:	a3 e5       	ldi	r26, 0x53	; 83
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e3 e5       	ldi	r30, 0x53	; 83
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	80 61       	ori	r24, 0x10	; 16
    2fb2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    2fb4:	a3 e5       	ldi	r26, 0x53	; 83
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e3 e5       	ldi	r30, 0x53	; 83
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 62       	ori	r24, 0x20	; 32
    2fc0:	8c 93       	st	X, r24
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <TIMER0_SetModeOfOutputComparePin+0xcc>
		break;
	}
	default:
	{
		state = WRONG_MODE;
    2fc4:	88 e0       	ldi	r24, 0x08	; 8
    2fc6:	89 83       	std	Y+1, r24	; 0x01
	}

	}

	return state;
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <TIMER0_ReadTimerReg>:
 *
 * @param[OUT]  none
 *
 * @return value of timer register
 ******************************************************************************/
uint8_t  TIMER0_ReadTimerReg(void){
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    2fe0:	e2 e5       	ldi	r30, 0x52	; 82
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z

}
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <TIMER0_SetTimerValue>:
 * @param[IN]  value
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_SetTimerValue(uint8_t Value){
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <TIMER0_SetTimerValue+0x6>
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t state = DONE;
    2ff8:	8a e0       	ldi	r24, 0x0A	; 10
    2ffa:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = Value;
    2ffc:	e2 e5       	ldi	r30, 0x52	; 82
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	80 83       	st	Z, r24

	return state;
    3004:	89 81       	ldd	r24, Y+1	; 0x01
}
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	cf 91       	pop	r28
    300c:	df 91       	pop	r29
    300e:	08 95       	ret

00003010 <TIMER0_SetOutputCompareValue>:
 * @param[IN]  value
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_SetOutputCompareValue(uint8_t Value){
    3010:	df 93       	push	r29
    3012:	cf 93       	push	r28
    3014:	00 d0       	rcall	.+0      	; 0x3016 <TIMER0_SetOutputCompareValue+0x6>
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t state = DONE;
    301c:	8a e0       	ldi	r24, 0x0A	; 10
    301e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Value;
    3020:	ec e5       	ldi	r30, 0x5C	; 92
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	80 83       	st	Z, r24

	return state;
    3028:	89 81       	ldd	r24, Y+1	; 0x01
}
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <TIMER0_u8SetCallBack>:
 * @param[IN]  Copy_pvCallBack
 *
 * @return Error state
 ******************************************************************************/

ErrorState_t TIMER0_u8SetCallBack(void (*Copy_pvCallBack)(void)){
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	00 d0       	rcall	.+0      	; 0x303a <TIMER0_u8SetCallBack+0x6>
    303a:	0f 92       	push	r0
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	9b 83       	std	Y+3, r25	; 0x03
    3042:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t state = DONE;
    3044:	8a e0       	ldi	r24, 0x0A	; 10
    3046:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBack != NULL){
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	9b 81       	ldd	r25, Y+3	; 0x03
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	39 f0       	breq	.+14     	; 0x305e <TIMER0_u8SetCallBack+0x2a>
		Timer0Callback = Copy_pvCallBack;
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	9b 81       	ldd	r25, Y+3	; 0x03
    3054:	90 93 e7 01 	sts	0x01E7, r25
    3058:	80 93 e6 01 	sts	0x01E6, r24
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <TIMER0_u8SetCallBack+0x2e>
	}
	else
	{
		state = NULLPTR;
    305e:	85 e0       	ldi	r24, 0x05	; 5
    3060:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    3062:	89 81       	ldd	r24, Y+1	; 0x01
}
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	cf 91       	pop	r28
    306c:	df 91       	pop	r29
    306e:	08 95       	ret

00003070 <__vector_10>:
/**
 * ISR for CLear On Compare Match Event
 */
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    3070:	1f 92       	push	r1
    3072:	0f 92       	push	r0
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	0f 92       	push	r0
    3078:	11 24       	eor	r1, r1
    307a:	2f 93       	push	r18
    307c:	3f 93       	push	r19
    307e:	4f 93       	push	r20
    3080:	5f 93       	push	r21
    3082:	6f 93       	push	r22
    3084:	7f 93       	push	r23
    3086:	8f 93       	push	r24
    3088:	9f 93       	push	r25
    308a:	af 93       	push	r26
    308c:	bf 93       	push	r27
    308e:	ef 93       	push	r30
    3090:	ff 93       	push	r31
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
	if(Timer0Callback  != NULL)
    309a:	80 91 e6 01 	lds	r24, 0x01E6
    309e:	90 91 e7 01 	lds	r25, 0x01E7
    30a2:	00 97       	sbiw	r24, 0x00	; 0
    30a4:	29 f0       	breq	.+10     	; 0x30b0 <__vector_10+0x40>
	{
		Timer0Callback();
    30a6:	e0 91 e6 01 	lds	r30, 0x01E6
    30aa:	f0 91 e7 01 	lds	r31, 0x01E7
    30ae:	09 95       	icall
	}
}
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	ff 91       	pop	r31
    30b6:	ef 91       	pop	r30
    30b8:	bf 91       	pop	r27
    30ba:	af 91       	pop	r26
    30bc:	9f 91       	pop	r25
    30be:	8f 91       	pop	r24
    30c0:	7f 91       	pop	r23
    30c2:	6f 91       	pop	r22
    30c4:	5f 91       	pop	r21
    30c6:	4f 91       	pop	r20
    30c8:	3f 91       	pop	r19
    30ca:	2f 91       	pop	r18
    30cc:	0f 90       	pop	r0
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	0f 90       	pop	r0
    30d2:	1f 90       	pop	r1
    30d4:	18 95       	reti

000030d6 <__vector_11>:
/**
 * ISR for CLear On overflow Event
 */
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    30d6:	1f 92       	push	r1
    30d8:	0f 92       	push	r0
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	0f 92       	push	r0
    30de:	11 24       	eor	r1, r1
    30e0:	2f 93       	push	r18
    30e2:	3f 93       	push	r19
    30e4:	4f 93       	push	r20
    30e6:	5f 93       	push	r21
    30e8:	6f 93       	push	r22
    30ea:	7f 93       	push	r23
    30ec:	8f 93       	push	r24
    30ee:	9f 93       	push	r25
    30f0:	af 93       	push	r26
    30f2:	bf 93       	push	r27
    30f4:	ef 93       	push	r30
    30f6:	ff 93       	push	r31
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
	if(Timer0Callback  != NULL)
    3100:	80 91 e6 01 	lds	r24, 0x01E6
    3104:	90 91 e7 01 	lds	r25, 0x01E7
    3108:	00 97       	sbiw	r24, 0x00	; 0
    310a:	29 f0       	breq	.+10     	; 0x3116 <__vector_11+0x40>
	{
		Timer0Callback();
    310c:	e0 91 e6 01 	lds	r30, 0x01E6
    3110:	f0 91 e7 01 	lds	r31, 0x01E7
    3114:	09 95       	icall
	}
}
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	ff 91       	pop	r31
    311c:	ef 91       	pop	r30
    311e:	bf 91       	pop	r27
    3120:	af 91       	pop	r26
    3122:	9f 91       	pop	r25
    3124:	8f 91       	pop	r24
    3126:	7f 91       	pop	r23
    3128:	6f 91       	pop	r22
    312a:	5f 91       	pop	r21
    312c:	4f 91       	pop	r20
    312e:	3f 91       	pop	r19
    3130:	2f 91       	pop	r18
    3132:	0f 90       	pop	r0
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	0f 90       	pop	r0
    3138:	1f 90       	pop	r1
    313a:	18 95       	reti

0000313c <main>:
 */

#include "App_interface.h"


void main(void){
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62

App_Init();
    3144:	0e 94 c8 09 	call	0x1390	; 0x1390 <App_Init>

App_Update();
    3148:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <App_Update>
    314c:	ff cf       	rjmp	.-2      	; 0x314c <main+0x10>

0000314e <__udivmodhi4>:
    314e:	aa 1b       	sub	r26, r26
    3150:	bb 1b       	sub	r27, r27
    3152:	51 e1       	ldi	r21, 0x11	; 17
    3154:	07 c0       	rjmp	.+14     	; 0x3164 <__udivmodhi4_ep>

00003156 <__udivmodhi4_loop>:
    3156:	aa 1f       	adc	r26, r26
    3158:	bb 1f       	adc	r27, r27
    315a:	a6 17       	cp	r26, r22
    315c:	b7 07       	cpc	r27, r23
    315e:	10 f0       	brcs	.+4      	; 0x3164 <__udivmodhi4_ep>
    3160:	a6 1b       	sub	r26, r22
    3162:	b7 0b       	sbc	r27, r23

00003164 <__udivmodhi4_ep>:
    3164:	88 1f       	adc	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	5a 95       	dec	r21
    316a:	a9 f7       	brne	.-22     	; 0x3156 <__udivmodhi4_loop>
    316c:	80 95       	com	r24
    316e:	90 95       	com	r25
    3170:	bc 01       	movw	r22, r24
    3172:	cd 01       	movw	r24, r26
    3174:	08 95       	ret

00003176 <__prologue_saves__>:
    3176:	2f 92       	push	r2
    3178:	3f 92       	push	r3
    317a:	4f 92       	push	r4
    317c:	5f 92       	push	r5
    317e:	6f 92       	push	r6
    3180:	7f 92       	push	r7
    3182:	8f 92       	push	r8
    3184:	9f 92       	push	r9
    3186:	af 92       	push	r10
    3188:	bf 92       	push	r11
    318a:	cf 92       	push	r12
    318c:	df 92       	push	r13
    318e:	ef 92       	push	r14
    3190:	ff 92       	push	r15
    3192:	0f 93       	push	r16
    3194:	1f 93       	push	r17
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	ca 1b       	sub	r28, r26
    31a0:	db 0b       	sbc	r29, r27
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	09 94       	ijmp

000031ae <__epilogue_restores__>:
    31ae:	2a 88       	ldd	r2, Y+18	; 0x12
    31b0:	39 88       	ldd	r3, Y+17	; 0x11
    31b2:	48 88       	ldd	r4, Y+16	; 0x10
    31b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    31b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    31b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    31ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    31bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    31be:	aa 84       	ldd	r10, Y+10	; 0x0a
    31c0:	b9 84       	ldd	r11, Y+9	; 0x09
    31c2:	c8 84       	ldd	r12, Y+8	; 0x08
    31c4:	df 80       	ldd	r13, Y+7	; 0x07
    31c6:	ee 80       	ldd	r14, Y+6	; 0x06
    31c8:	fd 80       	ldd	r15, Y+5	; 0x05
    31ca:	0c 81       	ldd	r16, Y+4	; 0x04
    31cc:	1b 81       	ldd	r17, Y+3	; 0x03
    31ce:	aa 81       	ldd	r26, Y+2	; 0x02
    31d0:	b9 81       	ldd	r27, Y+1	; 0x01
    31d2:	ce 0f       	add	r28, r30
    31d4:	d1 1d       	adc	r29, r1
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    31e0:	ed 01       	movw	r28, r26
    31e2:	08 95       	ret

000031e4 <_exit>:
    31e4:	f8 94       	cli

000031e6 <__stop_program>:
    31e6:	ff cf       	rjmp	.-2      	; 0x31e6 <__stop_program>
